drop extension if exists gp_array_agg;
NOTICE:  extension "gp_array_agg" does not exist, skipping
create extension gp_array_agg;
create table perct as select a, a / 10 as b from generate_series(1, 100)a distributed by (a);
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1 (a varchar, b character varying) distributed randomly;
insert into t1 values ('aaaaaaa', 'cccccccccc');
insert into t1 values ('aaaaaaa', 'ddddd');
insert into t1 values ('bbbbbbb', 'eeee');
insert into t1 values ('bbbbbbb', 'eeef');
insert into t1 values ('bbbbb', 'dfafa');
create temporary table aggordertest (a int4, b int4) distributed by (a);
insert into aggordertest values (1,1), (2,2), (1,3), (3,4), (null,5), (2,null);
create table mergeappend_test ( a int, b int, x int ) distributed by (a,b);
insert into mergeappend_test select g/100, g/100, g from generate_series(1, 500) g;
analyze mergeappend_test;
create table pagg_test (x int, y int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'x' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into pagg_test
select (case x % 4 when 1 then null else x end), x % 10
from generate_series(1,5000) x;
select (select gp_array_agg(a order by a) from perct where median(t.a) = 50.5) from (select * from perct t order by a offset 0) as t;
                                                                                                                                             gp_array_agg                                                                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100}
(1 row)

select gp_array_agg(f order by f)  from (select b::text as f from t1 group by b order by b) q;
            gp_array_agg            
------------------------------------
 {cccccccccc,ddddd,dfafa,eeee,eeef}
(1 row)

select gp_array_agg(a order by a nulls first) from aggordertest;
   gp_array_agg   
------------------
 {NULL,1,1,2,2,3}
(1 row)

select gp_array_agg(a order by a nulls last) from aggordertest;
   gp_array_agg   
------------------
 {1,1,2,2,3,NULL}
(1 row)

select gp_array_agg(a order by a desc nulls first) from aggordertest;
   gp_array_agg   
------------------
 {NULL,3,2,2,1,1}
(1 row)

select gp_array_agg(a order by a desc nulls last) from aggordertest;
   gp_array_agg   
------------------
 {3,2,2,1,1,NULL}
(1 row)

select gp_array_agg(a order by b nulls first) from aggordertest;
   gp_array_agg   
------------------
 {2,1,2,1,3,NULL}
(1 row)

select gp_array_agg(a order by b nulls last) from aggordertest;
   gp_array_agg   
------------------
 {1,2,1,3,NULL,2}
(1 row)

select gp_array_agg(a order by b desc nulls first) from aggordertest;
   gp_array_agg   
------------------
 {2,NULL,3,1,2,1}
(1 row)

select gp_array_agg(a order by b desc nulls last) from aggordertest;
   gp_array_agg   
------------------
 {NULL,3,1,2,1,2}
(1 row)

select a, b, array_dims(gp_array_agg(x)) from mergeappend_test r group by a, b
union all
select null, null, array_dims(gp_array_agg(x)) from mergeappend_test r
order by 1,2;
 a | b | array_dims 
---+---+------------
 0 | 0 | [1:99]
 1 | 1 | [1:100]
 2 | 2 | [1:100]
 3 | 3 | [1:100]
 4 | 4 | [1:100]
 5 | 5 | [1:1]
   |   | [1:500]
(7 rows)

explain (costs off)
select a, b, array_dims(gp_array_agg(x)) from mergeappend_test r group by a, b
union all
select null, null, array_dims(gp_array_agg(x)) from mergeappend_test r
order by 1,2;
                           QUERY PLAN                           
----------------------------------------------------------------
 Sort
   Sort Key: r.a, r.b
   ->  Append
         ->  Gather Motion 3:1  (slice1; segments: 3)
               ->  HashAggregate
                     Group Key: r.a, r.b
                     ->  Seq Scan on mergeappend_test r
         ->  Aggregate
               ->  Gather Motion 3:1  (slice2; segments: 3)
                     ->  Aggregate
                           ->  Seq Scan on mergeappend_test r_1
 Optimizer: Postgres query optimizer
(12 rows)

select a, b, array_dims(gp_array_agg(x)) from mergeappend_test r group by a, b
union all
select null, null, array_dims(gp_array_agg(x)) from mergeappend_test r, pg_sleep(0)
order by 1,2;
 a | b | array_dims 
---+---+------------
 0 | 0 | [1:99]
 1 | 1 | [1:100]
 2 | 2 | [1:100]
 3 | 3 | [1:100]
 4 | 4 | [1:100]
 5 | 5 | [1:1]
   |   | [1:500]
(7 rows)

explain analyze select a, b, array_dims(gp_array_agg(x)) from mergeappend_test r group by a, b
union all
select null, null, array_dims(gp_array_agg(x)) from mergeappend_test r
order by 1,2;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=23.67..23.77 rows=37 width=40) (actual time=0.881..0.884 rows=7 loops=1)
   Sort Key: r.a, r.b
   Sort Method:  quicksort  Memory: 33kB
   ->  Append  (cost=11.75..22.71 rows=37 width=40) (actual time=0.378..0.832 rows=7 loops=1)
         ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=11.75..13.37 rows=36 width=40) (actual time=0.377..0.772 rows=6 loops=1)
               ->  HashAggregate  (cost=11.75..12.29 rows=12 width=40) (actual time=0.360..0.375 rows=4 loops=1)
                     Group Key: r.a, r.b
                     Extra Text: (seg0)   Hash chain length 1.0 avg, 1 max, using 4 of 32 buckets; total 0 expansions.
 
                     ->  Seq Scan on mergeappend_test r  (cost=0.00..8.00 rows=167 width=12) (actual time=0.010..0.047 rows=301 loops=1)
         ->  Aggregate  (cost=9.32..9.33 rows=1 width=40) (actual time=0.055..0.056 rows=1 loops=1)
               ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=9.25..9.30 rows=1 width=32) (actual time=0.007..0.011 rows=3 loops=1)
                     ->  Aggregate  (cost=9.25..9.26 rows=1 width=32) (actual time=0.185..0.186 rows=1 loops=1)
                           ->  Seq Scan on mergeappend_test r_1  (cost=0.00..8.00 rows=167 width=4) (actual time=0.010..0.088 rows=301 loops=1)
 Planning time: 0.330 ms
   (slice0)    Executor memory: 224K bytes.  Work_mem: 33K bytes max.
   (slice1)    Executor memory: 172K bytes avg x 3 workers, 188K bytes max (seg0).
   (slice2)    Executor memory: 58K bytes avg x 3 workers, 59K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 1.359 ms
(21 rows)

-- create a view as we otherwise have to repeat this query a few times.
create view v_pagg_test as
select
	y,
	min(t) as tmin,max(t) as tmax,count(distinct t) as tndistinct,
	min(a) as amin,max(a) as amax,count(distinct a) as andistinct
from (
	select
		y,
		unnest(regexp_split_to_array(a1.t, ','))::int as t,
		unnest(a1.a) as a
	from (
		select
			y,
			string_agg(x::text, ',') as t,
			string_agg(x::text::bytea, ',') as b,
			gp_array_agg(x) as a
		from pagg_test
		group by y
	) a1
) a2
group by y;
-- ensure results are correct.
select * from v_pagg_test order by y;
 y | tmin | tmax | tndistinct | amin | amax | andistinct 
---+------+------+------------+------+------+------------
 0 |   10 | 5000 |        500 |   10 | 5000 |        500
 1 |   11 | 4991 |        250 |   11 | 4991 |        250
 2 |    2 | 4992 |        500 |    2 | 4992 |        500
 3 |    3 | 4983 |        250 |    3 | 4983 |        250
 4 |    4 | 4994 |        500 |    4 | 4994 |        500
 5 |   15 | 4995 |        250 |   15 | 4995 |        250
 6 |    6 | 4996 |        500 |    6 | 4996 |        500
 7 |    7 | 4987 |        250 |    7 | 4987 |        250
 8 |    8 | 4998 |        500 |    8 | 4998 |        500
 9 |   19 | 4999 |        250 |   19 | 4999 |        250
(10 rows)

explain (costs off) select * from v_pagg_test order by y;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   Merge Key: a1.y
   ->  GroupAggregate
         Group Key: a1.y
         ->  Sort
               Sort Key: a1.y
               ->  Result
                     ->  Subquery Scan on a1
                           ->  GroupAggregate
                                 Group Key: pagg_test.y
                                 ->  Sort
                                       Sort Key: pagg_test.y
                                       ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                             Hash Key: pagg_test.y
                                             ->  Seq Scan on pagg_test
 Optimizer: Postgres query optimizer
(16 rows)

