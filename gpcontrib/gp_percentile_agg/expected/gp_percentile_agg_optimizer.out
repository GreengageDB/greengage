create table perct as select a, a / 10 as b from generate_series(1, 100)a distributed by (a);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table perct2 as select a, a / 10 as b from generate_series(1, 100)a, generate_series(1, 2);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table perct3 as select a, b from perct, generate_series(1, 10)i where a % 7 < i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table perct4 as select case when a % 10 = 5 then null else a end as a,
	b, null::float as c from perct;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table percts as select '2012-01-01 00:00:00'::timestamp + interval '1day' * i as a,
	i / 10 as b, i as c from generate_series(1, 100)i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table perctsz as select '2012-01-01 00:00:00 UTC'::timestamptz + interval '1day' * i as a,
	i / 10 as b, i as c from generate_series(1, 100)i;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
create table perctnum as select a, (a / 13)::float8  as b, (a * 1.9999 )::numeric as c  from generate_series(1, 100)a;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
create view percv as select percentile_cont(0.4) within group (order by a / 10),
	median(a), percentile_disc(0.51) within group (order by a desc) from perct group by b order by b;
create view percv2 as select median(a) as m1, median(a::float) as m2 from perct;
create table mpp_22219(col_a character(2) NOT NULL, dkey_a character varying(8) NOT NULL, value double precision)
WITH (APPENDONLY=true, COMPRESSLEVEL=5, ORIENTATION=column, COMPRESSTYPE=zlib, OIDS=FALSE)
DISTRIBUTED BY (dkey_a);
insert into mpp_22219 select i, i, i from  (select * from generate_series(1, 20) i ) a ;
create table mpp_21026 ( t1 varchar(10), t2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 't1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into mpp_21026 select i, i from  (select * from generate_series(1, 20) i ) a ;
create table mpp_20076 (col1 timestamp, col2 int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'col1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into mpp_20076 select to_timestamp(i),i from generate_series(1,20) i;
CREATE TABLE mpp_22413
(
  col_a character(2) NOT NULL,
  d1 character varying(8) NOT NULL,
  d2 character varying(8) NOT NULL,
  d3 character varying(8) NOT NULL,
  value1 double precision,
  value2 double precision
)
WITH (OIDS=FALSE)
DISTRIBUTED BY (d1,d2,d3);
insert into mpp_22413
select i, i, i, i, i,i
from  (select * from generate_series(1, 99) i ) a ;
set optimizer_enable_orderedagg=on;
explain select percentile_cont(0.5) within group (order by a),
	median(a), percentile_disc(0.5) within group(order by a) from perct;
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice8; segments: 3)  (cost=0.00..2712071156.19 rows=1 width=20)
   ->  Sequence  (cost=0.00..2712071156.19 rows=1 width=20)
         ->  Shared Scan (share slice:id 8:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct_1.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct_1.a
                                 ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
         ->  Sequence  (cost=0.00..2712070725.18 rows=1 width=20)
               ->  Shared Scan (share slice:id 8:1)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                 Group Key: perct.a
                                 ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                       Sort Key: perct.a
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
               ->  Redistribute Motion 1:3  (slice7)  (cost=0.00..2712070294.18 rows=1 width=20)
                     ->  Nested Loop  (cost=0.00..2712070294.18 rows=1 width=20)
                           Join Filter: true
                           ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=16)
                                 ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                       ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                             Merge Key: share0_ref3.a
                                             ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                                   Join Filter: true
                                                   ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.00 rows=34 width=12)
                                                   ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Broadcast Motion 1:3  (slice5)  (cost=0.00..431.00 rows=3 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Shared Scan (share slice:id 4:0)  (cost=0.00..431.00 rows=34 width=8)
                           ->  Materialize  (cost=0.00..1324037.57 rows=1 width=4)
                                 ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=4)
                                       ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                             ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                                   Merge Key: share1_ref3.a
                                                   ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                                         Join Filter: true
                                                         ->  Shared Scan (share slice:id 3:1)  (cost=0.00..431.00 rows=34 width=12)
                                                         ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                                     ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 1:1)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(50 rows)

select percentile_cont(0.5) within group (order by a),
	median(a), percentile_disc(0.5) within group(order by a) from perct;
 percentile_cont | median | percentile_disc 
-----------------+--------+-----------------
            50.5 |   50.5 |              50
(1 row)

explain select b, percentile_cont(0.5) within group (order by a),
	median(a), percentile_disc(0.5) within group(order by a) from perct group by b order by b;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=24)
   Merge Key: b
   ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=24)
         Group Key: b
         ->  Sort  (cost=0.00..431.01 rows=34 width=8)
               Sort Key: b
               ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                     Hash Key: b
                     ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(10 rows)

select b, percentile_cont(0.5) within group (order by a),
	median(a), percentile_disc(0.5) within group(order by a) from perct group by b order by b;
 b  | percentile_cont | median | percentile_disc 
----+-----------------+--------+-----------------
  0 |               5 |      5 |               5
  1 |            14.5 |   14.5 |              14
  2 |            24.5 |   24.5 |              24
  3 |            34.5 |   34.5 |              34
  4 |            44.5 |   44.5 |              44
  5 |            54.5 |   54.5 |              54
  6 |            64.5 |   64.5 |              64
  7 |            74.5 |   74.5 |              74
  8 |            84.5 |   84.5 |              84
  9 |            94.5 |   94.5 |              94
 10 |             100 |    100 |             100
(11 rows)

explain select percentile_cont(0.2) within group (order by a) from generate_series(1, 100)a;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Sequence  (cost=0.00..1324182.58 rows=1 width=8)
   ->  Shared Scan (share slice:id -1:0)  (cost=0.00..0.13 rows=334 width=1)
         ->  Materialize  (cost=0.00..0.13 rows=334 width=1)
               ->  HashAggregate  (cost=0.00..0.13 rows=334 width=12)
                     Group Key: generate_series.generate_series
                     ->  Function Scan on generate_series  (cost=0.00..0.00 rows=334 width=4)
   ->  Aggregate  (cost=0.00..1324182.45 rows=1 width=8)
         ->  Limit  (cost=0.00..1324182.44 rows=334 width=20)
               ->  Sort  (cost=0.00..1324182.42 rows=334 width=20)
                     Sort Key: share0_ref3.generate_series
                     ->  Nested Loop  (cost=0.00..1324181.29 rows=334 width=20)
                           Join Filter: true
                           ->  Shared Scan (share slice:id -1:0)  (cost=0.00..431.03 rows=334 width=12)
                           ->  Materialize  (cost=0.00..432.02 rows=1 width=8)
                                 ->  Result  (cost=0.00..431.02 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..431.02 rows=1 width=8)
                                             ->  Shared Scan (share slice:id -1:0)  (cost=0.00..431.02 rows=334 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(18 rows)

select percentile_cont(0.2) within group (order by a) from generate_series(1, 100)a;
 percentile_cont 
-----------------
            20.8
(1 row)

explain select a / 10, percentile_cont(0.2) within group (order by a) from generate_series(1, 100)a
	group by a / 10 order by a / 10;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 GroupAggregate  (cost=0.00..0.48 rows=334 width=12)
   Group Key: ((generate_series / 10))
   ->  Sort  (cost=0.00..0.46 rows=334 width=8)
         Sort Key: ((generate_series / 10))
         ->  Result  (cost=0.00..0.01 rows=334 width=8)
               ->  Function Scan on generate_series  (cost=0.00..0.00 rows=334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select a / 10, percentile_cont(0.2) within group (order by a) from generate_series(1, 100)a
	group by a / 10 order by a / 10;
 ?column? | percentile_cont 
----------+-----------------
        0 |             2.6
        1 |            11.8
        2 |            21.8
        3 |            31.8
        4 |            41.8
        5 |            51.8
        6 |            61.8
        7 |            71.8
        8 |            81.8
        9 |            91.8
       10 |             100
(11 rows)

explain select percentile_cont(0.2) within group (order by a),
	percentile_cont(0.8) within group (order by a desc) from perct group by b order by b;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=16)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=16)
         Merge Key: b
         ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=20)
               Group Key: b
               ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select percentile_cont(0.2) within group (order by a),
	percentile_cont(0.8) within group (order by a desc) from perct group by b order by b;
 percentile_cont | percentile_cont 
-----------------+-----------------
             2.6 |             2.6
            11.8 |            11.8
            21.8 |            21.8
            31.8 |            31.8
            41.8 |            41.8
            51.8 |            51.8
            61.8 |            61.8
            71.8 |            71.8
            81.8 |            81.8
            91.8 |            91.8
             100 |             100
(11 rows)

explain select percentile_cont(0.1) within group (order by a), count(*), sum(a) from perct
	group by b order by b;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=24)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=24)
         Merge Key: b
         ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=28)
               Group Key: b
               ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select percentile_cont(0.1) within group (order by a), count(*), sum(a) from perct
	group by b order by b;
 percentile_cont | count | sum 
-----------------+-------+-----
             1.8 |     9 |  45
            10.9 |    10 | 145
            20.9 |    10 | 245
            30.9 |    10 | 345
            40.9 |    10 | 445
            50.9 |    10 | 545
            60.9 |    10 | 645
            70.9 |    10 | 745
            80.9 |    10 | 845
            90.9 |    10 | 945
             100 |     1 | 100
(11 rows)

explain select percentile_cont(0.6) within group (order by a), count(*), sum(a) from perct;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1356697594.89 rows=1 width=24)
   ->  Sequence  (cost=0.00..1356697594.89 rows=1 width=24)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct_1.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct_1.a
                                 ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice5)  (cost=0.00..1356697163.89 rows=1 width=24)
               ->  Nested Loop  (cost=0.00..1356697163.89 rows=1 width=24)
                     Join Filter: true
                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=16)
                           ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..431.00 rows=1 width=16)
                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=16)
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
                     ->  Materialize  (cost=0.00..1324037.57 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                                 ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                       ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                             Merge Key: share0_ref3.a
                                             ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                                   Join Filter: true
                                                   ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                                   ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(32 rows)

select percentile_cont(0.6) within group (order by a), count(*), sum(a) from perct;
 percentile_cont | count | sum  
-----------------+-------+------
            60.4 |   100 | 5050
(1 row)

explain select percentile_cont(0.3) within group (order by a) + count(*) from perct group by b order by b;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=8)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=8)
         Merge Key: b
         ->  Result  (cost=0.00..431.01 rows=4 width=12)
               ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=20)
                     Group Key: b
                     ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                           Sort Key: b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: b
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(12 rows)

select percentile_cont(0.3) within group (order by a) + count(*) from perct group by b order by b;
 ?column? 
----------
     12.4
     22.7
     32.7
     42.7
     52.7
     62.7
     72.7
     82.7
     92.7
    102.7
      101
(11 rows)

explain select median(a) from perct group by b having median(a) = 5;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=5 width=8)
   ->  Result  (cost=0.00..431.01 rows=2 width=8)
         Filter: ((MEDIAN(a)) = 5::double precision)
         ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=16)
               Group Key: b
               ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select median(a) from perct group by b having median(a) = 5;
 median 
--------
      5
(1 row)

explain select median(a), percentile_cont(0.6) within group (order by a desc) from perct group by b having count(*) > 1 order by 1;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=5 width=16)
   Merge Key: (MEDIAN(a))
   ->  Sort  (cost=0.00..431.01 rows=2 width=16)
         Sort Key: (MEDIAN(a))
         ->  Result  (cost=0.00..431.01 rows=2 width=16)
               Filter: ((count()) > 1)
               ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=24)
                     Group Key: b
                     ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                           Sort Key: b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: b
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(14 rows)

select median(a), percentile_cont(0.6) within group (order by a desc) from perct group by b having count(*) > 1 order by 1;
 median | percentile_cont 
--------+-----------------
      5 |             4.2
   14.5 |            13.6
   24.5 |            23.6
   34.5 |            33.6
   44.5 |            43.6
   54.5 |            53.6
   64.5 |            63.6
   74.5 |            73.6
   84.5 |            83.6
   94.5 |            93.6
(10 rows)

explain select median(10);
                   QUERY PLAN                   
------------------------------------------------
 Aggregate  (cost=0.00..0.00 rows=1 width=8)
   ->  Result  (cost=0.00..0.00 rows=1 width=1)
 Optimizer: Pivotal Optimizer (GPORCA)
(3 rows)

select median(10);
 median 
--------
     10
(1 row)

explain select count(*), median(b+1) from perct group by b+2
	having median(b+1) in (select avg(b+1) from perct group by b+2);
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..862.02 rows=1 width=16)
   ->  Hash Semi Join  (cost=0.00..862.02 rows=1 width=16)
         Hash Cond: ((MEDIAN((perct.b + 1))) = ((pg_catalog.avg((avg((perct_1.b + 1))))))::double precision)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..431.01 rows=4 width=24)
               Hash Key: (MEDIAN((perct.b + 1)))
               ->  Result  (cost=0.00..431.01 rows=4 width=24)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=24)
                           Group Key: ((perct.b + 2))
                           ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                                 Sort Key: ((perct.b + 2))
                                 ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                       Hash Key: ((perct.b + 2))
                                       ->  Result  (cost=0.00..431.00 rows=34 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=34 width=8)
                                                   ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Hash  (cost=431.01..431.01 rows=4 width=8)
               ->  Redistribute Motion 3:3  (slice4; segments: 3)  (cost=0.00..431.01 rows=4 width=8)
                     Hash Key: ((pg_catalog.avg((avg((perct_1.b + 1))))))::double precision
                     ->  Result  (cost=0.00..431.01 rows=4 width=8)
                           ->  HashAggregate  (cost=0.00..431.01 rows=4 width=8)
                                 Group Key: ((perct_1.b + 2))
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..431.01 rows=4 width=12)
                                       Hash Key: ((perct_1.b + 2))
                                       ->  Result  (cost=0.00..431.01 rows=4 width=12)
                                             ->  HashAggregate  (cost=0.00..431.01 rows=4 width=12)
                                                   Group Key: (perct_1.b + 2)
                                                   ->  Result  (cost=0.00..431.00 rows=34 width=8)
                                                         ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(29 rows)

select count(*), median(b+1) from perct group by b+2
	having median(b+1) in (select avg(b+1) from perct group by b+2);
 count | median 
-------+--------
     1 |     11
     9 |      1
    10 |      2
    10 |      3
    10 |      4
    10 |      5
    10 |      6
    10 |      7
    10 |      8
    10 |      9
    10 |     10
(11 rows)

explain select median(a) from perct2;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1324468.60 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324468.60 rows=1 width=8)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  HashAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct2.a
                           ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.00 rows=67 width=4)
                                 Hash Key: perct2.a
                                 ->  Seq Scan on perct2  (cost=0.00..431.00 rows=67 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.59 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324037.59 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324037.59 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.59 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Sort  (cost=0.00..1324037.58 rows=34 width=20)
                                       Sort Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(27 rows)

select median(a) from perct2;
 median 
--------
   50.5
(1 row)

explain select median(a) from perct2 group by b order by b;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.02 rows=4 width=8)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.02 rows=11 width=8)
         Merge Key: b
         ->  GroupAggregate  (cost=0.00..431.02 rows=4 width=12)
               Group Key: b
               ->  Sort  (cost=0.00..431.02 rows=67 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=67 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct2  (cost=0.00..431.00 rows=67 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select median(a) from perct2 group by b order by b;
 median 
--------
      5
   14.5
   24.5
   34.5
   44.5
   54.5
   64.5
   74.5
   84.5
   94.5
    100
(11 rows)

explain select b, count(*), count(distinct a), median(a) from perct3 group by b order by b;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.10 rows=11 width=28)
   Merge Key: b
   ->  GroupAggregate  (cost=0.00..431.10 rows=4 width=28)
         Group Key: b
         ->  Sort  (cost=0.00..431.10 rows=235 width=8)
               Sort Key: b
               ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.01 rows=235 width=8)
                     Hash Key: b
                     ->  Seq Scan on perct3  (cost=0.00..431.00 rows=235 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(10 rows)

select b, count(*), count(distinct a), median(a) from perct3 group by b order by b;
 b  | count | count | median 
----+-------+-------+--------
  0 |    66 |     9 |      5
  1 |    67 |    10 |     15
  2 |    72 |    10 |     24
  3 |    70 |    10 |     35
  4 |    68 |    10 |     44
  5 |    73 |    10 |     55
  6 |    64 |    10 |     64
  7 |    76 |    10 |     74
  8 |    67 |    10 |     85
  9 |    72 |    10 |     94
 10 |     8 |     1 |    100
(11 rows)

explain select b+1, count(*), count(distinct a),
       median(a), percentile_cont(0.3) within group (order by a desc)
from perct group by b+1 order by b+1;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=36)
   Merge Key: ((b + 1))
   ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=36)
         Group Key: ((b + 1))
         ->  Sort  (cost=0.00..431.01 rows=34 width=8)
               Sort Key: ((b + 1))
               ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                     Hash Key: ((b + 1))
                     ->  Result  (cost=0.00..431.00 rows=34 width=8)
                           ->  Result  (cost=0.00..431.00 rows=34 width=8)
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(12 rows)

select b+1, count(*), count(distinct a),
       median(a), percentile_cont(0.3) within group (order by a desc)
from perct group by b+1 order by b+1;
 ?column? | count | count | median | percentile_cont 
----------+-------+-------+--------+-----------------
        1 |     9 |     9 |      5 |             6.6
        2 |    10 |    10 |   14.5 |            16.3
        3 |    10 |    10 |   24.5 |            26.3
        4 |    10 |    10 |   34.5 |            36.3
        5 |    10 |    10 |   44.5 |            46.3
        6 |    10 |    10 |   54.5 |            56.3
        7 |    10 |    10 |   64.5 |            66.3
        8 |    10 |    10 |   74.5 |            76.3
        9 |    10 |    10 |   84.5 |            86.3
       10 |    10 |    10 |   94.5 |            96.3
       11 |     1 |     1 |    100 |             100
(11 rows)

explain select median(a), median(c) from perct4;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice9; segments: 3)  (cost=0.00..2712065060.98 rows=1 width=16)
   ->  Sequence  (cost=0.00..2712065060.98 rows=1 width=16)
         ->  Shared Scan (share slice:id 9:0)  (cost=0.00..431.01 rows=28 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=28 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=28 width=12)
                           Group Key: perct4_1.a
                           ->  Sort  (cost=0.00..431.01 rows=34 width=4)
                                 Sort Key: perct4_1.a
                                 ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..431.00 rows=34 width=4)
                                       Hash Key: perct4_1.a
                                       ->  Seq Scan on perct4 perct4_1  (cost=0.00..431.00 rows=34 width=4)
         ->  Sequence  (cost=0.00..2712064629.97 rows=1 width=16)
               ->  Shared Scan (share slice:id 9:1)  (cost=0.00..431.01 rows=1 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=1 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=1 width=16)
                                 Group Key: perct4.c
                                 ->  Sort  (cost=0.00..431.01 rows=1 width=16)
                                       Sort Key: perct4.c
                                       ->  Redistribute Motion 3:3  (slice7; segments: 3)  (cost=0.00..431.01 rows=1 width=16)
                                             Hash Key: perct4.c
                                             ->  Result  (cost=0.00..431.01 rows=1 width=16)
                                                   ->  HashAggregate  (cost=0.00..431.01 rows=1 width=16)
                                                         Group Key: perct4.c
                                                         ->  Seq Scan on perct4  (cost=0.00..431.00 rows=34 width=8)
               ->  Redistribute Motion 1:3  (slice6)  (cost=0.00..2712064198.97 rows=1 width=16)
                     ->  Nested Loop  (cost=0.00..2712064198.97 rows=1 width=16)
                           Join Filter: true
                           ->  Aggregate  (cost=0.00..1324036.68 rows=1 width=8)
                                 ->  Limit  (cost=0.00..1324036.68 rows=28 width=20)
                                       ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324036.67 rows=82 width=20)
                                             Merge Key: share0_ref3.a
                                             ->  Nested Loop  (cost=0.00..1324036.67 rows=28 width=20)
                                                   Join Filter: true
                                                   ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.00 rows=28 width=12)
                                                   ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Broadcast Motion 1:3  (slice4)  (cost=0.00..431.00 rows=3 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=28 width=8)
                           ->  Aggregate  (cost=0.00..1324032.52 rows=1 width=8)
                                 ->  Limit  (cost=0.00..1324032.52 rows=1 width=24)
                                       ->  Sort  (cost=0.00..1324032.52 rows=1 width=24)
                                             Sort Key: share1_ref2.c
                                             ->  Nested Loop  (cost=0.00..1324032.52 rows=1 width=24)
                                                   Join Filter: true
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 2:1)  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Materialize  (cost=0.00..431.00 rows=1 width=16)
                                                         ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=16)
                                                               ->  Shared Scan (share slice:id 1:1)  (cost=0.00..431.00 rows=1 width=16)
 Optimizer: Pivotal Optimizer (GPORCA)
(56 rows)

select median(a), median(c) from perct4;
 median | median 
--------+--------
   50.5 |       
(1 row)

explain select median(a), median(c) from perct4 group by b;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.02 rows=11 width=16)
   ->  Result  (cost=0.00..431.02 rows=4 width=16)
         ->  GroupAggregate  (cost=0.00..431.02 rows=4 width=16)
               Group Key: b
               ->  Sort  (cost=0.00..431.02 rows=34 width=16)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=16)
                           Hash Key: b
                           ->  Seq Scan on perct4  (cost=0.00..431.00 rows=34 width=16)
 Optimizer: Pivotal Optimizer (GPORCA)
(10 rows)

select median(a), median(c) from perct4 group by b;
 median | median 
--------+--------
      5 |       
     14 |       
     24 |       
     34 |       
     44 |       
     54 |       
     64 |       
     74 |       
     84 |       
     94 |       
    100 |       
(11 rows)

explain select count(*) over (partition by b), median(a) from perct group by b order by b;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=16)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=16)
         Merge Key: b
         ->  WindowAgg  (cost=0.00..431.01 rows=4 width=20)
               Partition By: b
               ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=12)
                     Group Key: b
                     ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                           Sort Key: b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: b
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(13 rows)

select count(*) over (partition by b), median(a) from perct group by b order by b;
 count | median 
-------+--------
     1 |      5
     1 |   14.5
     1 |   24.5
     1 |   34.5
     1 |   44.5
     1 |   54.5
     1 |   64.5
     1 |   74.5
     1 |   84.5
     1 |   94.5
     1 |    100
(11 rows)

explain select sum(median(a)) over (partition by b) from perct group by b order by b;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=8)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=8)
         Merge Key: b
         ->  WindowAgg  (cost=0.00..431.01 rows=4 width=12)
               Partition By: b
               ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=12)
                     Group Key: b
                     ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                           Sort Key: b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: b
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(13 rows)

select sum(median(a)) over (partition by b) from perct group by b order by b;
 sum  
------
    5
 14.5
 24.5
 34.5
 44.5
 54.5
 64.5
 74.5
 84.5
 94.5
  100
(11 rows)

explain select percentile_disc(0) within group (order by a) from perct;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=4)
   ->  Sequence  (cost=0.00..1324468.58 rows=1 width=4)
         ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct.a
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=4)
               ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=4)
                     ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                       Join Filter: true
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select percentile_disc(0) within group (order by a) from perct;
 percentile_disc 
-----------------
               1
(1 row)

prepare p (float) as select percentile_cont($1) within group (order by a)
  from perct group by b order by b;
execute p(0.1);
 percentile_cont 
-----------------
             1.8
            10.9
            20.9
            30.9
            40.9
            50.9
            60.9
            70.9
            80.9
            90.9
             100
(11 rows)

execute p(0.8);
 percentile_cont 
-----------------
             100
             7.4
            17.2
            27.2
            37.2
            47.2
            57.2
            67.2
            77.2
            87.2
            97.2
(11 rows)

deallocate p;
explain select sum((select median(a) from perct)) from perct;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1357138415.08 rows=1 width=8)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1357138415.08 rows=1 width=8)
         ->  Aggregate  (cost=0.00..1357138415.08 rows=1 width=8)
               ->  Nested Loop Left Join  (cost=0.00..1357138415.08 rows=67 width=8)
                     Join Filter: true
                     ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=1)
                     ->  Materialize  (cost=0.00..1324468.48 rows=1 width=8)
                           ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..1324468.48 rows=1 width=8)
                                 ->  Sequence  (cost=0.00..1324468.48 rows=1 width=8)
                                       ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
                                             ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                                                   ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                                         Group Key: perct.a
                                                         ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                                               Sort Key: perct.a
                                                               ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
                                       ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.47 rows=1 width=8)
                                             ->  Aggregate  (cost=0.00..1324037.47 rows=1 width=8)
                                                   ->  Result  (cost=0.00..1324037.47 rows=34 width=20)
                                                         ->  Limit  (cost=0.00..1324037.46 rows=34 width=20)
                                                               ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.46 rows=100 width=20)
                                                                     Merge Key: share0_ref3.a
                                                                     ->  Nested Loop  (cost=0.00..1324037.45 rows=34 width=20)
                                                                           Join Filter: true
                                                                           ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                                                           ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                                   ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                                         ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(32 rows)

select sum((select median(a) from perct)) from perct;
 sum  
------
 5050
(1 row)

explain select percentile_cont(null) within group (order by a) from perct;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
         ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct.a
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                       Join Filter: true
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select percentile_cont(null) within group (order by a) from perct;
 percentile_cont 
-----------------
                
(1 row)

explain select percentile_cont(null) within group (order by a),
       percentile_disc(null) within group (order by a desc) from perct group by b;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=12)
   ->  Result  (cost=0.00..431.01 rows=4 width=12)
         ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=12)
               Group Key: b
               ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(10 rows)

select percentile_cont(null) within group (order by a),
       percentile_disc(null) within group (order by a desc) from perct group by b;
 percentile_cont | percentile_disc 
-----------------+-----------------
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
                 |                
(11 rows)

explain select median(a), percentile_cont(0.5) within group (order by a),
       percentile_disc(0.5) within group(order by a),
       (select min(a) from percts) - interval '1day' + interval '1day' * median(c),
       (select min(a) from percts) - interval '1day' + interval '1day' *
         percentile_disc(0.5) within group (order by c)
from percts group by b order by b;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1356715266.56 rows=4 width=40)
   ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1356715266.56 rows=11 width=40)
         Merge Key: percts_2.b
         ->  Result  (cost=0.00..1356715266.55 rows=4 width=44)
               ->  Nested Loop Left Join  (cost=0.00..1356715266.55 rows=15 width=56)
                     Join Filter: true
                     ->  Nested Loop Left Join  (cost=0.00..1324055.25 rows=8 width=48)
                           Join Filter: true
                           ->  GroupAggregate  (cost=0.00..431.02 rows=4 width=40)
                                 Group Key: percts_2.b
                                 ->  Sort  (cost=0.00..431.02 rows=34 width=16)
                                       Sort Key: percts_2.b
                                       ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.00 rows=34 width=16)
                                             Hash Key: percts_2.b
                                             ->  Seq Scan on percts percts_2  (cost=0.00..431.00 rows=34 width=16)
                           ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Broadcast Motion 1:3  (slice4)  (cost=0.00..431.00 rows=3 width=8)
                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Seq Scan on percts percts_1  (cost=0.00..431.00 rows=34 width=8)
                     ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                           ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                       ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Seq Scan on percts  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(28 rows)

select median(a), percentile_cont(0.5) within group (order by a),
       percentile_disc(0.5) within group(order by a),
       (select min(a) from percts) - interval '1day' + interval '1day' * median(c),
       (select min(a) from percts) - interval '1day' + interval '1day' *
         percentile_disc(0.5) within group (order by c)
from percts group by b order by b;
          median          |     percentile_cont      |     percentile_disc      |         ?column?         |         ?column?         
--------------------------+--------------------------+--------------------------+--------------------------+--------------------------
 Fri Jan 06 00:00:00 2012 | Fri Jan 06 00:00:00 2012 | Fri Jan 06 00:00:00 2012 | Fri Jan 06 00:00:00 2012 | Fri Jan 06 00:00:00 2012
 Sun Jan 15 12:00:00 2012 | Sun Jan 15 12:00:00 2012 | Sun Jan 15 00:00:00 2012 | Sun Jan 15 12:00:00 2012 | Sun Jan 15 00:00:00 2012
 Wed Jan 25 12:00:00 2012 | Wed Jan 25 12:00:00 2012 | Wed Jan 25 00:00:00 2012 | Wed Jan 25 12:00:00 2012 | Wed Jan 25 00:00:00 2012
 Sat Feb 04 12:00:00 2012 | Sat Feb 04 12:00:00 2012 | Sat Feb 04 00:00:00 2012 | Sat Feb 04 12:00:00 2012 | Sat Feb 04 00:00:00 2012
 Tue Feb 14 12:00:00 2012 | Tue Feb 14 12:00:00 2012 | Tue Feb 14 00:00:00 2012 | Tue Feb 14 12:00:00 2012 | Tue Feb 14 00:00:00 2012
 Fri Feb 24 12:00:00 2012 | Fri Feb 24 12:00:00 2012 | Fri Feb 24 00:00:00 2012 | Fri Feb 24 12:00:00 2012 | Fri Feb 24 00:00:00 2012
 Mon Mar 05 12:00:00 2012 | Mon Mar 05 12:00:00 2012 | Mon Mar 05 00:00:00 2012 | Mon Mar 05 12:00:00 2012 | Mon Mar 05 00:00:00 2012
 Thu Mar 15 12:00:00 2012 | Thu Mar 15 12:00:00 2012 | Thu Mar 15 00:00:00 2012 | Thu Mar 15 12:00:00 2012 | Thu Mar 15 00:00:00 2012
 Sun Mar 25 12:00:00 2012 | Sun Mar 25 12:00:00 2012 | Sun Mar 25 00:00:00 2012 | Sun Mar 25 12:00:00 2012 | Sun Mar 25 00:00:00 2012
 Wed Apr 04 12:00:00 2012 | Wed Apr 04 12:00:00 2012 | Wed Apr 04 00:00:00 2012 | Wed Apr 04 12:00:00 2012 | Wed Apr 04 00:00:00 2012
 Tue Apr 10 00:00:00 2012 | Tue Apr 10 00:00:00 2012 | Tue Apr 10 00:00:00 2012 | Tue Apr 10 00:00:00 2012 | Tue Apr 10 00:00:00 2012
(11 rows)

explain select percentile_cont(1.0/86400) within group (order by a) from percts
	where c between 1 and 2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sequence  (cost=0.00..1324463.47 rows=1 width=8)
   ->  Shared Scan (share slice:id 0:0)  (cost=0.00..431.00 rows=1 width=1)
         ->  Materialize  (cost=0.00..431.00 rows=1 width=1)
               ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=3 width=16)
                     ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=16)
                           Group Key: percts.a
                           ->  Sort  (cost=0.00..431.00 rows=1 width=8)
                                 Sort Key: percts.a
                                 ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                       Hash Key: percts.a
                                       ->  Seq Scan on percts  (cost=0.00..431.00 rows=1 width=8)
                                             Filter: ((c >= 1) AND (c <= 2))
   ->  Aggregate  (cost=0.00..1324032.47 rows=1 width=8)
         ->  Limit  (cost=0.00..1324032.47 rows=1 width=24)
               ->  Sort  (cost=0.00..1324032.47 rows=1 width=24)
                     Sort Key: share0_ref3.a
                     ->  Nested Loop  (cost=0.00..1324032.47 rows=1 width=24)
                           Join Filter: true
                           ->  Shared Scan (share slice:id 0:0)  (cost=0.00..431.00 rows=1 width=16)
                           ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Shared Scan (share slice:id 0:0)  (cost=0.00..431.00 rows=1 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(24 rows)

select percentile_cont(1.0/86400) within group (order by a) from percts
	where c between 1 and 2;
     percentile_cont      
--------------------------
 Mon Jan 02 00:00:01 2012
(1 row)

explain select percentile_cont(0.1) within group (order by a),
       percentile_cont(0.9) within group (order by a desc) from percts;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice10; segments: 3)  (cost=0.00..2712073029.49 rows=1 width=16)
   ->  Sequence  (cost=0.00..2712073029.49 rows=1 width=16)
         ->  Shared Scan (share slice:id 10:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  HashAggregate  (cost=0.00..431.01 rows=34 width=16)
                           Group Key: percts_1.a
                           ->  Redistribute Motion 3:3  (slice9; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: percts_1.a
                                 ->  Seq Scan on percts percts_1  (cost=0.00..431.00 rows=34 width=8)
         ->  Sequence  (cost=0.00..2712072598.48 rows=1 width=16)
               ->  Shared Scan (share slice:id 10:1)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  HashAggregate  (cost=0.00..431.01 rows=34 width=16)
                                 Group Key: percts.a
                                 ->  Redistribute Motion 3:3  (slice8; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                       Hash Key: percts.a
                                       ->  Seq Scan on percts  (cost=0.00..431.00 rows=34 width=8)
               ->  Redistribute Motion 1:3  (slice7)  (cost=0.00..2712072167.47 rows=1 width=16)
                     ->  Nested Loop  (cost=0.00..2712072167.47 rows=1 width=16)
                           Join Filter: true
                           ->  Aggregate  (cost=0.00..1324038.49 rows=1 width=8)
                                 ->  Limit  (cost=0.00..1324038.49 rows=34 width=24)
                                       ->  Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1324038.48 rows=100 width=24)
                                             Merge Key: share0_ref3.a
                                             ->  Sort  (cost=0.00..1324038.48 rows=34 width=24)
                                                   Sort Key: share0_ref3.a
                                                   ->  Nested Loop  (cost=0.00..1324038.45 rows=34 width=24)
                                                         Join Filter: true
                                                         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.00 rows=34 width=16)
                                                         ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Broadcast Motion 1:3  (slice5)  (cost=0.00..431.00 rows=3 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 4:0)  (cost=0.00..431.00 rows=34 width=8)
                           ->  Materialize  (cost=0.00..1324038.49 rows=1 width=8)
                                 ->  Aggregate  (cost=0.00..1324038.49 rows=1 width=8)
                                       ->  Limit  (cost=0.00..1324038.49 rows=34 width=24)
                                             ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324038.48 rows=100 width=24)
                                                   Merge Key: share1_ref3.a
                                                   ->  Sort  (cost=0.00..1324038.48 rows=34 width=24)
                                                         Sort Key: share1_ref3.a
                                                         ->  Nested Loop  (cost=0.00..1324038.45 rows=34 width=24)
                                                               Join Filter: true
                                                               ->  Shared Scan (share slice:id 3:1)  (cost=0.00..431.00 rows=34 width=16)
                                                               ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                                           ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                                   ->  Shared Scan (share slice:id 1:1)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(54 rows)

select percentile_cont(0.1) within group (order by a),
       percentile_cont(0.9) within group (order by a desc) from percts;
     percentile_cont      |     percentile_cont      
--------------------------+--------------------------
 Wed Jan 11 21:36:00 2012 | Wed Jan 11 21:36:00 2012
(1 row)

explain select percentile_cont(0.1) within group (order by a),
       percentile_cont(0.2) within group (order by a) from perctsz;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1324469.50 rows=1 width=16)
   ->  Sequence  (cost=0.00..1324469.50 rows=1 width=16)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  HashAggregate  (cost=0.00..431.01 rows=34 width=16)
                           Group Key: perctsz.a
                           ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                 Hash Key: perctsz.a
                                 ->  Seq Scan on perctsz  (cost=0.00..431.00 rows=34 width=8)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324038.49 rows=1 width=16)
               ->  Aggregate  (cost=0.00..1324038.49 rows=1 width=16)
                     ->  Limit  (cost=0.00..1324038.49 rows=34 width=24)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324038.48 rows=100 width=24)
                                 Merge Key: share0_ref3.a
                                 ->  Sort  (cost=0.00..1324038.48 rows=34 width=24)
                                       Sort Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324038.45 rows=34 width=24)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=16)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(27 rows)

select percentile_cont(0.1) within group (order by a),
       percentile_cont(0.2) within group (order by a) from perctsz;
       percentile_cont        |       percentile_cont        
------------------------------+------------------------------
 Wed Jan 11 13:36:00 2012 PST | Sat Jan 21 11:12:00 2012 PST
(1 row)

explain select median(a - (select min(a) from percts)) from percts;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1324040.42 rows=1 width=16)
   ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324040.42 rows=200 width=16)
         ->  Nested Loop Left Join  (cost=0.00..1324040.41 rows=67 width=16)
               Join Filter: true
               ->  Seq Scan on percts percts_1  (cost=0.00..431.00 rows=34 width=8)
               ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                     ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Seq Scan on percts  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(12 rows)

select median(a - (select min(a) from percts)) from percts;
       median       
--------------------
 @ 49 days 12 hours
(1 row)

explain select median(a), b from perct group by b order by b desc;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=12)
   Merge Key: b
   ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=12)
         Group Key: b
         ->  Sort  (cost=0.00..431.01 rows=34 width=8)
               Sort Key: b
               ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                     Hash Key: b
                     ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(10 rows)

select median(a), b from perct group by b order by b desc;
 median | b  
--------+----
    100 | 10
   94.5 |  9
   84.5 |  8
   74.5 |  7
   64.5 |  6
   54.5 |  5
   44.5 |  4
   34.5 |  3
   24.5 |  2
   14.5 |  1
      5 |  0
(11 rows)

explain select count(*) from(select median(a) from perct group by ())s;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1324468.58 rows=1 width=8)
   ->  Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=1)
         ->  Sequence  (cost=0.00..1324468.58 rows=1 width=1)
               ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                 Group Key: perct.a
                                 ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                       Sort Key: perct.a
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
               ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=1)
                     ->  Result  (cost=0.00..1324037.57 rows=1 width=1)
                           ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=1)
                                 ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                       ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                             Merge Key: share0_ref3.a
                                             ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                                   Join Filter: true
                                                   ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                                   ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(27 rows)

select count(*) from(select median(a) from perct group by ())s;
 count 
-------
     1
(1 row)

explain select median(a) from perct group by grouping sets((b)) order by b;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.01 rows=4 width=8)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.01 rows=11 width=8)
         Merge Key: b
         ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=12)
               Group Key: b
               ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                     Sort Key: b
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                           Hash Key: b
                           ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

select median(a) from perct group by grouping sets((b)) order by b;
 median 
--------
      5
   14.5
   24.5
   34.5
   44.5
   54.5
   64.5
   74.5
   84.5
   94.5
    100
(11 rows)

explain select distinct median(a), count(*) from perct;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1356697594.60 rows=1 width=16)
   ->  Sequence  (cost=0.00..1356697594.60 rows=1 width=16)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct_1.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct_1.a
                                 ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice5)  (cost=0.00..1356697163.60 rows=1 width=16)
               ->  Nested Loop  (cost=0.00..1356697163.60 rows=1 width=16)
                     Join Filter: true
                     ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                           ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                 ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                       Merge Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 4:0)  (cost=0.00..431.00 rows=34 width=12)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice3)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 2:0)  (cost=0.00..431.00 rows=34 width=8)
                     ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                 ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=1)
 Optimizer: Pivotal Optimizer (GPORCA)
(32 rows)

select distinct median(a), count(*) from perct;
 median | count 
--------+-------
   50.5 |   100
(1 row)

explain select perct.a, 0.2*avg(perct2.a) as avga,
	percentile_cont(0.34)within group(order by perct2.b)
	from
		(select a, a / 10 b from generate_series(1, 100)a)perct,
		(select a, a / 10 b from generate_series(1, 100)a)perct2
	where perct.a=perct2.a group by perct.a having median(perct.b) > 10;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1.52 rows=134 width=20)
   ->  Result  (cost=0.00..1.51 rows=134 width=20)
         Filter: ((MEDIAN(((generate_series.generate_series / 10)))) > 10::double precision)
         ->  GroupAggregate  (cost=0.00..1.48 rows=334 width=28)
               Group Key: generate_series.generate_series
               ->  Sort  (cost=0.00..1.44 rows=334 width=16)
                     Sort Key: generate_series.generate_series
                     ->  Hash Join  (cost=0.00..0.54 rows=334 width=16)
                           Hash Cond: (generate_series.generate_series = generate_series_1.generate_series)
                           ->  Result  (cost=0.00..0.01 rows=334 width=8)
                                 ->  Function Scan on generate_series  (cost=0.00..0.00 rows=334 width=4)
                           ->  Hash  (cost=0.01..0.01 rows=334 width=8)
                                 ->  Result  (cost=0.00..0.01 rows=334 width=8)
                                       ->  Function Scan on generate_series generate_series_1  (cost=0.00..0.00 rows=334 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(15 rows)

select perct.a, 0.2*avg(perct2.a) as avga,
	percentile_cont(0.34)within group(order by perct2.b)
	from
		(select a, a / 10 b from generate_series(1, 100)a)perct,
		(select a, a / 10 b from generate_series(1, 100)a)perct2
	where perct.a=perct2.a group by perct.a having median(perct.b) > 10;
 a | avga | percentile_cont 
---+------+-----------------
(0 rows)

explain select median(a - '2011-12-31 00:00:00 UTC'::timestamptz) from perctsz group by b order by median;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.02 rows=11 width=16)
   Merge Key: (MEDIAN((a - 'Fri Dec 30 16:00:00 2011 PST'::timestamp with time zone)))
   ->  Result  (cost=0.00..431.02 rows=4 width=16)
         ->  Sort  (cost=0.00..431.02 rows=4 width=16)
               Sort Key: (MEDIAN((a - 'Fri Dec 30 16:00:00 2011 PST'::timestamp with time zone)))
               ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=16)
                     Group Key: b
                     ->  Sort  (cost=0.00..431.01 rows=34 width=12)
                           Sort Key: b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=12)
                                 Hash Key: b
                                 ->  Seq Scan on perctsz  (cost=0.00..431.00 rows=34 width=12)
 Optimizer: Pivotal Optimizer (GPORCA)
(13 rows)

select median(a - '2011-12-31 00:00:00 UTC'::timestamptz) from perctsz group by b order by median;
       median        
---------------------
 @ 6 days
 @ 15 days 12 hours
 @ 25 days 12 hours
 @ 35 days 12 hours
 @ 45 days 12 hours
 @ 55 days 12 hours
 @ 65 days 12 hours
 @ 74 days 35 hours
 @ 84 days 35 hours
 @ 94 days 35 hours
 @ 100 days 23 hours
(11 rows)

--numeric types
explain select percentile_cont(0.95) within group( order by c) from perctnum;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1324469.27 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324469.27 rows=1 width=8)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  HashAggregate  (cost=0.00..431.01 rows=34 width=15)
                           Group Key: perctnum.c
                           ->  Redistribute Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.00 rows=34 width=7)
                                 Hash Key: perctnum.c
                                 ->  Seq Scan on perctnum  (cost=0.00..431.00 rows=34 width=7)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324038.26 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324038.26 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324038.26 rows=34 width=23)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324038.26 rows=100 width=23)
                                 Merge Key: share0_ref3.c
                                 ->  Sort  (cost=0.00..1324038.25 rows=34 width=23)
                                       Sort Key: share0_ref3.c
                                       ->  Nested Loop  (cost=0.00..1324038.23 rows=34 width=23)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=15)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(27 rows)

select percentile_cont(0.95) within group( order by c) from perctnum;
 percentile_cont 
-----------------
      190.090495
(1 row)

-- view
select * from percv;
 percentile_cont | median | percentile_disc 
-----------------+--------+-----------------
               0 |      5 |               5
               1 |   14.5 |              14
               2 |   24.5 |              24
               3 |   34.5 |              34
               4 |   44.5 |              44
               5 |   54.5 |              54
               6 |   64.5 |              64
               7 |   74.5 |              74
               8 |   84.5 |              84
               9 |   94.5 |              94
              10 |    100 |             100
(11 rows)

select pg_get_viewdef('percv');
                                                         pg_get_viewdef                                                          
---------------------------------------------------------------------------------------------------------------------------------
  SELECT percentile_cont((0.4)::double precision) WITHIN GROUP (ORDER BY ((perct.a / 10))::double precision) AS percentile_cont,+
     MEDIAN(perct.a) AS "median",                                                                                               +
     percentile_disc((0.51)::double precision) WITHIN GROUP (ORDER BY perct.a DESC) AS percentile_disc                          +
    FROM perct                                                                                                                  +
   GROUP BY perct.b                                                                                                             +
   ORDER BY perct.b;
(1 row)

select pg_get_viewdef('percv2');
                pg_get_viewdef                 
-----------------------------------------------
  SELECT MEDIAN(perct.a) AS m1,               +
     MEDIAN((perct.a)::double precision) AS m2+
    FROM perct;
(1 row)

-- errors
-- no WITHIN GROUP clause
select percentile_cont(a) from perct;
ERROR:  function percentile_cont(integer) does not exist
LINE 1: select percentile_cont(a) from perct;
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- the argument must not contain variable
select percentile_cont(a) within group (order by a) from perct;
ERROR:  column "perct.a" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select percentile_cont(a) within group (order by a) from per...
                               ^
DETAIL:  Direct arguments of an ordered-set aggregate must use only grouped columns.
-- ungrouped column
select b, percentile_disc(0.1) within group (order by a) from perct;
ERROR:  column "perct.b" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select b, percentile_disc(0.1) within group (order by a) fro...
               ^
-- nested aggregate
select percentile_cont(count(*)) within group (order by a) from perct;
ERROR:  aggregate function calls cannot be nested
LINE 1: select percentile_cont(count(*)) within group (order by a) f...
                               ^
select sum(percentile_cont(0.22) within group (order by a)) from perct;
ERROR:  aggregate function calls cannot be nested
LINE 1: select sum(percentile_cont(0.22) within group (order by a)) ...
                   ^
-- OVER clause
select percentile_cont(0.3333) within group (order by a) over (partition by a%2) from perct;
ERROR:  OVER is not supported for ordered-set aggregate percentile_cont
LINE 1: select percentile_cont(0.3333) within group (order by a) ove...
               ^
select median(a) over (partition by b) from perct group by b;
ERROR:  syntax error at or near "over"
LINE 1: select median(a) over (partition by b) from perct group by b...
                         ^
-- function scan
select * from median(10);
ERROR:  aggregate functions are not allowed in functions in FROM
LINE 1: select * from median(10);
                      ^
-- wrong type argument
select percentile_disc('a') within group (order by a) from perct;
ERROR:  invalid input syntax for type double precision: "a"
LINE 1: select percentile_disc('a') within group (order by a) from p...
                               ^
-- nested case
select count(median(a)) from perct;
ERROR:  aggregate function calls cannot be nested
LINE 1: select count(median(a)) from perct;
                     ^
select median(count(*)) from perct;
ERROR:  aggregate function calls cannot be nested
LINE 1: select median(count(*)) from perct;
                      ^
select percentile_cont(0.2) within group (order by count(*) over()) from perct;
ERROR:  aggregate function calls cannot contain window function calls
LINE 1: ...elect percentile_cont(0.2) within group (order by count(*) o...
                                                             ^
select percentile_disc(0.1) within group (order by group_id()) from perct;
ERROR:  aggregate function calls cannot be nested
-- subquery in argument
select percentile_cont((select 0.1 from gp_id)) within group (order by a) from perct;
 percentile_cont 
-----------------
            10.9
(1 row)

-- volatile argument
explain select percentile_cont(floor(random()*0.1)+0.5) within group (order by a) from perct;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
         ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct.a
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                       Join Filter: true
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select percentile_cont(floor(random()*0.1)+0.5) within group (order by a) from perct;
 percentile_cont 
-----------------
            50.5
(1 row)

-- out of range
explain select percentile_cont(-0.1) within group (order by a) from perct;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
         ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct.a
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                       Join Filter: true
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select percentile_cont(-0.1) within group (order by a) from perct;
ERROR:  percentile value -0.1 is not between 0 and 1
explain select percentile_cont(1.00000001) within group (order by a) from perct;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=8)
   ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
         ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                           Group Key: perct.a
                           ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                 Sort Key: perct.a
                                 ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
         ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
               ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                           ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                 Merge Key: share0_ref3.a
                                 ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                       Join Filter: true
                                       ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                       ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                             ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                         ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select percentile_cont(1.00000001) within group (order by a) from perct;
ERROR:  percentile value 1 is not between 0 and 1
-- correlated subquery
explain select sum((select median(a) from perct where b = t.b)) from perct t;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=476.14..476.15 rows=1 width=8)
   ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=471.41..471.46 rows=1 width=8)
         ->  Aggregate  (cost=471.41..471.42 rows=1 width=8)
               ->  Seq Scan on perct t  (cost=0.00..4.00 rows=34 width=4)
               SubPlan 1  (slice2; segments: 3)
                 ->  Aggregate  (cost=4.66..4.67 rows=1 width=8)
                       ->  Result  (cost=0.00..4.30 rows=4 width=4)
                             Filter: (perct.b = t.b)
                             ->  Materialize  (cost=0.00..4.30 rows=4 width=4)
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..4.25 rows=4 width=4)
                                         ->  Seq Scan on perct  (cost=0.00..4.25 rows=4 width=4)
 Optimizer: Postgres query optimizer
(12 rows)

select sum((select median(a) from perct where b = t.b)) from perct t;
 sum  
------
 5050
(1 row)

-- used in LIMIT
select * from perct limit median(a);
ERROR:  aggregate functions are not allowed in LIMIT
LINE 1: select * from perct limit median(a);
                                  ^
-- multiple sort key
select percentile_cont(0.8) within group (order by a, a + 1, a + 2) from perct;
ERROR:  function percentile_cont(numeric, integer, integer, integer) does not exist
LINE 1: select percentile_cont(0.8) within group (order by a, a + 1,...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- set-returning
explain select generate_series(1, 2), median(a) from perct;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice5; segments: 3)  (cost=0.00..1324468.58 rows=1 width=12)
   ->  Result  (cost=0.00..1324468.58 rows=1 width=12)
         ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
               ->  Shared Scan (share slice:id 5:0)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                 Group Key: perct.a
                                 ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                       Sort Key: perct.a
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
               ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                           ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                 ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                       Merge Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(26 rows)

select generate_series(1, 2), median(a) from perct;
 generate_series | median 
-----------------+--------
               1 |   50.5
               2 |   50.5
(2 rows)

-- GROUPING SETS
explain select median(a) from perct group by grouping sets((), (b));
                                                                              QUERY PLAN                                                                               
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1325330.59 rows=12 width=8)
   ->  Sequence  (cost=0.00..1325330.59 rows=4 width=8)
         ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.00 rows=34 width=1)
               ->  Materialize  (cost=0.00..431.00 rows=34 width=1)
                     ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=8)
         ->  Append  (cost=0.00..1324899.59 rows=4 width=8)
               ->  Result  (cost=0.00..431.01 rows=4 width=8)
                     ->  GroupAggregate  (cost=0.00..431.01 rows=4 width=8)
                           Group Key: share0_ref2.b
                           ->  Sort  (cost=0.00..431.01 rows=34 width=8)
                                 Sort Key: share0_ref2.b
                                 ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=34 width=8)
                                       Hash Key: share0_ref2.b
                                       ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
               ->  Result  (cost=0.00..1324468.58 rows=1 width=8)
                     ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
                           ->  Shared Scan (share slice:id 6:1)  (cost=0.00..431.00 rows=34 width=1)
                                 ->  Materialize  (cost=0.00..431.00 rows=34 width=1)
                                       ->  GroupAggregate  (cost=0.00..431.00 rows=34 width=12)
                                             Group Key: share0_ref3.a
                                             ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                                   Sort Key: share0_ref3.a
                                                   ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.00 rows=34 width=4)
                           ->  Redistribute Motion 1:3  (slice5)  (cost=0.00..1324037.57 rows=1 width=8)
                                 ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                                       ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                             ->  Gather Motion 3:1  (slice4; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                                   Merge Key: share1_ref3.a
                                                   ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                                         Join Filter: true
                                                         ->  Shared Scan (share slice:id 4:1)  (cost=0.00..431.00 rows=34 width=12)
                                                         ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                               ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Broadcast Motion 1:3  (slice3)  (cost=0.00..431.00 rows=3 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Gather Motion 3:1  (slice2; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                                       ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                             ->  Shared Scan (share slice:id 2:1)  (cost=0.00..431.00 rows=34 width=8)
 Optimizer: Pivotal Optimizer (GPORCA)
(39 rows)

select median(a) from perct group by grouping sets((), (b));
 median 
--------
      5
    100
   14.5
   24.5
   34.5
   44.5
   50.5
   54.5
   64.5
   74.5
   84.5
   94.5
(12 rows)

-- wrong type in ORDER BY
select median('text') from perct;
ERROR:  invalid input syntax for type double precision: "text"
LINE 1: select median('text') from perct;
                      ^
select percentile_cont(now()) within group (order by a) from percts;
ERROR:  function percentile_cont(timestamp with time zone, timestamp without time zone) does not exist
LINE 1: select percentile_cont(now()) within group (order by a) from...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
select percentile_cont(0.5) within group (order by point(0,0)) from perct;
ERROR:  function percentile_cont(numeric, point) does not exist
LINE 1: select percentile_cont(0.5) within group (order by point(0,0...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
-- outer references
explain select (select a from perct where median(t.a) = 5) from perct t;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1357138531.43 rows=1 width=4)
   ->  Result  (cost=0.00..1357138531.43 rows=1 width=4)
         ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
               ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                 Group Key: perct.a
                                 ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                       Sort Key: perct.a
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
               ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                           ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                 ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                       Merge Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
         SubPlan 1  (slice6; segments: 3)
           ->  Result  (cost=0.00..431.01 rows=40 width=4)
                 One-Time Filter: ((gp_percentile_cont((share0_ref3.a)::double precision, 0.5::double precision, (int8((pg_catalog.sum((sum(share0_ref2."ColRef_0020")))))), share0_ref3."ColRef_0020")) = 5::double precision)
                 ->  Materialize  (cost=0.00..431.01 rows=100 width=4)
                       ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.01 rows=100 width=4)
                             ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(32 rows)

select (select a from perct where median(t.a) = 5) from perct t;
 a 
---
  
(1 row)

explain select (select array_agg(a ORDER BY a) from perct where median(t.a) = 50.5) from (select * from perct t order by a offset 0) as t;
                                                                                                               QUERY PLAN                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice6; segments: 3)  (cost=0.00..1357138538.74 rows=1 width=8)
   ->  Result  (cost=0.00..1357138538.74 rows=1 width=8)
         ->  Sequence  (cost=0.00..1324468.58 rows=1 width=8)
               ->  Shared Scan (share slice:id 6:0)  (cost=0.00..431.01 rows=34 width=1)
                     ->  Materialize  (cost=0.00..431.01 rows=34 width=1)
                           ->  GroupAggregate  (cost=0.00..431.01 rows=34 width=12)
                                 Group Key: perct.a
                                 ->  Sort  (cost=0.00..431.00 rows=34 width=4)
                                       Sort Key: perct.a
                                       ->  Seq Scan on perct  (cost=0.00..431.00 rows=34 width=4)
               ->  Redistribute Motion 1:3  (slice4)  (cost=0.00..1324037.57 rows=1 width=8)
                     ->  Aggregate  (cost=0.00..1324037.57 rows=1 width=8)
                           ->  Limit  (cost=0.00..1324037.57 rows=34 width=20)
                                 ->  Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..1324037.57 rows=100 width=20)
                                       Merge Key: share0_ref3.a
                                       ->  Nested Loop  (cost=0.00..1324037.56 rows=34 width=20)
                                             Join Filter: true
                                             ->  Shared Scan (share slice:id 3:0)  (cost=0.00..431.00 rows=34 width=12)
                                             ->  Materialize  (cost=0.00..431.00 rows=1 width=8)
                                                   ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                         ->  Broadcast Motion 1:3  (slice2)  (cost=0.00..431.00 rows=3 width=8)
                                                               ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                     ->  Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=8)
                                                                           ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
                                                                                 ->  Shared Scan (share slice:id 1:0)  (cost=0.00..431.00 rows=34 width=8)
         SubPlan 1  (slice6; segments: 3)
           ->  Aggregate  (cost=0.00..431.01 rows=1 width=8)
                 ->  Result  (cost=0.00..431.01 rows=40 width=4)
                       One-Time Filter: ((gp_percentile_cont((share0_ref3.a)::double precision, 0.5::double precision, (int8((pg_catalog.sum((sum(share0_ref2."ColRef_0021")))))), share0_ref3."ColRef_0021")) = 50.5::double precision)
                       ->  Materialize  (cost=0.00..431.01 rows=100 width=4)
                             ->  Broadcast Motion 3:3  (slice5; segments: 3)  (cost=0.00..431.01 rows=100 width=4)
                                   ->  Seq Scan on perct perct_1  (cost=0.00..431.00 rows=34 width=4)
 Optimizer: Pivotal Optimizer (GPORCA)
(33 rows)

select (select array_agg(a ORDER BY a) from perct where median(t.a) = 50.5) from (select * from perct t order by a offset 0) as t;
                                                                                                                                               array_agg                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100}
(1 row)

-- MPP-22219
select count(*) from
(SELECT b.dkey_a, MEDIAN(B.VALUE)
FROM     mpp_22219 B
GROUP BY b.dkey_a) s;
 count 
-------
    20
(1 row)

select count(*) from
(SELECT b.dkey_a, percentile_cont(0.5) within  group (order by b.VALUE)
FROM     mpp_22219 B
GROUP BY b.dkey_a) s;
 count 
-------
    20
(1 row)

-- MPP-21026
select median(t2) from mpp_21026 group by t1;
 median 
--------
      1
      2
      3
      4
      5
      6
      7
      8
      9
     10
     11
     12
     13
     14
     15
     16
     17
     18
     19
     20
(20 rows)

-- MPP-20076
select 1, to_char(col1, 'YYYY'), median(col2) from mpp_20076 group by 1, 2;
 ?column? | to_char | median 
----------+---------+--------
        1 | 1969    |   10.5
(1 row)

select 1, col1, median(col2) from mpp_20076 group by 1, 2;
 ?column? |           col1           | median 
----------+--------------------------+--------
        1 | Wed Dec 31 16:00:01 1969 |      1
        1 | Wed Dec 31 16:00:02 1969 |      2
        1 | Wed Dec 31 16:00:03 1969 |      3
        1 | Wed Dec 31 16:00:04 1969 |      4
        1 | Wed Dec 31 16:00:05 1969 |      5
        1 | Wed Dec 31 16:00:06 1969 |      6
        1 | Wed Dec 31 16:00:07 1969 |      7
        1 | Wed Dec 31 16:00:08 1969 |      8
        1 | Wed Dec 31 16:00:09 1969 |      9
        1 | Wed Dec 31 16:00:10 1969 |     10
        1 | Wed Dec 31 16:00:11 1969 |     11
        1 | Wed Dec 31 16:00:12 1969 |     12
        1 | Wed Dec 31 16:00:13 1969 |     13
        1 | Wed Dec 31 16:00:14 1969 |     14
        1 | Wed Dec 31 16:00:15 1969 |     15
        1 | Wed Dec 31 16:00:16 1969 |     16
        1 | Wed Dec 31 16:00:17 1969 |     17
        1 | Wed Dec 31 16:00:18 1969 |     18
        1 | Wed Dec 31 16:00:19 1969 |     19
        1 | Wed Dec 31 16:00:20 1969 |     20
(20 rows)

select to_char(col1, 'YYYY') AS tstmp_column, median(col2) from mpp_20076 group by 1;
 tstmp_column | median 
--------------+--------
 1969         |   10.5
(1 row)

select 1, median(col2) from mpp_20076 group by 1;
 ?column? | median 
----------+--------
        1 |   10.5
(1 row)

-- MPP-22413
select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2, d3, value2;
 median | count 
--------+-------
     55 |     1
(1 row)

select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2, d3, value2::int;
 median | count 
--------+-------
     55 |     1
(1 row)

select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2, d3, value2::varchar;
 median | count 
--------+-------
     55 |     1
(1 row)

select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2, value2;
 median | count 
--------+-------
     55 |     1
(1 row)

select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2, value2, d3;
 median | count 
--------+-------
     55 |     1
(1 row)

select median(value1), count(*)
from  mpp_22413
where d2 ='55'
group by d1, d2;
 median | count 
--------+-------
     55 |     1
(1 row)

drop view percv2;
drop view percv;
drop table perct;
drop table perct2;
drop table perct3;
drop table perct4;
drop table percts;
drop table perctsz;
drop table mpp_22219;
drop table mpp_21026;
drop table mpp_20076;
drop table mpp_22413;
