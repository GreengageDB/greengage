## ######################################################################
##            ___   ___    _  _  ___ _____   ___ ___ ___ _____
##           |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _|
##           | |) | (_) | | .` | (_) || |   | _|| |) | |  | |
##           |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|
##            _____ _  _ ___ ___   ___ ___ _    ___ _
##           |_   _| || |_ _/ __| | __|_ _| |  | __| |
##             | | | __ || |\__ \ | _| | || |__| _||_|
##             |_| |_||_|___|___/ |_| |___|____|___(_)
##
## This is a generated file. Please edit the corresponding template
## file (example: templates/gpdb-tpl.yml) and regenerate the pipeline
## using appropriate tool (example: gen_pipeline.py -t prod).
## ----------------------------------------------------------------------
## Generated by gen_pipeline.py at: 2024-04-03 11:49:46.541881
## Template file: gpdb-tpl.yml
## OS Types: 
## Test Sections: ['icw', 'cli', 'release']
## ======================================================================

## ======================================================================
##                   _
##   __ _ _ __   ___| |__   ___  _ __ ___
##  / _` | '_ \ / __| '_ \ / _ \| '__/ __|
## | (_| | | | | (__| | | | (_) | |  \__ \
##  \__,_|_| |_|\___|_| |_|\___/|_|  |___/
## ======================================================================
## NOTE: only one anchors section is allowed per file, so we define this
##  at the top of the file so anchors are usable as early as possible.
anchors:
- &default_platform
  PLATFORM: rocky8-gpdb7

- &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/

- &ccp_default_vars
  instance_type: n1-standard-1
  <<: *default_platform

- &destroy_common
  action: destroy
  plugin_dir: ../../terraform.d/plugin-cache/linux_amd64
  terraform_source: ccp_src/google/
  vars:
    aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
    aws_ebs_volume_type: standard

- &ccp_destroy
  put: terraform
  params:
    <<: *destroy_common
    env_name_file: terraform/name
  get_params:
    action: destroy

- &ccp_destroy_two_clusters
  in_parallel:
    - put: terraform_1
      params:
        <<: *destroy_common
        env_name_file: terraform_1/name
      get_params:
        action: destroy
    - put: terraform_2
      params:
        <<: *destroy_common
        env_name_file: terraform_2/name
      get_params:
        action: destroy

- &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
  AWS_DEFAULT_REGION: ((aws-region))
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: ((tf-bucket-name))
  CLOUD_PROVIDER: google
  <<: *default_platform

- &set_failed
  do:
    - task: on_failure_set_failed
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: gcr.io/data-gpdb-public-images/ccp
            tag: latest
        inputs:
          - name: ccp_src
          - name: terraform
        run:
          path: 'ccp_src/google/ccp_failed_test.sh'
        params:
          GOOGLE_CREDENTIALS: ((google-service-account-key/prod))
          GOOGLE_PROJECT_ID: ((google-project-id))
          GOOGLE_ZONE: ((google-zone))
          GOOGLE_SERVICE_ACCOUNT: ((google-service-account/prod))
          AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
          AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
          AWS_DEFAULT_REGION: ((tf-machine-region))
          BUCKET_PATH: clusters-google/
          BUCKET_NAME: ((tf-bucket-name))

- &set_failed_two_clusters_common
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: gcr.io/data-gpdb-public-images/ccp
      tag: latest
  run:
    path: 'ccp_src/google/ccp_failed_test.sh'
  params:
    GOOGLE_CREDENTIALS: ((google-service-account-key/prod))
    GOOGLE_PROJECT_ID: ((google-project-id))
    GOOGLE_ZONE: ((google-zone))
    GOOGLE_SERVICE_ACCOUNT: ((google-service-account/prod))
    AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
    AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
    AWS_DEFAULT_REGION: ((tf-machine-region))
    BUCKET_PATH: clusters-google/
    BUCKET_NAME: ((tf-bucket-name))

- &terraform_cluster
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: ((tf-machine-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((tf-machine-secret-access-key))
      GOOGLE_CREDENTIALS: ((google-service-account-key/prod))
    vars:
      project_id: ((google-project-id))
    storage:
      access_key_id: ((tf-machine-access-key-id))
      secret_access_key: ((tf-machine-secret-access-key))
      region_name: ((aws-region))
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- &set_failed_two_clusters
  in_parallel:
    - task: on_failure_set_failed-1
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_1
    - task: on_failure_set_failed-2
      config:
        <<: *set_failed_two_clusters_common
        inputs:
          - name: ccp_src
          - name: terraform_2

## ======================================================================
##   __ _ _ __ ___  _   _ _ __  ___
##  / _` | '__/ _ \| | | | '_ \/ __|
## | (_| | | | (_) | |_| | |_) \__ \
##  \__, |_|  \___/ \__,_| .__/|___/
##  |___/                |_|
## ======================================================================

groups:
- name: all
  jobs:
  - gate_compile_start
  - check_format
  - compile_gpdb_clients_windows
  - publish_server_builds
  - compile_gpdb_rocky8
  - prepare_binary_swap_gpdb_rocky8
  - compile_gpdb_with_llvm_asserts_rocky8
  - test_gpdb_clients_rocky8
  - gate_compile_end
  ## --------------------------------------------------------------------
  - gate_icw_start
  - icw_gporca_rocky8
  - icw_gporca_jit_rocky8
  - icw_gporca_memory_rocky8
  - icw_planner_rocky8
  - icw_planner_jit_rocky8
  - icw_gporca_icproxy_rocky8
  - icw_planner_icproxy_rocky8
  - icw_gporca_ictcp_rocky8
  - icw_mirrorless_rocky8
  - icw_extensions_gpcloud_rocky8
  - unit_tests_gporca_rocky8
  - gpdb_pitr_rocky8
  - gpexpand_rocky8
  - pg_upgrade_rocky8
  - interconnect_rocky8
  - pg_filedump_rocky8
  - hot_standby_rocky8
  - icw_planner_resgroup_rocky8
  - icw_gporca_resgroup_rocky8
  - gate_icw_end
  - gate_cli_start
  - cli_cross_subnet
  - gpmovemirrors_rocky8
  - analyzedb_rocky8
  - gpreload_rocky8
  - gpinitsystem_rocky8
  - gpstate_rocky8
  - replication_slots_rocky8
  - gpactivatestandby_rocky8
  - gpinitstandby_rocky8
  - gp_bash_functions.sh_rocky8
  - gpcheckcat_rocky8
  - gpcheckperf_rocky8
  - gprecoverseg_rocky8
  - gprecoverseg_newhost_rocky8
  - gpaddmirrors_rocky8
  - gpconfig_rocky8
  - gpssh-exkeys_rocky8
  - gpstart_rocky8
  - gpstop_rocky8
  - unit_tests_gpmgmt_rocky8
  - combine_cli_coverage
  - resource_group_rocky8
  - resource_group_v2_rocky8
  - gate_cli_end


## ======================================================================

- name: release
  jobs:
  - gate_icw_end
  - gate_cli_end
  - gate_release_candidate_start
  - release_candidate
  - build_release_candidate_rpms

## ======================================================================

- name: compile
  jobs:
  - gate_compile_start
  - compile_gpdb_rocky8
  - prepare_binary_swap_gpdb_rocky8
  - compile_gpdb_with_llvm_asserts_rocky8
  - test_gpdb_clients_rocky8
  - compile_gpdb_clients_windows
  - check_format
  - publish_server_builds
  - gate_compile_end

- name: icw
  jobs:
  - gate_compile_end
  - gate_icw_start
  - icw_gporca_rocky8
  - icw_gporca_jit_rocky8
  - icw_gporca_memory_rocky8
  - icw_planner_rocky8
  - icw_planner_jit_rocky8
  - icw_gporca_icproxy_rocky8
  - icw_planner_icproxy_rocky8
  - icw_gporca_ictcp_rocky8
  - icw_mirrorless_rocky8
  - icw_extensions_gpcloud_rocky8
  - unit_tests_gporca_rocky8
  - gpdb_pitr_rocky8
  - gpexpand_rocky8
  - pg_upgrade_rocky8
  - interconnect_rocky8
  - pg_filedump_rocky8
  - hot_standby_rocky8
  - icw_planner_resgroup_rocky8
  - icw_gporca_resgroup_rocky8
  - gate_icw_end

- name: cli
  jobs:
  - gate_compile_end
  - gate_cli_start
  - cli_cross_subnet
  - gpmovemirrors_rocky8
  - analyzedb_rocky8
  - gpreload_rocky8
  - gpinitsystem_rocky8
  - gpstate_rocky8
  - replication_slots_rocky8
  - gpactivatestandby_rocky8
  - gpinitstandby_rocky8
  - gp_bash_functions.sh_rocky8
  - gpcheckcat_rocky8
  - gpcheckperf_rocky8
  - gprecoverseg_rocky8
  - gprecoverseg_newhost_rocky8
  - gpaddmirrors_rocky8
  - gpconfig_rocky8
  - gpssh-exkeys_rocky8
  - gpstart_rocky8
  - gpstop_rocky8
  - unit_tests_gpmgmt_rocky8
  - combine_cli_coverage
  - resource_group_rocky8
  - resource_group_v2_rocky8
  - gate_cli_end

## ======================================================================
##                                           _
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  | |_ _   _ _ __   ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \ | __| | | | '_ \ / _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/ | |_| |_| | |_) |  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___|  \__|\__, | .__/ \___||___/
##                                               |___/|_|
## ======================================================================

resource_types:
- name: terraform
  type: registry-image
  source:
    repository: ljfranklin/terraform-resource
    tag: 0.11.14
- name: tanzunet
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/tanzunet-concourse-resource
    tag: latest
- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource
## ======================================================================
##  _ __ ___  ___  ___  _   _ _ __ ___ ___  ___
## | '__/ _ \/ __|/ _ \| | | | '__/ __/ _ \/ __|
## | | |  __/\__ \ (_) | |_| | | | (_|  __/\__ \
## |_|  \___||___/\___/ \__,_|_|  \___\___||___/
## ======================================================================

resources:
- name: ccp_src
  type: git
  source:
    branch: ((gp-concourse-cluster-provisioner-git-branch))
    private_key: ((gp-concourse-cluster-provisioner-git-key))
    uri: ((gp-concourse-cluster-provisioner-git-remote))

- name: terraform
  <<: *terraform_cluster

- name: terraform.d
  source:
    access_key_id: ((aws-bucket-access-key-id))
    bucket: ccp-terraform-provider-plugins
    region_name: ((aws-region))
    secret_access_key: ((aws-bucket-secret-access-key))
    versioned_file: plugin-cache.tgz
  type: s3

- name: ccp-image
  type: registry-image
  source:
    repository: gcr.io/data-gpdb-public-images/ccp
    tag: latest

- name: icw_planner_rocky8_dump
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/icw_planner_rocky8_dump/dump.sql.xz

- name: alpine-docker
  type: registry-image
  source:
    repository: alpine
    tag: latest

- name: terraform_1
  <<: *terraform_cluster

- name: terraform_2
  <<: *terraform_cluster

- name: gpdb_src
  type: git
  source:
    branch: ((gpdb-git-branch))
    uri: ((gpdb-git-remote))
    ignore_paths:
    - README*

- name: filedump_src
  type: git
  source:
    branch: main
    uri: https://github.com/GreengageDB/filedump.git

- name: gpdb7-rocky8-build
  type: registry-image
  source:
    tag: latest
    repository: gcr.io/data-gpdb-public-images/gpdb7-rocky8-build

## FIXME: we use a temporary gpdb binary from a dev pipeline, in order to workaround 
## the binswap before we can use the 7.2.0 product release version. Revert this change, 
## when 7.2.0 is released and point pivotal-gpdb-pivnet-product-version to 7.2.0.
#- name: previous_gpdb
#  type: tanzunet
#  source:
#    api_token: ((pivotal-gpdb-pivnet-api-token))
#    product_slug: pivotal-gpdb
#    version: ((pivotal-gpdb-pivnet-product-version))
- name: previous_gpdb
  type: gcs
  source:
# FIXME: hard coded until we do the 7.2.0 tagging. Revert to ((gcs-bucket-intermediates))
# once 7.2.0 is tagged.
    bucket: pivotal-gpdb-concourse-resources-intermediates-dev
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: addcol-binswap-rc-only/bin_gpdb/bin_gpdb.tar.gz


- name: gpdb7-rocky8-test
  type: registry-image
  source:
    tag: latest
    repository: gcr.io/data-gpdb-public-images/gpdb7-rocky8-test

- name: bin_gpdb_icw_green
  type: s3
  source:
    access_key_id: ((aws-bucket-access-key-id))
    bucket: ((aws-bucket))
    region_name: ((aws-region))
    secret_access_key: ((aws-bucket-secret-access-key))
    versioned_file: bin_gpdb/gpdb_branch_master/icw_green/bin_gpdb.tar.gz

- name: bin_gpdb_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/server-rc-(.*)-el8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: clients/published/main/clients-rc-(.*)-el8_x86_64((rc-build-type-gcs)).tar.gz

- name: server_src_rc
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server-src/published/main/server-src-rc-*.tar.gz

- name: gpdb_rpm_installer_rocky8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/greengage-db-(.*)-el8-x86_64((rc-build-type-gcs)).rpm

- name: greengage-database-release
  type: git
  icon: git
  source:
    branch: main
    uri: https://github.com/GreengageDB/greengage.git

- name: license_file
  type: gcs
  icon: google
  source:
    bucket: ((gcs-bucket-for-oss))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: osl/released/gpdb6/open_source_license_greengage-database-6.0.0-97773a0-(.*).txt

- name: bin_gpdb
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb/bin_gpdb.tar.gz

- name: bin_gpdb_clients
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients/bin_gpdb_clients.tar.gz

- name: bin_gpdb_with_llvm_asserts
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb/bin_gpdb_with_llvm_asserts.tar.gz

- name: llvm-with-asserts-packages
  type: gcs
  source:
    bucket: pivotal-gpdb-concourse-resources-prod
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: gp-internal-artifacts/rocky8/llvm-with-asserts-(.*)-el8_x86_64.tar.gz

- name: binary_swap_gpdb_rocky8
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/binary_swap_gpdb_rocky8/bin_gpdb.tar.gz

- name: server-build-rocky8
  type: gcs
  source:
    bucket: ((gcs-bucket))
    json_key: ((concourse-gcs-resources-service-account-key))
    regexp: server/published/main/server-build-(.*)-el8_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_clients_windows
  type: gcs
  source:
    bucket: ((gcs-bucket-intermediates))
    json_key: ((concourse-gcs-resources-service-account-key))
    versioned_file: ((pipeline-name))/bin_gpdb_clients_windows/greengage-clients-x86_64.tar.gz


## ======================================================================
##    _       _
##   (_) ___ | |__  ___
##   | |/ _ \| '_ \/ __|
##   | | (_) | |_) \__ \
##  _/ |\___/|_.__/|___/
## |__/
## ======================================================================

jobs:

## ======================================================================
##  ____  _            _ _              _   _       _ _     _____         _
## |  _ \(_)_ __   ___| (_)_ __   ___  | | | |_ __ (_) |_  |_   _|__  ___| |_ ___
## | |_) | | '_ \ / _ \ | | '_ \ / _ \ | | | | '_ \| | __|   | |/ _ \/ __| __/ __|
## |  __/| | |_) |  __/ | | | | |  __/ | |_| | | | | | |_    | |  __/\__ \ |_\__ \
## |_|   |_| .__/ \___|_|_|_| |_|\___|  \___/|_| |_|_|\__|   |_|\___||___/\__|___/
##         |_|
## ======================================================================

## ======================================================================
##   ____                      _ _
##  / ___|___  _ __ ___  _ __ (_) | ___
## | |   / _ \| '_ ` _ \| '_ \| | |/ _ \
## | |__| (_) | | | | | | |_) | | |  __/
##  \____\___/|_| |_| |_| .__/|_|_|\___|
##                      |_|
## ======================================================================

- name: gate_compile_start
  plan:
  - get: gpdb_src
    trigger: true
    params:
      skip_download: 'true'

- name: check_format
  plan:
    - get: gpdb_src
      trigger: true
      passed: [gate_compile_start]
    - task: check_format
      file: gpdb_src/concourse/tasks/check_format.yml
    - task: clang_tidy
      file: gpdb_src/concourse/tasks/clang_tidy.yml
      tags: [icw-worker]

- name: compile_gpdb_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
          - check_format
        trigger: true
      - get: gpdb7-rocky8-build
  - task: compile_gpdb
    image: gpdb7-rocky8-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: bin_gpdb
        params:
          file: gpdb_artifacts/bin_gpdb.tar.gz
      - put: bin_gpdb_clients
        params:
          file: gpdb_artifacts/bin_gpdb_clients.tar.gz

- name: compile_gpdb_with_llvm_asserts_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed:
        - check_format
        trigger: true
      - get: gpdb7-rocky8-build
      - get: llvm-with-asserts-packages
  - task: compile_gpdb
    image: gpdb7-rocky8-build
    file: gpdb_src/concourse/tasks/compile_gpdb.yml
    params:
      CONFIGURE_FLAGS: ((configure_flags_with_extensions))
      BLD_TARGETS: "clients"
      RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
      GPDB_BIN_FILENAME: bin_gpdb_with_llvm_asserts.tar.gz
  - in_parallel:
      steps:
      - put: bin_gpdb_with_llvm_asserts
        params:
          file: gpdb_artifacts/bin_gpdb_with_llvm_asserts.tar.gz

- name: prepare_binary_swap_gpdb_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [compile_gpdb_rocky8]
      - get: gpdb_package
        resource: previous_gpdb
        params:
          globs: [greengage-db-7*-el8-x86_64.rpm]
      - get: gpdb7-rocky8-build
  - task: generate_previous_bin_gpdb
    file: gpdb_src/concourse/tasks/extract_package.yml
    image: gpdb7-rocky8-build
  - put: binary_swap_gpdb_rocky8
    params:
      file: gpdb_artifacts/bin_gpdb.tar.gz

- name: test_gpdb_clients_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            trigger: true
            passed: [compile_gpdb_rocky8]
          - get: bin_gpdb
            passed: [compile_gpdb_rocky8]
          - get: bin_gpdb_clients
            passed: [compile_gpdb_rocky8]
          - get: gpdb7-rocky8-test
    - task: run_tests
      image: gpdb7-rocky8-test
      file: gpdb_src/concourse/tasks/test_gpdb_clients.yml

- name: compile_gpdb_clients_windows
  serial: true
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed:
        - check_format
      - get: gpdb7-rocky8-build
  - task: compile_gpdb_windows_remote
    file: gpdb_src/concourse/tasks/compile_gpdb_remote_windows.yml
    image: gpdb7-rocky8-build
    params:
      REMOTE_HOST: ((remote_win_host_build))
      REMOTE_PORT: ((remote_win_port_build))
      REMOTE_USER: ((remote_win_user_build))
      REMOTE_KEY: ((remote_win_key_build))
  - put: bin_gpdb_clients_windows
    params:
      file: "gpdb_artifacts/greengage-clients-x86_64.tar.gz"

- name: publish_server_builds
  old_name: Publish Server Builds
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            trigger: true
            passed:
              - compile_gpdb_rocky8
          - get: bin_gpdb
            passed: [compile_gpdb_rocky8]
          - get: gpdb7-rocky8-build
    - task: rename_server_build_artifacts
      image: gpdb7-rocky8-build
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: bin_gpdb
        outputs:
          - name: output
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
        run:
          path: bash
          args:
            - -ec
            - |
              server_version="$(./gpdb_src/getversion --short)"
              cp bin_gpdb/bin_gpdb.tar.gz "output/server-build-${server_version}-el8_x86_64${RC_BUILD_TYPE_GCS}.tar.gz"
    - in_parallel:
        steps:
          - put: server-build-rocky8
            params:
              file: output/server-build-*-el8*.tar.gz


- name: gate_compile_end
  plan:
    - get: gpdb_src
      trigger: true
      params:
        skip_download: 'true'
      passed:
      - prepare_binary_swap_gpdb_rocky8
      - compile_gpdb_with_llvm_asserts_rocky8
      - compile_gpdb_clients_windows
      - publish_server_builds
      - test_gpdb_clients_rocky8
    - get: bin_gpdb
      params:
        skip_download: 'true'
      passed:
      - test_gpdb_clients_rocky8
      - publish_server_builds
    - get: bin_gpdb_clients
      params:
        skip_download: 'true'
      passed:
      - test_gpdb_clients_rocky8
    - get: bin_gpdb_clients_windows
      params:
        skip_download: 'true'
      passed:
      - compile_gpdb_clients_windows
    - get: server-build-rocky8
      params:
        skip_download: 'true'
      passed: [publish_server_builds]
    - get: binary_swap_gpdb_rocky8
      params:
        skip_download: 'true'
      passed: [ prepare_binary_swap_gpdb_rocky8 ]
    - get: bin_gpdb_with_llvm_asserts
      params:
        skip_download: 'true'
      passed: [ compile_gpdb_with_llvm_asserts_rocky8 ]

## ======================================================================
##  ___ ______        __
## |_ _/ ___\ \      / /
##  | | |    \ \ /\ / /
##  | | |___  \ V  V /
## |___\____|  \_/\_/
## ======================================================================
- name: gate_icw_start
  plan:
    - in_parallel:
        steps:
        - get: bin_gpdb
          params:
            skip_download: 'true'
          passed: [gate_compile_end]
          trigger: true
        - get: binary_swap_gpdb_rocky8
          params:
            skip_download: 'true'
          passed: [gate_compile_end]
        - get: bin_gpdb_with_llvm_asserts
          params:
            skip_download: 'true'
          passed: [gate_compile_end]
        - get: gpdb_src
          params:
            skip_download: 'true'
          passed: [gate_compile_end]
        - get: bin_gpdb_clients
          params:
            skip_download: 'true'
          passed: [ gate_compile_end ]

- name: gpdb_pitr_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: gpdb_pitr
    file: gpdb_src/concourse/tasks/gpdb_pitr.yml
    image: gpdb7-rocky8-test
    params:
      WITH_MIRRORS: true
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on -c jit=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_jit_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
      - get: llvm-with-asserts-packages
      - get: bin_gpdb_with_llvm_asserts
        passed: [gate_icw_start]
        trigger: true
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on -c jit=on -c jit_above_cost=0 -c optimizer_jit_above_cost=0 -c gp_explain_jit=off' installcheck
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_memory_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on -c jit=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - optimizer_use_gpdb_allocators=off

- name: icw_planner_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: binary_swap_gpdb
        passed: [gate_icw_start]
        resource: binary_swap_gpdb_rocky8
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb_binary_swap.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off -c jit=off' installcheck-world
      TEST_OS: centos
      TEST_BINARY_SWAP: ((test-binary-swap))
      CONFIGURE_FLAGS: ((configure_flags))
      DUMP_DB: "true"
  - put: icw_planner_rocky8_dump
    params:
      file: sqldump/dump.sql.xz

- name: icw_planner_jit_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: binary_swap_gpdb
        passed: [gate_icw_start]
        resource: binary_swap_gpdb_rocky8
      - get: gpdb7-rocky8-test
      - get: llvm-with-asserts-packages
      - get: bin_gpdb_with_llvm_asserts
        passed: [gate_icw_start]
        trigger: true
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb_binary_swap.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off -c jit=on -c jit_above_cost=0 -c gp_explain_jit=off' installcheck
      TEST_OS: centos
      TEST_BINARY_SWAP: ((test-binary-swap))
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_icproxy_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=on -c jit=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_planner_icproxy_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=proxy -c optimizer=off -c jit=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_gporca_ictcp_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c gp_interconnect_type=tcp -c optimizer=on -c jit=off' installcheck-world
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))

- name: icw_mirrorless_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_icw_start]
      - get: bin_gpdb
        passed: [gate_icw_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: ic_gpdb
    tags: [icw-worker]
    file: gpdb_src/concourse/tasks/ic_gpdb.yml
    image: gpdb7-rocky8-test
    timeout: 24h
    params:
      MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on -c jit=off' installcheck-mirrorless
      TEST_OS: centos
      CONFIGURE_FLAGS: ((configure_flags))
      WITH_MIRRORS: false
      BLDWRAP_POSTGRES_CONF_ADDONS:
        - wal_level=minimal
        - max_wal_senders=0
        - max_replication_slots=0
        - wal_keep_size=0
        - gp_dispatch_keepalives_idle=30
        - gp_dispatch_keepalives_interval=10
        - gp_dispatch_keepalives_count=4

- name: unit_tests_gporca_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
            params:
              skip_download: "true"
          - get: bin_gpdb_clients
            passed: [ gate_icw_start ]
            trigger: true
            params:
              skip_download: "true"
          - get: gpdb7-rocky8-build
    - task: unit_tests_gporca
      file: gpdb_src/concourse/tasks/unit_tests_gporca.yml
      image: gpdb7-rocky8-build

- name: interconnect_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: gpdb7-rocky8-test
    - task: ic_gpdb
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb7-rocky8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off -c jit=off'
          BUILD_TYPE=((rc-build-type)) -C src/test/regress installcheck-icudp
        TEST_OS: centos

- name: pg_filedump_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: filedump_src
          - get: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: gpdb7-rocky8-test
    - task: ic_filedump
      file: gpdb_src/concourse/tasks/compile_gpdb_with_filedump.yml
      image: gpdb7-rocky8-test
      params:
        MAKE_TEST_COMMAND: -k
          BUILD_TYPE=((rc-build-type)) installcheck
        TEST_OS: centos

- name: hot_standby_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: gpdb7-rocky8-test
    - task: ic_hot_standby
      file: gpdb_src/concourse/tasks/ic_gpdb.yml
      image: gpdb7-rocky8-test
      params:
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off -c jit=off'
          BUILD_TYPE=((rc-build-type)) -C src/test/isolation2 installcheck-hot-standby
        TEST_OS: centos

- name: icw_extensions_gpcloud_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: gpdb7-rocky8-test
    - in_parallel:
        steps:
          - task: unit_tests_gpcloud
            file: gpdb_src/concourse/tasks/unit_tests_gpcloud.yml
            image: gpdb7-rocky8-test
            params:
              TARGET_OS: centos
          - task: regression_tests_gpcloud_centos
            file: gpdb_src/concourse/tasks/regression_tests_gpcloud.yml
            image: gpdb7-rocky8-test
            params:
              gpcloud_access_key_id: ((gpcloud-access-key-id))
              gpcloud_secret_access_key: ((gpcloud-secret-access-key))
              TARGET_OS: centos
          - task: gpcheckcloud_tests_gpcloud_centos
            file: gpdb_src/concourse/tasks/gpcheckcloud_tests_gpcloud.yml
            image: gpdb7-rocky8-test
            params:
              gpcloud_access_key_id: ((gpcloud-access-key-id))
              gpcloud_secret_access_key: ((gpcloud-secret-access-key))
              TARGET_OS: centos

- name: gpexpand_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            params:
              submodules:
                - gpMgmt/bin/pythonSrc/ext
            passed: [icw_planner_rocky8]
          - get: gpdb_binary
            resource: bin_gpdb
            passed: [icw_planner_rocky8]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: icw_planner_rocky8_dump
            passed: [icw_planner_rocky8]
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-standard-4
          number_of_nodes: 5
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
    - task: pre_run_test_setup
      file: gpdb_src/concourse/tasks/setup_for_gpexpand_to_make_new_gpdb.yml
      image: ccp-image
      input_mapping: {sqldump: icw_planner_rocky8_dump}
      params:
        SUDO_CDW_USERNAME: rocky
    - task: run_tests
      file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
      params:
        BEHAVE_FLAGS: --tags=gpexpand
      image: ccp-image
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: pg_upgrade_rocky8
  ensure:
    <<: *set_failed
  on_success:
    <<: *ccp_destroy
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [icw_planner_rocky8]
          - get: bin_gpdb
            passed: [icw_planner_rocky8]
            trigger: true
          - get: icw_planner_rocky8_dump
            passed: [icw_planner_rocky8]
          - get: ccp_src
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-highmem-4
          number_of_nodes: 2
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
      input_mapping:
        gpdb_binary: bin_gpdb
    - task: set_gpinitsystem_config
      file: gpdb_src/concourse/tasks/set_gpinitsystem_config.yml
      params:
        GPINITSYSTEM_CONFIG: gpdb_src/concourse/scripts/configurations/pg_upgrade_gpinitsystem_config
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        <<: *default_platform
    - task: test_upgrade
      file: gpdb_src/concourse/tasks/test_upgrade.yml
      input_mapping:
        sqldump: icw_planner_rocky8_dump
      params:
        NUMBER_OF_NODES: 2

- name: icw_planner_resgroup_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: gpdb_binary
            resource: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-standard-32
          number_of_nodes: 1
          segments_per_host: 3
          disk_size: 800
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        DATA_MOUNT_DIR: "/home/gpadmin"
        CREATE_DATA_DIR: false
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_resgroup.yml
      image: ccp-image
      params:
        TEST_OS: rocky8
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=off -c jit=off' installcheck-world
        BLDWRAP_POSTGRES_CONF_ADDONS:
          - gp_resource_manager=group
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: icw_gporca_resgroup_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_icw_start]
          - get: gpdb_binary
            resource: bin_gpdb
            passed: [gate_icw_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-standard-32
          number_of_nodes: 1
          segments_per_host: 3
          disk_size: 800
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        DATA_MOUNT_DIR: "/home/gpadmin"
        CREATE_DATA_DIR: false
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_resgroup.yml
      image: ccp-image
      params:
        TEST_OS: rocky8
        MAKE_TEST_COMMAND: -k PGOPTIONS='-c optimizer=on -c jit=off' installcheck-world
        BLDWRAP_POSTGRES_CONF_ADDONS:
          - gp_resource_manager=group
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: gate_icw_end
  plan:
  - in_parallel:
      steps:
      - get: bin_gpdb
        passed:
        - icw_gporca_rocky8
        - icw_gporca_jit_rocky8
        - icw_gporca_memory_rocky8
        - icw_planner_jit_rocky8
        - icw_gporca_icproxy_rocky8
        - icw_planner_icproxy_rocky8
        - icw_gporca_ictcp_rocky8
        - icw_mirrorless_rocky8
        - unit_tests_gporca_rocky8
        - gpdb_pitr_rocky8
        - gpexpand_rocky8
        - pg_upgrade_rocky8
        - interconnect_rocky8
        - pg_filedump_rocky8
        - hot_standby_rocky8
      - get: icw_planner_rocky8_dump
        params:
          skip_download: 'true'
        passed:
        - pg_upgrade_rocky8
        - gpexpand_rocky8
      - get: gpdb_src
        params:
          skip_download: 'true'
        passed:
        - icw_gporca_rocky8
        - icw_gporca_jit_rocky8
        - icw_gporca_memory_rocky8
        - icw_planner_jit_rocky8
        - icw_gporca_icproxy_rocky8
        - icw_planner_icproxy_rocky8
        - icw_gporca_ictcp_rocky8
        - icw_mirrorless_rocky8
        - unit_tests_gporca_rocky8
        - gpdb_pitr_rocky8
        - gpexpand_rocky8
        - pg_upgrade_rocky8
        - icw_planner_resgroup_rocky8
        - icw_gporca_resgroup_rocky8
        - interconnect_rocky8
        - pg_filedump_rocky8
        - hot_standby_rocky8
        trigger: true
      - get: bin_gpdb_clients
        params:
          skip_download: 'true'
        passed: [unit_tests_gporca_rocky8]
  - put: bin_gpdb_icw_green
    params:
      file: bin_gpdb/bin_gpdb.tar.gz

## ======================================================================
##   ____ _     ___
##  / ___| |   |_ _|
## | |   | |    | |
## | |___| |___ | |
##  \____|_____|___|
## ======================================================================

- name: gate_cli_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          skip_download: 'true'
        passed:
        - gate_compile_end
        trigger: true
      - get: bin_gpdb
        params:
          skip_download: 'true'
        passed:
        - gate_compile_end

- name: unit_tests_gpmgmt_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        passed: [gate_cli_start]
      - get: bin_gpdb
        passed: [gate_cli_start]
        trigger: true
      - get: gpdb7-rocky8-test
  - task: unit_tests_gpmgmt_rocky8
    file: gpdb_src/concourse/tasks/gpMgmt_check_gpdb.yml
    image: gpdb7-rocky8-test
    params:
      TEST_OS: centos
      TEST_NAME: unit_tests_gpmgmt
  - task: publish_coverage
    image: gpdb7-rocky8-test
    config:
      platform: linux
      inputs:
        - name: gpdb_src
        - name: coverage
      run:
        path: gpdb_src/concourse/scripts/gsutil_sync
        args: [ "./coverage/", "gs://((gcs-bucket-coverage))/((pipeline-name))/" ]
      params:
        JSON_KEY: ((concourse-gcs-resources-service-account-key))
      caches:
        - path: pip-cache-dir

- name: gpmovemirrors_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              number_of_nodes: 4
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpmovemirrors_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            SUDO_ACCESS_ON_HOSTS: 1
            SUDO_CDW_USERNAME: rocky
            BEHAVE_FLAGS: --tags=gpmovemirrors --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpmovemirrors_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpmovemirrors --tags=~concourse_cluster,demo_cluster
            
- name: analyzedb_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: analyzedb_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=analyzedb --tags=~concourse_cluster,demo_cluster
            
- name: gpreload_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpreload_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpreload --tags=~concourse_cluster,demo_cluster
            
- name: gpinitsystem_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpinitsystem_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpinitsystem --tags=~concourse_cluster,demo_cluster
            
- name: gpstate_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpstate_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstate --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpstate_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstate --tags=~concourse_cluster,demo_cluster
            
- name: replication_slots_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: replication_slots_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=replication_slots --tags=~concourse_cluster,demo_cluster
            
- name: gpactivatestandby_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpactivatestandby_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpactivatestandby --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpactivatestandby_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpactivatestandby --tags=~concourse_cluster,demo_cluster
            
- name: gpinitstandby_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpinitstandby_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpinitstandby --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpinitstandby_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpinitstandby --tags=~concourse_cluster,demo_cluster
            
- name: gp_bash_functions.sh_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gp_bash_functions.sh_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gp_bash_functions.sh --tags=~concourse_cluster,demo_cluster
            
- name: gpcheckcat_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpcheckcat_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpcheckcat --tags=~concourse_cluster,demo_cluster
            
- name: gpcheckperf_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpcheckperf_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpcheckperf --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpcheckperf_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpcheckperf --tags=~concourse_cluster,demo_cluster
            
- name: gprecoverseg_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              number_of_nodes: 3
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gprecoverseg_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            SUDO_ACCESS_ON_HOSTS: 1
            SUDO_CDW_USERNAME: rocky
            BEHAVE_FLAGS: --tags=gprecoverseg --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gprecoverseg_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gprecoverseg --tags=~concourse_cluster,demo_cluster
            
- name: gprecoverseg_newhost_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              number_of_nodes: 7
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - get: alpine-docker
        - task: reserve_spare_hosts
          image: alpine-docker
          config:
            platform: linux
            inputs:
              - name: cluster_env_files
            outputs:
              - name: cluster_env_files
            run:
              path: sh
              args:
                - -exc
                - |
                  # modify the hostfile_init used by gpinitsystem to exclude the last two hosts, so they are spares
                  cp cluster_env_files/hostfile_init cluster_env_files/hostfile_init_orig
                  head -n -2 cluster_env_files/hostfile_init_orig > cluster_env_files/hostfile_init
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gprecoverseg_newhost_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            SUDO_ACCESS_ON_HOSTS: 1
            SUDO_CDW_USERNAME: rocky
            BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gprecoverseg_newhost_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gprecoverseg_newhost --tags=~concourse_cluster,demo_cluster
            
- name: gpaddmirrors_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              number_of_nodes: 4
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpaddmirrors_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpaddmirrors --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpaddmirrors_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpaddmirrors --tags=~concourse_cluster,demo_cluster
            
- name: gpconfig_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpconfig_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpconfig --tags=concourse_cluster
            LC_CTYPE: en_US.utf8
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpconfig_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpconfig --tags=~concourse_cluster,demo_cluster
            LC_CTYPE: en_US.utf8
- name: gpssh-exkeys_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              number_of_nodes: 4
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpssh-exkeys_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpssh-exkeys_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpssh-exkeys --tags=~concourse_cluster,demo_cluster
            
- name: gpstart_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpstart_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstart --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpstart_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstart --tags=~concourse_cluster,demo_cluster
            
- name: gpstop_rocky8
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
  - in_parallel:
      steps:
      - do:
        - get: gpdb_binary
          resource: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - get: ccp_src
        - get: terraform.d
          params:
            unpack: true
        - put: terraform
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              
        - task: gen_cluster
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
        - task: gpinitsystem
          file: ccp_src/ci/tasks/gpinitsystem.yml
          params:
            <<: *default_platform
        - task: gpstop_concourse_cluster_tests
          file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstop --tags=concourse_cluster
            
          on_success:
            <<: *ccp_destroy
          ensure:
            <<: *set_failed
      - do:
        - get: bin_gpdb
          passed: [gate_cli_start]
          trigger: true
        - task: gpstop_demo_cluster_tests
          file: gpdb_src/concourse/tasks/behave_gpdb.yml
          image: gpdb7-rocky8-test
          params:
            BEHAVE_FLAGS: --tags=gpstop --tags=~concourse_cluster,demo_cluster
            

- name: resource_group_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_cli_start]
          - get: gpdb_binary
            resource: bin_gpdb
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-standard-2
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        <<: *default_platform
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_gpdb_resgroup.yml
      image: ccp-image
      params:
        TEST_OS: rocky8
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: resource_group_v2_rocky8
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_cli_start]
          - get: gpdb_binary
            resource: bin_gpdb
            passed: [gate_cli_start]
            trigger: true
          - get: ccp_src
          - get: ccp-image
          - get: terraform.d
            params:
              unpack: true
    - put: terraform
      params:
        <<: *ccp_default_params
        vars:
          <<: *ccp_default_vars
          instance_type: n1-standard-2
          PLATFORM: rocky8-cgroup2-gpdb7
    - task: gen_cluster
      file: ccp_src/ci/tasks/gen_cluster.yml
      params:
        <<: *ccp_gen_cluster_default_params
        PLATFORM: rocky8-cgroup2-gpdb7
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        <<: *default_platform
    - task: run_tests
      file: gpdb_src/concourse/tasks/ic_gpdb_resgroup_v2.yml
      image: ccp-image
      params:
        TEST_OS: rocky8
      on_success:
        <<: *ccp_destroy
  ensure:
    <<: *set_failed

- name: cli_cross_subnet
  plan:
    - in_parallel:
      - get: gpdb_src
        params:
          submodules:
            - gpMgmt/bin/pythonSrc/ext
        passed: [gate_cli_start]
      - get: gpdb7-rocky8-test
      - get: gpdb_binary
        resource: bin_gpdb
        passed: [gate_cli_start]
        trigger: true
      - get: ccp_src
      - get: ccp-image
      - get: alpine-docker
      - get: terraform.d
        params:
          unpack: true
    - task: generate-ssh-keys
      image: alpine-docker
      config:
        platform: linux
        outputs:
          - name: ssh-extra-key
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client openssl
              ssh-keygen -b 4096 -t rsa -m PEM -f ssh-extra-key/key -N "" -C ""
              openssl rsa -in ssh-extra-key/key -pubout -out ssh-extra-key/key.pem
              sed -i 's/*//;s/ *$//' ssh-extra-key/key.pub
    - in_parallel:
      - do:
        - put: terraform_1
          params:
            <<: *ccp_default_params
            vars:
              <<: *ccp_default_vars
              instance_type: n1-standard-2
              subnet: dynamic
              cluster_suffix: '-1'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_1
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_1
          output_mapping:
            cluster_env_files: cluster_1
      - do:
        - put: terraform_2
          params:
            <<: *ccp_default_params
            vars:
              instance_type: n1-standard-2
              <<: *default_platform
              subnet: toolshed
              cluster_suffix: '-2'
              custom_ssh_key: "/tmp/build/put/ssh-extra-key/key"
        - task: gen_cluster_2
          file: ccp_src/ci/tasks/gen_cluster.yml
          params:
            <<: *ccp_gen_cluster_default_params
          input_mapping:
            terraform: terraform_2
          output_mapping:
            cluster_env_files: cluster_2
    - task: exchange_keys
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        run:
          path: sh
          args:
            - -exc
            - |
              apk add --update --no-progress openssh-client

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_1/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_2/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_2/.ssh/config
                  ssh $opts rocky@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_2/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_2/.ssh/known_hosts
              done < cluster_1/etc_hostfile

              opts="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i cluster_2/private_key.pem"
              while read -r ip host extra; do
                  scp $opts cluster_1/.ssh/*private_key.pem gpadmin@"$ip":~/.ssh/
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/config && chmod 0600 ~/.ssh/config" < cluster_1/.ssh/config
                  ssh $opts rocky@"$ip" -- "sudo bash -c 'cat - >> /etc/hosts'" < cluster_1/etc_hostfile
                  ssh $opts gpadmin@"$ip" -- bash -c "cat - >> ~/.ssh/known_hosts" < cluster_1/.ssh/known_hosts
              done < cluster_2/etc_hostfile
    - task: combine_cluster_config_files
      image: alpine-docker
      config:
        platform: linux
        inputs:
          - name: cluster_1
          - name: cluster_2
        outputs:
          - name: cluster_env_files
        run:
          path: sh
          args:
            - -exc
            - |
              cp -r cluster_1/* cluster_env_files
              cp -r cluster_1/.ssh cluster_env_files
              cat cluster_2/hostfile_all >> cluster_env_files/hostfile_all
              cat cluster_2/etc_hostfile >> cluster_env_files/etc_hostfile
              cat cluster_2/hostfile_init >> cluster_env_files/hostfile_init

              cp cluster_2/.ssh/*.pem cluster_env_files/.ssh
              cat cluster_2/.ssh/known_hosts >> cluster_env_files/.ssh/known_hosts
              cat cluster_2/.ssh/config >> cluster_env_files/.ssh/config
              sed -i '/^Host cdw-1/ s/$/ cdw/' cluster_env_files/.ssh/config
    - task: gpinitsystem
      file: ccp_src/ci/tasks/gpinitsystem.yml
      params:
        GPINIT_STANDBY_COORDINATOR: '-s cdw-2'
        <<: *default_platform
    - task: cross_subnet_tests
      file: gpdb_src/concourse/tasks/run_behave_on_ccp_cluster.yml
      image: ccp-image
      params:
        BEHAVE_FLAGS: --tags=cross_subnet
        TEST_NAME: cross_subnet
  on_success:
    <<: *ccp_destroy_two_clusters
  ensure:
    <<: *set_failed_two_clusters

- name: combine_cli_coverage
  plan:
    - in_parallel:
        steps:
        - get: gpdb7-rocky8-test
        - get: gpdb_src
          passed:
            - cli_cross_subnet
            - gpmovemirrors_rocky8
            - analyzedb_rocky8
            - gpreload_rocky8
            - gpinitsystem_rocky8
            - gpstate_rocky8
            - replication_slots_rocky8
            - gpactivatestandby_rocky8
            - gpinitstandby_rocky8
            - gp_bash_functions.sh_rocky8
            - gpcheckcat_rocky8
            - gpcheckperf_rocky8
            - gprecoverseg_rocky8
            - gprecoverseg_newhost_rocky8
            - gpaddmirrors_rocky8
            - gpconfig_rocky8
            - gpssh-exkeys_rocky8
            - gpstart_rocky8
            - gpstop_rocky8
            - unit_tests_gpmgmt_rocky8
            - resource_group_rocky8
            - resource_group_v2_rocky8
        - get: bin_gpdb
          trigger: true
          passed:
            - cli_cross_subnet
            - gpmovemirrors_rocky8
            - analyzedb_rocky8
            - gpreload_rocky8
            - gpinitsystem_rocky8
            - gpstate_rocky8
            - replication_slots_rocky8
            - gpactivatestandby_rocky8
            - gpinitstandby_rocky8
            - gp_bash_functions.sh_rocky8
            - gpcheckcat_rocky8
            - gpcheckperf_rocky8
            - gprecoverseg_rocky8
            - gprecoverseg_newhost_rocky8
            - gpaddmirrors_rocky8
            - gpconfig_rocky8
            - gpssh-exkeys_rocky8
            - gpstart_rocky8
            - gpstop_rocky8
            - unit_tests_gpmgmt_rocky8
            - resource_group_rocky8
            - resource_group_v2_rocky8
    - task: combine_coverage
      image: gpdb7-rocky8-test
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: bin_gpdb
        run:
          path: gpdb_src/concourse/scripts/combine_cli_coverage.bash
          args: [ "gs://((gcs-bucket-coverage))/((pipeline-name))/", "((gcs-bucket-coverage))/((pipeline-name))" ]
        params:
          JSON_KEY: ((concourse-gcs-resources-service-account-key))
        caches:
          - path: pip-cache-dir

- name: gate_cli_end
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            params:
              skip_download: 'true'
            passed:
            - combine_cli_coverage
            trigger: true
          - get: bin_gpdb
            params:
              skip_download: 'true'
            passed:
            - combine_cli_coverage

 # end cli test_sections

## ======================================================================
##  ____      _
## |  _ \ ___| | ___  __ _ ___  ___
## | |_) / _ \ |/ _ \/ _` / __|/ _ \
## |  _ <  __/ |  __/ (_| \__ \  __/
## |_| \_\___|_|\___|\__,_|___/\___|
## ======================================================================

- name: gate_release_candidate_start
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        params:
          skip_download: 'true'
        trigger: true
        passed:
          - gate_icw_end
          - gate_cli_end
      - get: bin_gpdb
        params:
          skip_download: 'true'
        trigger: true
        passed:
          - gate_icw_end
          - gate_cli_end
      - get: bin_gpdb_clients
        trigger: true
        params:
          skip_download: 'true'
        passed:
          - gate_icw_end

- name: release_candidate
  old_name: Release_Candidate
  plan:
  - in_parallel:
      steps:
      - get: gpdb_src
        trigger: true
        passed: [gate_release_candidate_start]
      - get: bin_gpdb
        trigger: true
        passed: [ gate_release_candidate_start ]
      - get: bin_gpdb_clients
        trigger: true
        passed: [gate_release_candidate_start]
      - get: gpdb7-rocky8-build
  - in_parallel:
      steps:
      - task: rename_rc_artifacts
        image: gpdb7-rocky8-build
        config:
          platform: linux
          inputs:
            - name: gpdb_src
            - name: bin_gpdb
            - name: bin_gpdb_clients
          outputs:
            - name: release_candidates
          params:
            RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
          run:
            path: bash
            args:
              - -ec
              - |
                gpdb_semver=$(gpdb_src/getversion | cut -d' ' -f1)
                cp -v bin_gpdb/bin_gpdb.tar.gz release_candidates/server-rc-${gpdb_semver}-el8_x86_64${RC_BUILD_TYPE_GCS}.tar.gz
                cp -v bin_gpdb_clients/bin_gpdb_clients.tar.gz release_candidates/clients-rc-${gpdb_semver}-el8_x86_64${RC_BUILD_TYPE_GCS}.tar.gz
      - task: verify_gpdb_versions
        image: gpdb7-rocky8-build
        input_mapping:
          bin_gpdb: bin_gpdb
        file: gpdb_src/concourse/tasks/verify_gpdb_versions.yml
      - task: tar_git_repo
        image: gpdb7-rocky8-build
        file: gpdb_src/concourse/tasks/tar_git_repo.yml
        params:
          SERVER_SRC_RC_PREFIX: ""
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
  - in_parallel:
      steps:
      - put: server_src_rc
        params:
          file: "server_tar/*server-src-rc-*.tar.gz"
      - put: bin_gpdb_rc
        params:
          file: "release_candidates/server-rc-*el8*.tar.gz"
      - put: bin_gpdb_clients_rc
        params:
          file: "release_candidates/clients-rc-*el8*.tar.gz"

- name: build_release_candidate_rpms
  old_name: Build_Release_Candidate_RPMs
  plan:
    - in_parallel:
        steps:
          - get: gpdb_src
            passed: [gate_release_candidate_start]
          - get: bin_gpdb
            trigger: true
            passed: [gate_release_candidate_start]
          - get: gpdb7-rocky8-build
          - get: greengage-database-release
          - get: license_file
    - task: create_gpdb_rpm_package_rocky8
      file: greengage-database-release/ci/concourse/tasks/build-gpdb-rpm.yml
      image: gpdb7-rocky8-build
      output_mapping:
        gpdb_rpm_installer: gpdb_rpm_rocky8
      params:
        PLATFORM: "rocky8"
        GPDB_NAME: greengage-db-7
        GPDB_RELEASE: 1
        GPDB_LICENSE: VMware, Inc. or its affiliates EULA
        GPDB_URL: https://github.com/GreengageDB/greengage
        GPDB_OSS: false
    - task: rename_rc_artifacts
      image: gpdb7-rocky8-build
      config:
        platform: linux
        inputs:
          - name: gpdb_src
          - name: gpdb_rpm_rocky8
        outputs:
          - name: renamed_gpdb_rpm_rocky8
        params:
          RC_BUILD_TYPE_GCS: ((rc-build-type-gcs))
        run:
          path: sh
          args:
            - -exc
            - |
              gpdb_semver=$(gpdb_src/getversion | cut -d' ' -f1)
              cp -v gpdb_rpm_rocky8/*.rpm renamed_gpdb_rpm_rocky8/greengage-db-${gpdb_semver}-el8-x86_64${RC_BUILD_TYPE_GCS}.rpm
    - in_parallel:
        steps:
          - put: gpdb_rpm_installer_rocky8
            params:
              file: renamed_gpdb_rpm_rocky8/*.rpm

