-- Additional tests that exercise the BRIN user interface
CREATE TABLE brin_interface(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO brin_interface SELECT * FROM generate_series(1, 5000);
CREATE INDEX ON brin_interface USING brin(i) WITH (pages_per_range=1);
-- Helper view to see revmap page contents.
CREATE VIEW revmap_page1 AS (SELECT * FROM
    brin_revmap_data(get_raw_page('brin_interface_i_idx', 1)) WHERE pages != '(0,0)' ORDER BY 1);
-- Sanity: there are 2 ranges on each QE.
SELECT gp_execution_segment(), * FROM gp_dist_random('revmap_page1') ORDER BY 1;
 gp_execution_segment | pages 
----------------------+-------
                    0 | (2,1)
                    0 | (2,2)
                    1 | (2,1)
                    1 | (2,2)
                    2 | (2,1)
                    2 | (2,2)
(6 rows)

SELECT gp_execution_segment(), (brin_page_items(get_raw_page('brin_interface_i_idx', 2),
    'brin_interface_i_idx')).* from gp_dist_random('gp_id') ORDER BY 1;
 gp_execution_segment | itemoffset | blknum | attnum | allnulls | hasnulls | placeholder | empty |     value      
----------------------+------------+--------+--------+----------+----------+-------------+-------+----------------
                    0 |          1 |      0 |      1 | f        | f        | f           | f     | {2 .. 2703}
                    0 |          2 |      1 |      1 | f        | f        | f           | f     | {2705 .. 4997}
                    1 |          1 |      0 |      1 | f        | f        | f           | f     | {1 .. 2777}
                    1 |          2 |      1 |      1 | f        | f        | f           | f     | {2779 .. 5000}
                    2 |          1 |      0 |      1 | f        | f        | f           | f     | {5 .. 2698}
                    2 |          2 |      1 |      1 | f        | f        | f           | f     | {2699 .. 4999}
(6 rows)

-- Now desummarize the 1st range on each QE.
SELECT brin_desummarize_range('brin_interface_i_idx', 0);
 brin_desummarize_range 
------------------------
(0 rows)

-- Sanity: the 1st range is desummarized on each QE.
SELECT gp_execution_segment(), * FROM gp_dist_random('revmap_page1') ORDER BY 1;
 gp_execution_segment |     pages      
----------------------+----------------
                    0 | (2,2)
                    0 | (4294967295,0)
                    1 | (2,2)
                    1 | (4294967295,0)
                    2 | (2,2)
                    2 | (4294967295,0)
(6 rows)

SELECT gp_execution_segment(), (brin_page_items(get_raw_page('brin_interface_i_idx', 2),
    'brin_interface_i_idx')).* from gp_dist_random('gp_id') ORDER BY 1;
 gp_execution_segment | itemoffset | blknum | attnum | allnulls | hasnulls | placeholder | empty |     value      
----------------------+------------+--------+--------+----------+----------+-------------+-------+----------------
                    0 |          1 |        |        |          |          |             |       | 
                    0 |          2 |      1 |      1 | f        | f        | f           | f     | {2705 .. 4997}
                    1 |          1 |        |        |          |          |             |       | 
                    1 |          2 |      1 |      1 | f        | f        | f           | f     | {2779 .. 5000}
                    2 |          1 |        |        |          |          |             |       | 
                    2 |          2 |      1 |      1 | f        | f        | f           | f     | {2699 .. 4999}
(6 rows)

-- Now re-summarize the 1st range on each QE.
SELECT brin_summarize_range('brin_interface_i_idx', 0);
 brin_summarize_range 
----------------------
                    3
(1 row)

-- Sanity: the 1st range is desummarized on each QE.
SELECT gp_execution_segment(), * FROM gp_dist_random('revmap_page1') ORDER BY 1;
 gp_execution_segment | pages 
----------------------+-------
                    0 | (2,2)
                    0 | (2,3)
                    1 | (2,2)
                    1 | (2,3)
                    2 | (2,2)
                    2 | (2,3)
(6 rows)

SELECT gp_execution_segment(), (brin_page_items(get_raw_page('brin_interface_i_idx', 2),
     'brin_interface_i_idx')).* from gp_dist_random('gp_id') ORDER BY 1;
 gp_execution_segment | itemoffset | blknum | attnum | allnulls | hasnulls | placeholder | empty |     value      
----------------------+------------+--------+--------+----------+----------+-------------+-------+----------------
                    0 |          1 |        |        |          |          |             |       | 
                    0 |          2 |      1 |      1 | f        | f        | f           | f     | {2705 .. 4997}
                    0 |          3 |      0 |      1 | f        | f        | f           | f     | {2 .. 2703}
                    1 |          1 |        |        |          |          |             |       | 
                    1 |          2 |      1 |      1 | f        | f        | f           | f     | {2779 .. 5000}
                    1 |          3 |      0 |      1 | f        | f        | f           | f     | {1 .. 2777}
                    2 |          1 |        |        |          |          |             |       | 
                    2 |          2 |      1 |      1 | f        | f        | f           | f     | {2699 .. 4999}
                    2 |          3 |      0 |      1 | f        | f        | f           | f     | {5 .. 2698}
(9 rows)

-- Insert some more rows
INSERT INTO brin_interface SELECT * FROM generate_series(5001, 10000);
-- Summarize new ranges on all QEs (2 for each QE)
SELECT brin_summarize_new_values('brin_interface_i_idx');
 brin_summarize_new_values 
---------------------------
                         6
(1 row)

-- Sanity: all ranges are summarized on all QEs.
SELECT gp_execution_segment(), * FROM gp_dist_random('revmap_page1') ORDER BY 1;
 gp_execution_segment | pages 
----------------------+-------
                    0 | (2,2)
                    0 | (2,3)
                    0 | (2,4)
                    0 | (2,5)
                    1 | (2,2)
                    1 | (2,3)
                    1 | (2,4)
                    1 | (2,5)
                    2 | (2,2)
                    2 | (2,3)
                    2 | (2,4)
                    2 | (2,5)
(12 rows)

SELECT gp_execution_segment(), (brin_page_items(get_raw_page('brin_interface_i_idx', 2),
    'brin_interface_i_idx')).* from gp_dist_random('gp_id') ORDER BY 1;
 gp_execution_segment | itemoffset | blknum | attnum | allnulls | hasnulls | placeholder | empty |      value      
----------------------+------------+--------+--------+----------+----------+-------------+-------+-----------------
                    0 |          1 |        |        |          |          |             |       | 
                    0 |          2 |      1 |      1 | f        | f        | f           | f     | {2705 .. 5472}
                    0 |          3 |      0 |      1 | f        | f        | f           | f     | {2 .. 2703}
                    0 |          4 |      2 |      1 | f        | f        | f           | f     | {5477 .. 8199}
                    0 |          5 |      3 |      1 | f        | f        | f           | f     | {8200 .. 9998}
                    1 |          1 |        |        |          |          |             |       | 
                    1 |          2 |      1 |      1 | f        | f        | f           | f     | {2779 .. 5442}
                    1 |          3 |      0 |      1 | f        | f        | f           | f     | {1 .. 2777}
                    1 |          4 |      2 |      1 | f        | f        | f           | f     | {5444 .. 8142}
                    1 |          5 |      3 |      1 | f        | f        | f           | f     | {8145 .. 9990}
                    2 |          1 |        |        |          |          |             |       | 
                    2 |          2 |      1 |      1 | f        | f        | f           | f     | {2699 .. 5452}
                    2 |          3 |      0 |      1 | f        | f        | f           | f     | {5 .. 2698}
                    2 |          4 |      2 |      1 | f        | f        | f           | f     | {5456 .. 8214}
                    2 |          5 |      3 |      1 | f        | f        | f           | f     | {8218 .. 10000}
(15 rows)

-- Error out when autosummarize is specified as true during index build.
CREATE INDEX brin_interface_error_idx ON brin_interface USING brin(i) WITH (autosummarize=true);
ERROR:  autosummarize is not supported
-- Don't error out when autosummarize is specified as false during index build.
CREATE INDEX brin_interface_idx ON brin_interface USING brin(i) WITH (autosummarize=false);
-- Altering it to false should not result in an error.
ALTER INDEX brin_interface_idx SET (autosummarize=false);
-- Altering it to true should result in an error.
ALTER INDEX brin_interface_idx SET (autosummarize=true);
ERROR:  autosummarize is not supported
-- Test BRIN pages_per_range defaults
CREATE TABLE brin_ppr_heap1(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_heap1 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_heap1_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

CREATE UNLOGGED TABLE brin_ppr_heap2(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_heap2 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_heap2_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

CREATE TABLE brin_ppr_heap3(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_heap3 USING brin(i) WITH (autosummarize=false);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_heap3_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

CREATE TABLE brin_ppr_ao_row1(i int) USING ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_row1 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_row1_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

CREATE UNLOGGED TABLE brin_ppr_ao_row2(i int) USING ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_row2 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_row2_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

CREATE TABLE brin_ppr_ao_row3(i int) USING ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_row3 USING brin(i) WITH (autosummarize=false);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_row3_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

CREATE TABLE brin_ppr_ao_column1(i int) USING ao_column;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_column1 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_column1_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

CREATE UNLOGGED TABLE brin_ppr_ao_column2(i int) USING ao_column;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_column2 USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_column2_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

CREATE TABLE brin_ppr_ao_column3(i int) USING ao_column;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_ao_column3 USING brin(i) WITH (autosummarize=false);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_column3_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

-- Test ALTERing pages_per_range
-- Use REINDEX too as pages_per_range change won't go into effect until next reindex
ALTER INDEX brin_ppr_heap1_i_idx SET (pages_per_range=16);
REINDEX INDEX brin_ppr_heap1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_heap1_i_idx', 0));
 pagesperrange 
---------------
            16
(1 row)

ALTER INDEX brin_ppr_heap1_i_idx RESET (pages_per_range);
REINDEX INDEX brin_ppr_heap1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_heap1_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

ALTER INDEX brin_ppr_ao_row1_i_idx SET (pages_per_range=16);
REINDEX INDEX brin_ppr_ao_row1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_row1_i_idx', 0));
 pagesperrange 
---------------
            16
(1 row)

ALTER INDEX brin_ppr_ao_row1_i_idx RESET (pages_per_range);
REINDEX INDEX brin_ppr_ao_row1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_row1_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

ALTER INDEX brin_ppr_ao_column1_i_idx SET (pages_per_range=16);
REINDEX INDEX brin_ppr_ao_column1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_column1_i_idx', 0));
 pagesperrange 
---------------
            16
(1 row)

ALTER INDEX brin_ppr_ao_column1_i_idx RESET (pages_per_range);
REINDEX INDEX brin_ppr_ao_column1_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_ao_column1_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

-- ALTERIng the ACCESS METHOD of the table should gracefully set the default
-- pages_per_range for the associated BRIN index.
CREATE TABLE brin_ppr_atsetam(i int) USING heap;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE INDEX ON brin_ppr_atsetam USING brin(i);
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_atsetam_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

ALTER TABLE brin_ppr_atsetam SET ACCESS METHOD ao_row;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_atsetam_i_idx', 0));
 pagesperrange 
---------------
             1
(1 row)

ALTER TABLE brin_ppr_atsetam SET ACCESS METHOD heap;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_atsetam_i_idx', 0));
 pagesperrange 
---------------
            32
(1 row)

-- ALTERing the ACCESS METHOD of the table should NOT set the default
-- pages_per_range if the index had a pages_per_range set.
ALTER INDEX brin_ppr_atsetam_i_idx SET (pages_per_range=8);
REINDEX INDEX brin_ppr_atsetam_i_idx;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_atsetam_i_idx', 0));
 pagesperrange 
---------------
             8
(1 row)

ALTER TABLE brin_ppr_atsetam SET ACCESS METHOD ao_row;
SELECT pagesperrange FROM brin_metapage_info(get_raw_page('brin_ppr_atsetam_i_idx', 0));
 pagesperrange 
---------------
             8
(1 row)

