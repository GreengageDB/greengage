-- start_matchsubs
-- m/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/
-- s/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/(actual time=##.###..##.### rows=# loops=#)/
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes\./
-- s/Executor memory: (\d+)\w bytes\./Executor memory: (#####)K bytes./
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./
-- s/Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./Executor memory: ####K bytes avg x #### workers, ####K bytes max (seg#)./
-- m/Work_mem: \d+\w bytes max\./
-- s/Work_mem: \d+\w bytes max\. */Work_mem: ###K bytes max./
-- m/Execution time: \d+\.\d+ ms/
-- s/Execution time: \d+\.\d+ ms/Execution time: ##.### ms/
-- m/Planning time: \d+\.\d+ ms/
-- s/Planning time: \d+\.\d+ ms/Planning time: ##.### ms/
-- m/cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+/
-- s/\(cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+\)/(cost=##.###..##.### rows=### width=###)/
-- m/Memory used:  \d+\w?B/
-- s/Memory used:  \d+\w?B/Memory used: ###B/
-- end_matchsubs
--
-- DEFAULT syntax
CREATE TABLE apples(id int PRIMARY KEY, type text);
INSERT INTO apples(id) SELECT generate_series(1, 100000);
CREATE TABLE box_locations(id int PRIMARY KEY, address text);
CREATE TABLE boxes(id int PRIMARY KEY, apple_id int REFERENCES apples(id), location_id int REFERENCES box_locations(id));
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
--- Check Explain Text format output
-- explain_processing_off
EXPLAIN SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..449.00 rows=3 width=28)
   ->  Nested Loop Left Join  (cost=0.00..449.00 rows=1 width=28)
         Join Filter: true
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..437.00 rows=1 width=16)
               Hash Key: boxes.location_id
               ->  Nested Loop Left Join  (cost=0.00..437.00 rows=1 width=16)
                     Join Filter: true
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
                           Hash Key: boxes.apple_id
                           ->  Seq Scan on boxes  (cost=0.00..431.00 rows=1 width=12)
                     ->  Index Scan using apples_pkey on apples  (cost=0.00..6.00 rows=1 width=4)
                           Index Cond: (id = boxes.apple_id)
         ->  Index Scan using box_locations_pkey on box_locations  (cost=0.00..12.00 rows=1 width=12)
               Index Cond: (id = boxes.location_id)
 Optimizer: Pivotal Optimizer (GPORCA)
(15 rows)

-- explain_processing_on
--- Check Explain Analyze Text output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=0.00..449.00 rows=3 width=28) (actual time=2.297..2.297 rows=0 loops=1)
   ->  Nested Loop Left Join  (cost=0.00..449.00 rows=1 width=28) (actual time=0.000..1.899 rows=0 loops=1)
         Join Filter: true
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..437.00 rows=1 width=16) (actual time=0.000..1.895 rows=0 loops=1)
               Hash Key: boxes.location_id
               ->  Nested Loop Left Join  (cost=0.00..437.00 rows=1 width=16) (actual time=0.000..0.322 rows=0 loops=1)
                     Join Filter: true
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12) (actual time=0.000..0.320 rows=0 loops=1)
                           Hash Key: boxes.apple_id
                           ->  Seq Scan on boxes  (cost=0.00..431.00 rows=1 width=12) (actual time=0.000..0.002 rows=0 loops=1)
                     ->  Index Scan using apples_pkey on apples  (cost=0.00..6.00 rows=1 width=4) (never executed)
                           Index Cond: (id = boxes.apple_id)
         ->  Index Scan using box_locations_pkey on box_locations  (cost=0.00..12.00 rows=1 width=12) (never executed)
               Index Cond: (id = boxes.location_id)
 Planning time: 14.784 ms
   (slice0)    Executor memory: 192K bytes.
   (slice1)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice2)    Executor memory: 96K bytes avg x 3 workers, 96K bytes max (seg0).
   (slice3)    Executor memory: 96K bytes avg x 3 workers, 96K bytes max (seg0).
   (slice4)    
   (slice5)    
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 23.433 ms
(24 rows)

-- explain_processing_on
-- Unaligned output format is better for the YAML / XML / JSON outputs.
-- In aligned format, you have end-of-line markers at the end of each line,
-- and its position depends on the longest line. If the width changes, all
-- lines need to be adjusted for the moved end-of-line-marker.
\a
-- YAML Required replaces for costs and time changes
-- start_matchsubs
-- m/ Loops: \d+/
-- s/ Loops: \d+/ Loops: #/
-- m/ Cost: \d+\.\d+/
-- s/ Cost: \d+\.\d+/ Cost: ###.##/
-- m/ Rows: \d+/
-- s/ Rows: \d+/ Rows: #####/
-- m/ Plan Width: \d+/
-- s/ Plan Width: \d+/ Plan Width: ##/
-- m/ Time: \d+\.\d+/
-- s/ Time: \d+\.\d+/ Time: ##.###/
-- m/Execution Time: \d+\.\d+/
-- s/Execution Time: \d+\.\d+/Execution Time: ##.###/
-- m/Segments: \d+/
-- s/Segments: \d+/Segments: #/
-- m/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+",?/
-- s/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+",?/Pivotal Optimizer \(GPORCA\)"/
-- m/ Memory: \d+/
-- s/ Memory: \d+/ Memory: ###/
-- m/Maximum Memory Used: \d+/
-- s/Maximum Memory Used: \d+/Maximum Memory Used: ###/
-- m/Workers: \d+/
-- s/Workers: \d+/Workers: ##/
-- m/Average: \d+/
-- s/Average: \d+/Average: ##/
-- m/Total memory used across slices: \d+/
-- s/Total memory used across slices: \d+\s*/Total memory used across slices: ###/
-- m/Memory used: \d+/
-- s/Memory used: \d+/Memory used: ###/
-- end_matchsubs
-- Check Explain YAML output
EXPLAIN (FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 0.00
    Total Cost: 449.00
    Plan Rows: 3
    Plan Width: 28
    Plans: 
      - Node Type: "Nested Loop"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 0.00
        Total Cost: 449.00
        Plan Rows: 3
        Plan Width: 28
        Join Filter: "true"
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 0.00
            Total Cost: 437.00
            Plan Rows: 2
            Plan Width: 16
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Nested Loop"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Left"
                Startup Cost: 0.00
                Total Cost: 437.00
                Plan Rows: 2
                Plan Width: 16
                Join Filter: "true"
                Plans: 
                  - Node Type: "Redistribute Motion"
                    Senders: 3
                    Receivers: 3
                    Parent Relationship: "Outer"
                    Slice: 1
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 0.00
                    Total Cost: 431.00
                    Plan Rows: 1
                    Plan Width: 12
                    Hash Key: "boxes.apple_id"
                    Plans: 
                      - Node Type: "Seq Scan"
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Relation Name: "boxes"
                        Alias: "boxes"
                        Startup Cost: 0.00
                        Total Cost: 431.00
                        Plan Rows: 1
                        Plan Width: 12
                  - Node Type: "Index Scan"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Scan Direction: "Forward"
                    Index Name: "apples_pkey"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 6.00
                    Plan Rows: 1
                    Plan Width: 4
                    Index Cond: "(id = boxes.apple_id)"
          - Node Type: "Index Scan"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Scan Direction: "Forward"
            Index Name: "box_locations_pkey"
            Relation Name: "box_locations"
            Alias: "box_locations"
            Startup Cost: 0.00
            Total Cost: 12.00
            Plan Rows: 0
            Plan Width: 12
            Index Cond: "(id = boxes.location_id)"
  Settings: 
    Optimizer: "Pivotal Optimizer (GPORCA)"
(1 row)
--- Check Explain Analyze YAML output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE, FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 0.00
    Total Cost: 449.00
    Plan Rows: 3
    Plan Width: 28
    Actual Startup Time: 2.753
    Actual Total Time: 2.753
    Actual Rows: 0
    Actual Loops: 1
    Plans: 
      - Node Type: "Nested Loop"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 0.00
        Total Cost: 449.00
        Plan Rows: 3
        Plan Width: 28
        Actual Startup Time: 0.000
        Actual Total Time: 0.000
        Actual Rows: 0
        Actual Loops: 0
        Join Filter: "true"
        Rows Removed by Join Filter: 0
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 0.00
            Total Cost: 437.00
            Plan Rows: 2
            Plan Width: 16
            Actual Startup Time: 0.000
            Actual Total Time: 0.000
            Actual Rows: 0
            Actual Loops: 0
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Nested Loop"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Left"
                Startup Cost: 0.00
                Total Cost: 437.00
                Plan Rows: 2
                Plan Width: 16
                Actual Startup Time: 0.000
                Actual Total Time: 0.000
                Actual Rows: 0
                Actual Loops: 0
                Join Filter: "true"
                Rows Removed by Join Filter: 0
                Plans: 
                  - Node Type: "Redistribute Motion"
                    Senders: 3
                    Receivers: 3
                    Parent Relationship: "Outer"
                    Slice: 1
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 0.00
                    Total Cost: 431.00
                    Plan Rows: 1
                    Plan Width: 12
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.000
                    Actual Rows: 0
                    Actual Loops: 0
                    Hash Key: "boxes.apple_id"
                    Plans: 
                      - Node Type: "Seq Scan"
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Relation Name: "boxes"
                        Alias: "boxes"
                        Startup Cost: 0.00
                        Total Cost: 431.00
                        Plan Rows: 1
                        Plan Width: 12
                        Actual Startup Time: 0.000
                        Actual Total Time: 0.000
                        Actual Rows: 0
                        Actual Loops: 0
                  - Node Type: "Index Scan"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Scan Direction: "Forward"
                    Index Name: "apples_pkey"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 6.00
                    Plan Rows: 1
                    Plan Width: 4
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.000
                    Actual Rows: 0
                    Actual Loops: 0
                    Index Cond: "(id = boxes.apple_id)"
                    Rows Removed by Index Recheck: 0
          - Node Type: "Index Scan"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Scan Direction: "Forward"
            Index Name: "box_locations_pkey"
            Relation Name: "box_locations"
            Alias: "box_locations"
            Startup Cost: 0.00
            Total Cost: 12.00
            Plan Rows: 0
            Plan Width: 12
            Actual Startup Time: 0.000
            Actual Total Time: 0.000
            Actual Rows: 0
            Actual Loops: 0
            Index Cond: "(id = boxes.location_id)"
            Rows Removed by Index Recheck: 0
  Planning Time: 14.827
  Triggers: 
  Slice statistics: 
    - Slice: 0
      Executor Memory: 195920
    - Slice: 1
      Executor Memory: 
        Average: 60584
        Workers: 3
        Maximum Memory Used: 60584
    - Slice: 2
      Executor Memory: 
        Average: 97448
        Workers: 3
        Maximum Memory Used: 97448
    - Slice: 3
      Executor Memory: 
        Average: 97448
        Workers: 3
        Maximum Memory Used: 97448
    - Slice: 4
    - Slice: 5
  Statement statistics: 
    Memory used: 128000
  Settings: 
    Optimizer: "Pivotal Optimizer (GPORCA)"
  Execution Time: 3.332
(1 row)
-- explain_processing_on
--
-- Test a simple case with JSON and XML output, too.
--
-- This should be enough for those format. The only difference between JSON,
-- XML, and YAML is in the formatting, after all.
-- Check JSON format
--
-- start_matchsubs
-- m/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+/
-- s/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+/Pivotal Optimizer \(GPORCA\)/
-- end_matchsubs
-- explain_processing_off
EXPLAIN (FORMAT JSON, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Function Scan",
      "Function Name": "generate_series",
      "Alias": "generate_series"
    },
    "Settings": {
      "Optimizer": "Pivotal Optimizer (GPORCA)"
    }
  }
]
(1 row)
EXPLAIN (FORMAT XML, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
<explain xmlns="http://www.postgresql.org/2009/explain">
  <Query>
    <Plan>
      <Node-Type>Function Scan</Node-Type>
      <Function-Name>generate_series</Function-Name>
      <Alias>generate_series</Alias>
    </Plan>
    <Settings>
      <Optimizer>Pivotal Optimizer (GPORCA)</Optimizer>
    </Settings>
  </Query>
</explain>
(1 row)
-- Test for an old bug in printing Sequence nodes in JSON/XML format
-- (https://github.com/greenplum-db/gpdb/issues/9410)
CREATE TABLE jsonexplaintest (i int4) PARTITION BY RANGE (i) (START(1) END(3) EVERY(1));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "jsonexplaintest_1_prt_1" for table "jsonexplaintest"
NOTICE:  CREATE TABLE will create partition "jsonexplaintest_1_prt_2" for table "jsonexplaintest"
EXPLAIN (FORMAT JSON, COSTS OFF) SELECT * FROM jsonexplaintest WHERE i = 2;
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 1,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 1,
      "Gang Type": "primary reader",
      "Plans": [
        {
          "Node Type": "Sequence",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 1,
          "Gang Type": "primary reader",
          "Plans": [
            {
              "Node Type": "Partition Selector",
              "Parent Relationship": "Member",
              "Slice": 1,
              "Segments": 1,
              "Gang Type": "primary reader",
              "Relation": "jsonexplaintest",
              "Dynamic Scan Id": 1,
              "Partitions selected": "1 (out of 2)"
            },
            {
              "Node Type": "Dynamic Seq Scan",
              "Parent Relationship": "Member",
              "Slice": 1,
              "Segments": 1,
              "Gang Type": "primary reader",
              "Relation Name": "jsonexplaintest",
              "Alias": "jsonexplaintest",
              "Dynamic Scan Id": 1,
              "Filter": "(i = 2)"
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Pivotal Optimizer (GPORCA)"
    }
  }
]
(1 row)
-- explain_processing_on
-- Test for github issue #9359
--
-- The plan contains an Agg and a Hash node on top of each other, neither of
-- which have a plan->flow set. Explain should be able to dig the flow from
-- the grandchild node then.
CREATE SCHEMA explaintest;
SET search_path=explaintest;
CREATE TABLE SUBSELECT_TBL (
  f1 integer,
  f2 integer,
  f3 float
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
explain (format json) SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE
    f2 IN (SELECT f1 FROM SUBSELECT_TBL));
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Result",
      "Slice": 0,
      "Segments": 0,
      "Gang Type": "unallocated",
      "Startup Cost": 0.00,
      "Total Cost": 1293.00,
      "Plan Rows": 1,
      "Plan Width": 12,
      "Plans": [
        {
          "Node Type": "Gather Motion",
          "Senders": 3,
          "Receivers": 1,
          "Parent Relationship": "Outer",
          "Slice": 2,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Startup Cost": 0.00,
          "Total Cost": 1293.00,
          "Plan Rows": 1,
          "Plan Width": 4,
          "Plans": [
            {
              "Node Type": "Hash Join",
              "Parent Relationship": "Outer",
              "Slice": 2,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Join Type": "Semi",
              "Startup Cost": 0.00,
              "Total Cost": 1293.00,
              "Plan Rows": 1,
              "Plan Width": 4,
              "Hash Cond": "(subselect_tbl.f1 = subselect_tbl_1.f2)",
              "Plans": [
                {
                  "Node Type": "Seq Scan",
                  "Parent Relationship": "Outer",
                  "Slice": 2,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Relation Name": "subselect_tbl",
                  "Alias": "subselect_tbl",
                  "Startup Cost": 0.00,
                  "Total Cost": 431.00,
                  "Plan Rows": 1,
                  "Plan Width": 4
                },
                {
                  "Node Type": "Hash",
                  "Parent Relationship": "Inner",
                  "Slice": 2,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Startup Cost": 862.00,
                  "Total Cost": 862.00,
                  "Plan Rows": 1,
                  "Plan Width": 4,
                  "Plans": [
                    {
                      "Node Type": "Hash Join",
                      "Parent Relationship": "Outer",
                      "Slice": 2,
                      "Segments": 3,
                      "Gang Type": "primary reader",
                      "Join Type": "Inner",
                      "Startup Cost": 0.00,
                      "Total Cost": 862.00,
                      "Plan Rows": 1,
                      "Plan Width": 4,
                      "Hash Cond": "(subselect_tbl_1.f2 = subselect_tbl_2.f1)",
                      "Plans": [
                        {
                          "Node Type": "Redistribute Motion",
                          "Senders": 3,
                          "Receivers": 3,
                          "Parent Relationship": "Outer",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Startup Cost": 0.00,
                          "Total Cost": 431.00,
                          "Plan Rows": 1,
                          "Plan Width": 4,
                          "Hash Key": "subselect_tbl_1.f2",
                          "Plans": [
                            {
                              "Node Type": "Seq Scan",
                              "Parent Relationship": "Outer",
                              "Slice": 1,
                              "Segments": 3,
                              "Gang Type": "primary reader",
                              "Relation Name": "subselect_tbl",
                              "Alias": "subselect_tbl_1",
                              "Startup Cost": 0.00,
                              "Total Cost": 431.00,
                              "Plan Rows": 1,
                              "Plan Width": 4
                            }
                          ]
                        },
                        {
                          "Node Type": "Hash",
                          "Parent Relationship": "Inner",
                          "Slice": 2,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Startup Cost": 431.00,
                          "Total Cost": 431.00,
                          "Plan Rows": 1,
                          "Plan Width": 4,
                          "Plans": [
                            {
                              "Node Type": "Aggregate",
                              "Strategy": "Sorted",
                              "Parent Relationship": "Outer",
                              "Slice": 2,
                              "Segments": 3,
                              "Gang Type": "primary reader",
                              "Startup Cost": 0.00,
                              "Total Cost": 431.00,
                              "Plan Rows": 1,
                              "Plan Width": 4,
                              "Group Key": ["subselect_tbl_2.f1"],
                              "Plans": [
                                {
                                  "Node Type": "Sort",
                                  "Parent Relationship": "Outer",
                                  "Slice": 2,
                                  "Segments": 3,
                                  "Gang Type": "primary reader",
                                  "Startup Cost": 0.00,
                                  "Total Cost": 431.00,
                                  "Plan Rows": 1,
                                  "Plan Width": 4,
                                  "Sort Key": ["subselect_tbl_2.f1"],
                                  "Plans": [
                                    {
                                      "Node Type": "Seq Scan",
                                      "Parent Relationship": "Outer",
                                      "Slice": 2,
                                      "Segments": 3,
                                      "Gang Type": "primary reader",
                                      "Relation Name": "subselect_tbl",
                                      "Alias": "subselect_tbl_2",
                                      "Startup Cost": 0.00,
                                      "Total Cost": 431.00,
                                      "Plan Rows": 1,
                                      "Plan Width": 4
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Pivotal Optimizer (GPORCA) version 3.87.0"
    }
  }
]
(1 row)
-- Test for similar bug of missing flow with bitmap index scan.
-- (github issue #9404).
CREATE INDEX ss_f1 on SUBSELECT_TBL(f1);
begin;
set local enable_seqscan=off;
set local enable_indexscan=off;
set local enable_bitmapscan=on;
explain (format json, costs off) select * from subselect_tbl where f1 < 10;
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Plans": [
        {
          "Node Type": "Index Scan",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Scan Direction": "Forward",
          "Index Name": "ss_f1",
          "Relation Name": "subselect_tbl",
          "Alias": "subselect_tbl",
          "Index Cond": "(f1 < 10)"
        }
      ]
    },
    "Settings": {
      "Optimizer": "Pivotal Optimizer (GPORCA) version 3.87.0"
    }
  }
]
(1 row)
commit;
-- Yet another variant, with missing flow in Append. (github issue #9819)
create table subselect_tbl_child() INHERITS (subselect_tbl);
NOTICE:  table has parent, setting distribution columns to match parent table
explain (verbose, format json) select * from (select * from subselect_tbl) p where f1 in (select f1 from subselect_tbl where f2 >= 19);
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Startup Cost": 2118.50,
      "Total Cost": 4984.75,
      "Plan Rows": 71100,
      "Plan Width": 16,
      "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"],
      "Plans": [
        {
          "Node Type": "Hash Join",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Join Type": "Inner",
          "Startup Cost": 2118.50,
          "Total Cost": 4984.75,
          "Plan Rows": 71100,
          "Plan Width": 16,
          "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"],
          "Hash Cond": "(subselect_tbl.f1 = subselect_tbl_1.f1)",
          "Plans": [
            {
              "Node Type": "Append",
              "Parent Relationship": "Outer",
              "Slice": 1,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Startup Cost": 0.00,
              "Total Cost": 1622.00,
              "Plan Rows": 142200,
              "Plan Width": 16,
              "Plans": [
                {
                  "Node Type": "Seq Scan",
                  "Parent Relationship": "Member",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Relation Name": "subselect_tbl",
                  "Schema": "explaintest",
                  "Alias": "subselect_tbl",
                  "Startup Cost": 0.00,
                  "Total Cost": 811.00,
                  "Plan Rows": 71100,
                  "Plan Width": 16,
                  "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"]
                },
                {
                  "Node Type": "Seq Scan",
                  "Parent Relationship": "Member",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Relation Name": "subselect_tbl_child",
                  "Schema": "explaintest",
                  "Alias": "subselect_tbl_child",
                  "Startup Cost": 0.00,
                  "Total Cost": 811.00,
                  "Plan Rows": 71100,
                  "Plan Width": 16,
                  "Output": ["subselect_tbl_child.f1", "subselect_tbl_child.f2", "subselect_tbl_child.f3"]
                }
              ]
            },
            {
              "Node Type": "Hash",
              "Parent Relationship": "Inner",
              "Slice": 1,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Startup Cost": 2106.00,
              "Total Cost": 2106.00,
              "Plan Rows": 1000,
              "Plan Width": 4,
              "Output": ["subselect_tbl_1.f1"],
              "Plans": [
                {
                  "Node Type": "Aggregate",
                  "Strategy": "Hashed",
                  "Parent Relationship": "Outer",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Startup Cost": 2096.00,
                  "Total Cost": 2106.00,
                  "Plan Rows": 1000,
                  "Plan Width": 4,
                  "Output": ["subselect_tbl_1.f1"],
                  "Group Key": ["subselect_tbl_1.f1"],
                  "Plans": [
                    {
                      "Node Type": "Append",
                      "Parent Relationship": "Outer",
                      "Slice": 1,
                      "Segments": 3,
                      "Gang Type": "primary reader",
                      "Startup Cost": 0.00,
                      "Total Cost": 1977.50,
                      "Plan Rows": 47400,
                      "Plan Width": 4,
                      "Plans": [
                        {
                          "Node Type": "Seq Scan",
                          "Parent Relationship": "Member",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Relation Name": "subselect_tbl",
                          "Schema": "explaintest",
                          "Alias": "subselect_tbl_1",
                          "Startup Cost": 0.00,
                          "Total Cost": 988.75,
                          "Plan Rows": 23700,
                          "Plan Width": 4,
                          "Output": ["subselect_tbl_1.f1"],
                          "Filter": "(subselect_tbl_1.f2 >= 19)"
                        },
                        {
                          "Node Type": "Seq Scan",
                          "Parent Relationship": "Member",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Relation Name": "subselect_tbl_child",
                          "Schema": "explaintest",
                          "Alias": "subselect_tbl_child_1",
                          "Startup Cost": 0.00,
                          "Total Cost": 988.75,
                          "Plan Rows": 23700,
                          "Plan Width": 4,
                          "Output": ["subselect_tbl_child_1.f1"],
                          "Filter": "(subselect_tbl_child_1.f2 >= 19)"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer",
      "Settings": ["optimizer=on"]
    }
  }
]
(1 row)
-- Cleanup
RESET search_path;
DROP SCHEMA explaintest cascade;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table explaintest.subselect_tbl
drop cascades to table explaintest.subselect_tbl_child
DROP TABLE boxes;
DROP TABLE apples;
DROP TABLE box_locations;
DROP TABLE jsonexplaintest;
