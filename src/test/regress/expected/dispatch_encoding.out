-- More tests related to dispatching and QD->QE communication.
--
-- Test buildGpQueryString of cdbdisp_query.c truncates a query longer than QUERY_STRING_TRUNCATE_SIZE and containing
-- multi-byte symbols properly
--
set log_min_duration_statement to 0;
create table truncate_test ("–∫–æ–ª–æ–Ω–∫–∞ 1" int, "–∫–æ–ª–æ–Ω–∫–∞ 2" int, "–∫–æ–ª–æ–Ω–∫–∞ 3" int, "–∫–æ–ª–æ–Ω–∫–∞ 4" int, "–∫–æ–ª–æ–Ω–∫–∞ 5" int,
"–∫–æ–ª–æ–Ω–∫–∞ 6" int, "–∫–æ–ª–æ–Ω–∫–∞ 7" int, "–∫–æ–ª–æ–Ω–∫–∞ 8" int, "–∫–æ–ª–æ–Ω–∫–∞ 9" int, "–∫–æ–ª–æ–Ω–∫–∞ 10" int, "–∫–æ–ª–æ–Ω–∫–∞ 11" int,
"–∫–æ–ª–æ–Ω–∫–∞ 12" int, "–∫–æ–ª–æ–Ω–∫–∞ 13" int, "–∫–æ–ª–æ–Ω–∫–∞ 14" int, "–∫–æ–ª–æ–Ω–∫–∞ 15" int, "–∫–æ–ª–æ–Ω–∫–∞ 16" int, "–∫–æ–ª–æ–Ω–∫–∞ 17" int,
"–∫–æ–ª–æ–Ω–∫–∞ 18" int, "–∫–æ–ª–æ–Ω–∫–∞ 19" int, "–∫–æ–ª–æ–Ω–∫–∞ 20" int, "–∫–æ–ª–æ–Ω–∫–∞ 21" int, "–∫–æ–ª–æ–Ω–∫–∞ 22" int, "–∫–æ–ª–æ–Ω–∫–∞ 23" int,
"–∫–æ–ª–æ–Ω–∫–∞ 24" int, "–∫–æ–ª–æ–Ω–∫–∞ 25" int, "–∫–æ–ª–æ–Ω–∫–∞ 26" int, "–∫–æ–ª–æ–Ω–∫–∞ 27" int, "–∫–æ–ª–æ–Ω–∫–∞ 28" int, "–∫–æ–ª–æ–Ω–∫–∞ 29" int,
"–∫–æ–ª–æ–Ω–∫–∞ 30" int, "–∫–æ–ª–æ–Ω–∫–∞ 31" int, "–∫–æ–ª–æ–Ω–∫–∞ 32" int, "–∫–æ–ª–æ–Ω–∫–∞ 33" int, "–∫–æ–ª–æ–Ω–∫–∞ 34" int, "–∫–æ–ª–æ–Ω–∫–∞ 35" int,
"–∫–æ–ª–æ–Ω–∫–∞ 36" int, "–∫–æ–ª–æ–Ω–∫–∞ 37" int, "–∫–æ–ª–æ–Ω–∫–∞ 38" int, "–∫–æ–ª–æ–Ω–∫–∞ 39" int, "–∫–æ–ª–æ–Ω–∫–∞ 40" int, "–æ—Å–æ–±–∞—è –∫–æ–ª–æ–Ω–∫–∞" int);
select logdebug from gp_toolkit.__gp_log_segment_ext where logdebug ilike
'%create table truncate_test%' and logdebug not ilike '%gp_toolkit.__gp_log_segment_ext%' order by logtime desc limit 1;
                                                     logdebug                                                     
------------------------------------------------------------------------------------------------------------------
 create table truncate_test ("–∫–æ–ª–æ–Ω–∫–∞ 1" int, "–∫–æ–ª–æ–Ω–∫–∞ 2" int, "–∫–æ–ª–æ–Ω–∫–∞ 3" int, "–∫–æ–ª–æ–Ω–∫–∞ 4" int, "–∫–æ–ª–æ–Ω–∫–∞ 5" int,+
 "–∫–æ–ª–æ–Ω–∫–∞ 6" int, "–∫–æ–ª–æ–Ω–∫–∞ 7" int, "–∫–æ–ª–æ–Ω–∫–∞ 8" int, "–∫–æ–ª–æ–Ω–∫–∞ 9" int, "–∫–æ–ª–æ–Ω–∫–∞ 10" int, "–∫–æ–ª–æ–Ω–∫–∞ 11" int,         +
 "–∫–æ–ª–æ–Ω–∫–∞ 12" int, "–∫–æ–ª–æ–Ω–∫–∞ 13" int, "–∫–æ–ª–æ–Ω–∫–∞ 14" int, "–∫–æ–ª–æ–Ω–∫–∞ 15" int, "–∫–æ–ª–æ–Ω–∫–∞ 16" int, "–∫–æ–ª–æ–Ω–∫–∞ 17" int,     +
 "–∫–æ–ª–æ–Ω–∫–∞ 18" int, "–∫–æ–ª–æ–Ω–∫–∞ 19" int, "–∫–æ–ª–æ–Ω–∫–∞ 20" int, "–∫–æ–ª–æ–Ω–∫–∞ 21" int, "–∫–æ–ª–æ–Ω–∫–∞ 22" int, "–∫–æ–ª–æ–Ω–∫–∞ 23" int,     +
 "–∫–æ–ª–æ–Ω–∫–∞ 24" int, "–∫–æ–ª–æ–Ω–∫–∞ 25" int, "–∫–æ–ª–æ–Ω–∫–∞ 26" int, "–∫–æ–ª–æ–Ω–∫–∞ 27" int, "–∫–æ–ª–æ–Ω–∫–∞ 28" int, "–∫–æ–ª–æ–Ω–∫–∞ 29" int,     +
 "–∫–æ–ª–æ–Ω–∫–∞ 30" int, "–∫–æ–ª–æ–Ω–∫–∞ 31" int, "–∫–æ–ª–æ–Ω–∫–∞ 32" int, "–∫–æ–ª–æ–Ω–∫–∞ 33" int, "–∫–æ–ª–æ–Ω–∫–∞ 34" int, "–∫–æ–ª–æ–Ω–∫–∞ 35" int,     +
 "–∫–æ–ª–æ–Ω–∫–∞ 36" int, "–∫–æ–ª–æ–Ω–∫–∞ 37" int, "–∫–æ–ª–æ–Ω–∫–∞ 38" int, "–∫–æ–ª–æ–Ω–∫–∞ 39" int, "–∫–æ–ª–æ–Ω–∫–∞ 40" int, "–æ
(1 row)

drop table truncate_test;
reset log_min_duration_statement;
--
-- Test that error messages come out correctly, with non-default
-- client_encoding. (This test assumes that the regression database does
-- *not* use latin1, otherwise this doesn't test anything interesting.)
--
set client_encoding='utf8';
create function raise_notice(t text) returns void as $$
begin
  raise notice 'raise_notice called on "%"', t;
end;
$$ language plpgsql;
create function raise_error(t text) returns void as $$
begin
  raise 'raise_error called on "%"', t;
end;
$$ language plpgsql;
create table enctest(t text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 't' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- Unicode code point 196 is "Latin Capital Letter a with Diaeresis".
insert into enctest values ('funny char ' || chr(196));
select raise_notice(t) from enctest;
NOTICE:  raise_notice called on "funny char √Ñ"  (seg2 slice1 127.0.0.1:40002 pid=30772)
 raise_notice 
--------------
 
(1 row)

select raise_error(t) from enctest;
ERROR:  raise_error called on "funny char √Ñ"  (seg2 slice1 127.0.0.1:40002 pid=30772)
-- now do it again with latin1
set client_encoding='latin1';
select raise_notice(t) from enctest;
NOTICE:  raise_notice called on "funny char ƒ"  (seg2 slice1 127.0.0.1:40002 pid=30772)
 raise_notice 
--------------
 
(1 row)

select raise_error(t) from enctest;
ERROR:  raise_error called on "funny char ƒ"  (seg2 slice1 127.0.0.1:40002 pid=30772)
