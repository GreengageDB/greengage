-- start_matchsubs
-- m/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/
-- s/\(actual time=\d+\.\d+..\d+\.\d+ rows=\d+ loops=\d+\)/(actual time=##.###..##.### rows=# loops=#)/
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes\./
-- s/Executor memory: (\d+)\w bytes\./Executor memory: (#####)K bytes./
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./
-- s/Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./Executor memory: ####K bytes avg x #### workers, ####K bytes max (seg#)./
-- m/Work_mem: \d+\w bytes max\./
-- s/Work_mem: \d+\w bytes max\. */Work_mem: ###K bytes max./
-- m/Execution time: \d+\.\d+ ms/
-- s/Execution time: \d+\.\d+ ms/Execution time: ##.### ms/
-- m/Planning time: \d+\.\d+ ms/
-- s/Planning time: \d+\.\d+ ms/Planning time: ##.### ms/
-- m/cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+/
-- s/\(cost=\d+\.\d+\.\.\d+\.\d+ rows=\d+ width=\d+\)/(cost=##.###..##.### rows=### width=###)/
-- m/Memory used:  \d+\w?B/
-- s/Memory used:  \d+\w?B/Memory used: ###B/
-- end_matchsubs
--
-- DEFAULT syntax
CREATE TABLE apples(id int PRIMARY KEY, type text);
INSERT INTO apples(id) SELECT generate_series(1, 100000);
CREATE TABLE box_locations(id int PRIMARY KEY, address text);
CREATE TABLE boxes(id int PRIMARY KEY, apple_id int REFERENCES apples(id), location_id int REFERENCES box_locations(id));
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greenplum Database, will not be enforced
--- Check Explain Text format output
-- explain_processing_off
EXPLAIN SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=4626.75..9520.88 rows=77900 width=84)
   ->  Hash Left Join  (cost=4626.75..9520.88 rows=25967 width=84)
         Hash Cond: (boxes.location_id = box_locations.id)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=3410.75..7233.75 rows=25967 width=48)
               Hash Key: boxes.location_id
               ->  Hash Right Join  (cost=3410.75..5675.75 rows=25967 width=48)
                     Hash Cond: (apples.id = boxes.apple_id)
                     ->  Seq Scan on apples  (cost=0.00..1111.00 rows=33334 width=36)
                     ->  Hash  (cost=2437.00..2437.00 rows=25967 width=12)
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..2437.00 rows=25967 width=12)
                                 Hash Key: boxes.apple_id
                                 ->  Seq Scan on boxes  (cost=0.00..879.00 rows=25967 width=12)
         ->  Hash  (cost=596.00..596.00 rows=16534 width=36)
               ->  Seq Scan on box_locations  (cost=0.00..596.00 rows=16534 width=36)
 Optimizer: Postgres query optimizer
(15 rows)

-- explain_processing_on
--- Check Explain Analyze Text output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)  (cost=4626.75..9520.88 rows=77900 width=84) (actual time=7.762..7.762 rows=0 loops=1)
   ->  Hash Left Join  (cost=4626.75..9520.88 rows=25967 width=84) (actual time=0.000..5.279 rows=0 loops=1)
         Hash Cond: (boxes.location_id = box_locations.id)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=3410.75..7233.75 rows=25967 width=48) (actual time=0.000..3.985 rows=0 loops=1)
               Hash Key: boxes.location_id
               ->  Hash Right Join  (cost=3410.75..5675.75 rows=25967 width=48) (actual time=0.000..4.099 rows=0 loops=1)
                     Hash Cond: (apples.id = boxes.apple_id)
                     ->  Seq Scan on apples  (cost=0.00..1111.00 rows=33334 width=36) (never executed)
                     ->  Hash  (cost=2437.00..2437.00 rows=25967 width=12) (actual time=0.000..0.807 rows=0 loops=1)
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)  (cost=0.00..2437.00 rows=25967 width=12) (actual time=0.000..0.804 rows=0 loops=1)
                                 Hash Key: boxes.apple_id
                                 ->  Seq Scan on boxes  (cost=0.00..879.00 rows=25967 width=12) (actual time=0.000..0.001 rows=0 loops=1)
         ->  Hash  (cost=596.00..596.00 rows=16534 width=36) (actual time=0.000..0.009 rows=0 loops=1)
               ->  Seq Scan on box_locations  (cost=0.00..596.00 rows=16534 width=36) (actual time=0.000..0.004 rows=0 loops=1)
 Planning time: 0.791 ms
   (slice0)    Executor memory: 127K bytes.
   (slice1)    Executor memory: 60K bytes avg x 3 workers, 60K bytes max (seg0).
   (slice2)    Executor memory: 2128K bytes avg x 3 workers, 2128K bytes max (seg0).
   (slice3)    Executor memory: 1104K bytes avg x 3 workers, 1104K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 29.929 ms
(22 rows)

-- explain_processing_on
-- Unaligned output format is better for the YAML / XML / JSON outputs.
-- In aligned format, you have end-of-line markers at the end of each line,
-- and its position depends on the longest line. If the width changes, all
-- lines need to be adjusted for the moved end-of-line-marker.
\a
-- YAML Required replaces for costs and time changes
-- start_matchsubs
-- m/ Loops: \d+/
-- s/ Loops: \d+/ Loops: #/
-- m/ Cost: \d+\.\d+/
-- s/ Cost: \d+\.\d+/ Cost: ###.##/
-- m/ Rows: \d+/
-- s/ Rows: \d+/ Rows: #####/
-- m/ Plan Width: \d+/
-- s/ Plan Width: \d+/ Plan Width: ##/
-- m/ Time: \d+\.\d+/
-- s/ Time: \d+\.\d+/ Time: ##.###/
-- m/Execution Time: \d+\.\d+/
-- s/Execution Time: \d+\.\d+/Execution Time: ##.###/
-- m/Segments: \d+/
-- s/Segments: \d+/Segments: #/
-- m/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+",?/
-- s/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+",?/Pivotal Optimizer \(GPORCA\)"/
-- m/ Memory: \d+/
-- s/ Memory: \d+/ Memory: ###/
-- m/Maximum Memory Used: \d+/
-- s/Maximum Memory Used: \d+/Maximum Memory Used: ###/
-- m/Workers: \d+/
-- s/Workers: \d+/Workers: ##/
-- m/Average: \d+/
-- s/Average: \d+/Average: ##/
-- m/Total memory used across slices: \d+/
-- s/Total memory used across slices: \d+\s*/Total memory used across slices: ###/
-- m/Memory used: \d+/
-- s/Memory used: \d+/Memory used: ###/
-- end_matchsubs
-- Check Explain YAML output
EXPLAIN (FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 4626.75
    Total Cost: 9520.88
    Plan Rows: 77900
    Plan Width: 84
    Plans: 
      - Node Type: "Hash Join"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 4626.75
        Total Cost: 9520.88
        Plan Rows: 77900
        Plan Width: 84
        Hash Cond: "(boxes.location_id = box_locations.id)"
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 3410.75
            Total Cost: 7233.75
            Plan Rows: 77900
            Plan Width: 48
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Hash Join"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Right"
                Startup Cost: 3410.75
                Total Cost: 5675.75
                Plan Rows: 77900
                Plan Width: 48
                Hash Cond: "(apples.id = boxes.apple_id)"
                Plans: 
                  - Node Type: "Seq Scan"
                    Parent Relationship: "Outer"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 1111.00
                    Plan Rows: 100000
                    Plan Width: 36
                  - Node Type: "Hash"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 2437.00
                    Total Cost: 2437.00
                    Plan Rows: 77900
                    Plan Width: 12
                    Plans: 
                      - Node Type: "Redistribute Motion"
                        Senders: 3
                        Receivers: 3
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Startup Cost: 0.00
                        Total Cost: 2437.00
                        Plan Rows: 77900
                        Plan Width: 12
                        Hash Key: "boxes.apple_id"
                        Plans: 
                          - Node Type: "Seq Scan"
                            Parent Relationship: "Outer"
                            Slice: 1
                            Segments: 3
                            Gang Type: "primary reader"
                            Relation Name: "boxes"
                            Alias: "boxes"
                            Startup Cost: 0.00
                            Total Cost: 879.00
                            Plan Rows: 77900
                            Plan Width: 12
          - Node Type: "Hash"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 596.00
            Total Cost: 596.00
            Plan Rows: 49600
            Plan Width: 36
            Plans: 
              - Node Type: "Seq Scan"
                Parent Relationship: "Outer"
                Slice: 3
                Segments: 3
                Gang Type: "primary reader"
                Relation Name: "box_locations"
                Alias: "box_locations"
                Startup Cost: 0.00
                Total Cost: 596.00
                Plan Rows: 49600
                Plan Width: 36
  Settings: 
    Optimizer: "Postgres query optimizer"
(1 row)
--- Check Explain Analyze YAML output that include the slices information
-- explain_processing_off
EXPLAIN (ANALYZE, FORMAT YAML) SELECT * from boxes LEFT JOIN apples ON apples.id = boxes.apple_id LEFT JOIN box_locations ON box_locations.id = boxes.location_id;
QUERY PLAN
- Plan: 
    Node Type: "Gather Motion"
    Senders: 3
    Receivers: 1
    Slice: 3
    Segments: 3
    Gang Type: "primary reader"
    Startup Cost: 4626.75
    Total Cost: 9520.88
    Plan Rows: 77900
    Plan Width: 84
    Actual Startup Time: 7.816
    Actual Total Time: 7.816
    Actual Rows: 0
    Actual Loops: 1
    Plans: 
      - Node Type: "Hash Join"
        Parent Relationship: "Outer"
        Slice: 3
        Segments: 3
        Gang Type: "primary reader"
        Join Type: "Left"
        Startup Cost: 4626.75
        Total Cost: 9520.88
        Plan Rows: 77900
        Plan Width: 84
        Actual Startup Time: 0.000
        Actual Total Time: 0.000
        Actual Rows: 0
        Actual Loops: 0
        Hash Cond: "(boxes.location_id = box_locations.id)"
        Plans: 
          - Node Type: "Redistribute Motion"
            Senders: 3
            Receivers: 3
            Parent Relationship: "Outer"
            Slice: 2
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 3410.75
            Total Cost: 7233.75
            Plan Rows: 77900
            Plan Width: 48
            Actual Startup Time: 0.000
            Actual Total Time: 0.000
            Actual Rows: 0
            Actual Loops: 0
            Hash Key: "boxes.location_id"
            Plans: 
              - Node Type: "Hash Join"
                Parent Relationship: "Outer"
                Slice: 2
                Segments: 3
                Gang Type: "primary reader"
                Join Type: "Right"
                Startup Cost: 3410.75
                Total Cost: 5675.75
                Plan Rows: 77900
                Plan Width: 48
                Actual Startup Time: 0.000
                Actual Total Time: 0.000
                Actual Rows: 0
                Actual Loops: 0
                Hash Cond: "(apples.id = boxes.apple_id)"
                Plans: 
                  - Node Type: "Seq Scan"
                    Parent Relationship: "Outer"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Relation Name: "apples"
                    Alias: "apples"
                    Startup Cost: 0.00
                    Total Cost: 1111.00
                    Plan Rows: 100000
                    Plan Width: 36
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.000
                    Actual Rows: 0
                    Actual Loops: 0
                  - Node Type: "Hash"
                    Parent Relationship: "Inner"
                    Slice: 2
                    Segments: 3
                    Gang Type: "primary reader"
                    Startup Cost: 2437.00
                    Total Cost: 2437.00
                    Plan Rows: 77900
                    Plan Width: 12
                    Actual Startup Time: 0.000
                    Actual Total Time: 0.000
                    Actual Rows: 0
                    Actual Loops: 0
                    Plans: 
                      - Node Type: "Redistribute Motion"
                        Senders: 3
                        Receivers: 3
                        Parent Relationship: "Outer"
                        Slice: 1
                        Segments: 3
                        Gang Type: "primary reader"
                        Startup Cost: 0.00
                        Total Cost: 2437.00
                        Plan Rows: 77900
                        Plan Width: 12
                        Actual Startup Time: 0.000
                        Actual Total Time: 0.000
                        Actual Rows: 0
                        Actual Loops: 0
                        Hash Key: "boxes.apple_id"
                        Plans: 
                          - Node Type: "Seq Scan"
                            Parent Relationship: "Outer"
                            Slice: 1
                            Segments: 3
                            Gang Type: "primary reader"
                            Relation Name: "boxes"
                            Alias: "boxes"
                            Startup Cost: 0.00
                            Total Cost: 879.00
                            Plan Rows: 77900
                            Plan Width: 12
                            Actual Startup Time: 0.000
                            Actual Total Time: 0.000
                            Actual Rows: 0
                            Actual Loops: 0
          - Node Type: "Hash"
            Parent Relationship: "Inner"
            Slice: 3
            Segments: 3
            Gang Type: "primary reader"
            Startup Cost: 596.00
            Total Cost: 596.00
            Plan Rows: 49600
            Plan Width: 36
            Actual Startup Time: 0.000
            Actual Total Time: 0.000
            Actual Rows: 0
            Actual Loops: 0
            Plans: 
              - Node Type: "Seq Scan"
                Parent Relationship: "Outer"
                Slice: 3
                Segments: 3
                Gang Type: "primary reader"
                Relation Name: "box_locations"
                Alias: "box_locations"
                Startup Cost: 0.00
                Total Cost: 596.00
                Plan Rows: 49600
                Plan Width: 36
                Actual Startup Time: 0.000
                Actual Total Time: 0.000
                Actual Rows: 0
                Actual Loops: 0
  Planning Time: 0.661
  Triggers: 
  Slice statistics: 
    - Slice: 0
      Executor Memory: 130048
    - Slice: 1
      Executor Memory: 
        Average: 60584
        Workers: 3
        Maximum Memory Used: 60584
    - Slice: 2
      Executor Memory: 
        Average: 2178096
        Workers: 3
        Maximum Memory Used: 2178096
    - Slice: 3
      Executor Memory: 
        Average: 1129520
        Workers: 3
        Maximum Memory Used: 1129520
  Statement statistics: 
    Memory used: 128000
  Settings: 
    Optimizer: "Postgres query optimizer"
  Execution Time: 8.490
(1 row)
-- explain_processing_on
--
-- Test a simple case with JSON and XML output, too.
--
-- This should be enough for those format. The only difference between JSON,
-- XML, and YAML is in the formatting, after all.
-- Check JSON format
--
-- start_matchsubs
-- m/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+/
-- s/Pivotal Optimizer \(GPORCA\) version \d+\.\d+\.\d+/Pivotal Optimizer \(GPORCA\)/
-- end_matchsubs
-- explain_processing_off
EXPLAIN (FORMAT JSON, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Function Scan",
      "Function Name": "generate_series",
      "Alias": "generate_series"
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer"
    }
  }
]
(1 row)
EXPLAIN (FORMAT XML, COSTS OFF) SELECT * FROM generate_series(1, 10);
QUERY PLAN
<explain xmlns="http://www.postgresql.org/2009/explain">
  <Query>
    <Plan>
      <Node-Type>Function Scan</Node-Type>
      <Function-Name>generate_series</Function-Name>
      <Alias>generate_series</Alias>
    </Plan>
    <Settings>
      <Optimizer>Postgres query optimizer</Optimizer>
    </Settings>
  </Query>
</explain>
(1 row)
-- Test for an old bug in printing Sequence nodes in JSON/XML format
-- (https://github.com/greenplum-db/gpdb/issues/9410)
CREATE TABLE jsonexplaintest (i int4) PARTITION BY RANGE (i) (START(1) END(3) EVERY(1));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "jsonexplaintest_1_prt_1" for table "jsonexplaintest"
NOTICE:  CREATE TABLE will create partition "jsonexplaintest_1_prt_2" for table "jsonexplaintest"
EXPLAIN (FORMAT JSON, COSTS OFF) SELECT * FROM jsonexplaintest WHERE i = 2;
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 1,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 1,
      "Gang Type": "primary reader",
      "Plans": [
        {
          "Node Type": "Append",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 1,
          "Gang Type": "primary reader",
          "Plans": [
            {
              "Node Type": "Seq Scan",
              "Parent Relationship": "Member",
              "Slice": 1,
              "Segments": 1,
              "Gang Type": "primary reader",
              "Relation Name": "jsonexplaintest_1_prt_2",
              "Alias": "jsonexplaintest_1_prt_2",
              "Filter": "(i = 2)"
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer"
    }
  }
]
(1 row)
-- explain_processing_on
-- Test for github issue #9359
--
-- The plan contains an Agg and a Hash node on top of each other, neither of
-- which have a plan->flow set. Explain should be able to dig the flow from
-- the grandchild node then.
-- JSON Required replaces for costs and time changes
-- start_matchsubs
-- m/ "Startup Cost": \d+.\d+/
-- s/ "Startup Cost": \d+.\d+/ "Startup Cost": ##.###/
-- m/ "Total Cost": \d+.\d+/
-- s/ "Total Cost": \d+.\d+/ "Total Cost": ##.###/
-- m/ "Plan Rows": \d+/
-- s/ "Plan Rows": \d+/ "Plan Rows": #####/
-- m/ "Actual Startup Time": \d+.\d+/
-- s/ "Actual Startup Time": \d+.\d+/ "Actual Startup Time": ##.###/
-- m/ "Actual Total Time": \d+.\d+/
-- s/ "Actual Total Time": \d+.\d+/ "Actual Total Time": ##.###/
-- m/ "Time To First Result": "\d+(.\d+)?"/
-- s/ "Time To First Result": "\d+(.\d+)?"/ "Time To First Result": "##.###"/
-- m/ "Time To Total Result": "\d+(.\d+)?"/
-- s/ "Time To Total Result": "\d+(.\d+)?"/ "Time To Total Result": "##.###"/
-- m/ "Planning Time": \d+.\d+/
-- s/ "Planning Time": \d+.\d+/ "Planning Time": ##.###/
-- m/ "Executor Memory": \d+/
-- s/ "Executor Memory": \d+/ "Executor Memory": #####/
-- m/ "Average": \d+/
-- s/ "Average": \d+/ "Average": #####/
-- m/ "Maximum Memory Used": \d+/
-- s/ "Maximum Memory Used": \d+/ "Maximum Memory Used": #####/
-- m/ "Memory used": \d+/
-- s/ "Memory used": \d+/ "Memory used": #####/
-- m/ "Execution Time": \d+.\d+/
-- s/ "Execution Time": \d+.\d+/ "Execution Time": ##.###/
-- end_matchsubs
CREATE SCHEMA explaintest;
SET search_path=explaintest;
CREATE TABLE SUBSELECT_TBL (
  f1 integer,
  f2 integer,
  f3 float
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
explain (format json) SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE
    f2 IN (SELECT f1 FROM SUBSELECT_TBL));
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 2,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Startup Cost": 8994.54,
      "Total Cost": 10427.66,
      "Plan Rows": 35550,
      "Plan Width": 4,
      "Plans": [
        {
          "Node Type": "Hash Join",
          "Parent Relationship": "Outer",
          "Slice": 2,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Join Type": "Inner",
          "Startup Cost": 8994.54,
          "Total Cost": 10427.66,
          "Plan Rows": 35550,
          "Plan Width": 4,
          "Hash Cond": "(subselect_tbl.f1 = subselect_tbl_1.f2)",
          "Plans": [
            {
              "Node Type": "Seq Scan",
              "Parent Relationship": "Outer",
              "Slice": 2,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Relation Name": "subselect_tbl",
              "Alias": "subselect_tbl",
              "Startup Cost": 0.00,
              "Total Cost": 811.00,
              "Plan Rows": 71100,
              "Plan Width": 4
            },
            {
              "Node Type": "Hash",
              "Parent Relationship": "Inner",
              "Slice": 2,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Startup Cost": 8982.04,
              "Total Cost": 8982.04,
              "Plan Rows": 1000,
              "Plan Width": 8,
              "Plans": [
                {
                  "Node Type": "Aggregate",
                  "Strategy": "Hashed",
                  "Parent Relationship": "Outer",
                  "Slice": 2,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Startup Cost": 8972.04,
                  "Total Cost": 8982.04,
                  "Plan Rows": 1000,
                  "Plan Width": 8,
                  "Group Key": ["subselect_tbl_1.f2"],
                  "Plans": [
                    {
                      "Node Type": "Hash Join",
                      "Parent Relationship": "Outer",
                      "Slice": 2,
                      "Segments": 3,
                      "Gang Type": "primary reader",
                      "Join Type": "Semi",
                      "Startup Cost": 1699.75,
                      "Total Cost": 8883.16,
                      "Plan Rows": 35550,
                      "Plan Width": 8,
                      "Hash Cond": "(subselect_tbl_1.f2 = subselect_tbl_2.f1)",
                      "Plans": [
                        {
                          "Node Type": "Redistribute Motion",
                          "Senders": 3,
                          "Receivers": 3,
                          "Parent Relationship": "Outer",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Startup Cost": 0.00,
                          "Total Cost": 2233.00,
                          "Plan Rows": 71100,
                          "Plan Width": 4,
                          "Hash Key": "subselect_tbl_1.f2",
                          "Plans": [
                            {
                              "Node Type": "Seq Scan",
                              "Parent Relationship": "Outer",
                              "Slice": 1,
                              "Segments": 3,
                              "Gang Type": "primary reader",
                              "Relation Name": "subselect_tbl",
                              "Alias": "subselect_tbl_1",
                              "Startup Cost": 0.00,
                              "Total Cost": 811.00,
                              "Plan Rows": 71100,
                              "Plan Width": 4
                            }
                          ]
                        },
                        {
                          "Node Type": "Hash",
                          "Parent Relationship": "Inner",
                          "Slice": 2,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Startup Cost": 811.00,
                          "Total Cost": 811.00,
                          "Plan Rows": 71100,
                          "Plan Width": 4,
                          "Plans": [
                            {
                              "Node Type": "Seq Scan",
                              "Parent Relationship": "Outer",
                              "Slice": 2,
                              "Segments": 3,
                              "Gang Type": "primary reader",
                              "Relation Name": "subselect_tbl",
                              "Alias": "subselect_tbl_2",
                              "Startup Cost": 0.00,
                              "Total Cost": 811.00,
                              "Plan Rows": 71100,
                              "Plan Width": 4
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer"
    }
  }
]
(1 row)
-- Test for similar bug of missing flow with bitmap index scan.
-- (github issue #9404).
CREATE INDEX ss_f1 on SUBSELECT_TBL(f1);
begin;
set local enable_seqscan=off;
set local enable_indexscan=off;
set local enable_bitmapscan=on;
explain (format json, costs off) select * from subselect_tbl where f1 < 10;
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Plans": [
        {
          "Node Type": "Bitmap Heap Scan",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Relation Name": "subselect_tbl",
          "Alias": "subselect_tbl",
          "Recheck Cond": "(f1 < 10)",
          "Plans": [
            {
              "Node Type": "Bitmap Index Scan",
              "Parent Relationship": "Outer",
              "Slice": 1,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Index Name": "ss_f1",
              "Index Cond": "(f1 < 10)"
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer"
    }
  }
]
(1 row)
commit;
-- Yet another variant, with missing flow in Append. (github issue #9819)
create table subselect_tbl_child() INHERITS (subselect_tbl);
NOTICE:  table has parent, setting distribution columns to match parent table
explain (verbose, format json) select * from (select * from subselect_tbl) p where f1 in (select f1 from subselect_tbl where f2 >= 19);
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Startup Cost": 2118.50,
      "Total Cost": 4984.75,
      "Plan Rows": 71100,
      "Plan Width": 16,
      "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"],
      "Plans": [
        {
          "Node Type": "Hash Join",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Join Type": "Inner",
          "Startup Cost": 2118.50,
          "Total Cost": 4984.75,
          "Plan Rows": 71100,
          "Plan Width": 16,
          "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"],
          "Hash Cond": "(subselect_tbl.f1 = subselect_tbl_1.f1)",
          "Plans": [
            {
              "Node Type": "Append",
              "Parent Relationship": "Outer",
              "Slice": 1,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Startup Cost": 0.00,
              "Total Cost": 1622.00,
              "Plan Rows": 142200,
              "Plan Width": 16,
              "Plans": [
                {
                  "Node Type": "Seq Scan",
                  "Parent Relationship": "Member",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Relation Name": "subselect_tbl",
                  "Schema": "explaintest",
                  "Alias": "subselect_tbl",
                  "Startup Cost": 0.00,
                  "Total Cost": 811.00,
                  "Plan Rows": 71100,
                  "Plan Width": 16,
                  "Output": ["subselect_tbl.f1", "subselect_tbl.f2", "subselect_tbl.f3"]
                },
                {
                  "Node Type": "Seq Scan",
                  "Parent Relationship": "Member",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Relation Name": "subselect_tbl_child",
                  "Schema": "explaintest",
                  "Alias": "subselect_tbl_child",
                  "Startup Cost": 0.00,
                  "Total Cost": 811.00,
                  "Plan Rows": 71100,
                  "Plan Width": 16,
                  "Output": ["subselect_tbl_child.f1", "subselect_tbl_child.f2", "subselect_tbl_child.f3"]
                }
              ]
            },
            {
              "Node Type": "Hash",
              "Parent Relationship": "Inner",
              "Slice": 1,
              "Segments": 3,
              "Gang Type": "primary reader",
              "Startup Cost": 2106.00,
              "Total Cost": 2106.00,
              "Plan Rows": 1000,
              "Plan Width": 4,
              "Output": ["subselect_tbl_1.f1"],
              "Plans": [
                {
                  "Node Type": "Aggregate",
                  "Strategy": "Hashed",
                  "Parent Relationship": "Outer",
                  "Slice": 1,
                  "Segments": 3,
                  "Gang Type": "primary reader",
                  "Startup Cost": 2096.00,
                  "Total Cost": 2106.00,
                  "Plan Rows": 1000,
                  "Plan Width": 4,
                  "Output": ["subselect_tbl_1.f1"],
                  "Group Key": ["subselect_tbl_1.f1"],
                  "Plans": [
                    {
                      "Node Type": "Append",
                      "Parent Relationship": "Outer",
                      "Slice": 1,
                      "Segments": 3,
                      "Gang Type": "primary reader",
                      "Startup Cost": 0.00,
                      "Total Cost": 1977.50,
                      "Plan Rows": 47400,
                      "Plan Width": 4,
                      "Plans": [
                        {
                          "Node Type": "Seq Scan",
                          "Parent Relationship": "Member",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Relation Name": "subselect_tbl",
                          "Schema": "explaintest",
                          "Alias": "subselect_tbl_1",
                          "Startup Cost": 0.00,
                          "Total Cost": 988.75,
                          "Plan Rows": 23700,
                          "Plan Width": 4,
                          "Output": ["subselect_tbl_1.f1"],
                          "Filter": "(subselect_tbl_1.f2 >= 19)"
                        },
                        {
                          "Node Type": "Seq Scan",
                          "Parent Relationship": "Member",
                          "Slice": 1,
                          "Segments": 3,
                          "Gang Type": "primary reader",
                          "Relation Name": "subselect_tbl_child",
                          "Schema": "explaintest",
                          "Alias": "subselect_tbl_child_1",
                          "Startup Cost": 0.00,
                          "Total Cost": 988.75,
                          "Plan Rows": 23700,
                          "Plan Width": 4,
                          "Output": ["subselect_tbl_child_1.f1"],
                          "Filter": "(subselect_tbl_child_1.f2 >= 19)"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer",
      "Settings": ["optimizer=off"]
    }
  }
]
(1 row)
-- Test Allstats formatting
create table allstat_test(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
set gp_enable_explain_allstat=true;
explain (analyze, format json) select * from allstat_test;
QUERY PLAN
[
  {
    "Plan": {
      "Node Type": "Gather Motion",
      "Senders": 3,
      "Receivers": 1,
      "Slice": 1,
      "Segments": 3,
      "Gang Type": "primary reader",
      "Startup Cost": 0.00,
      "Total Cost": 1063.00,
      "Plan Rows": 96300,
      "Plan Width": 4,
      "Actual Startup Time": 0.333,
      "Actual Total Time": 0.333,
      "Actual Rows": 0,
      "Actual Loops": 1,
      "Plans": [
        {
          "Node Type": "Seq Scan",
          "Parent Relationship": "Outer",
          "Slice": 1,
          "Segments": 3,
          "Gang Type": "primary reader",
          "Relation Name": "allstat_test",
          "Alias": "allstat_test",
          "Startup Cost": 0.00,
          "Total Cost": 1063.00,
          "Plan Rows": 96300,
          "Plan Width": 4,
          "Actual Startup Time": 0.000,
          "Actual Total Time": 0.001,
          "Actual Rows": 0,
          "Actual Loops": 1,
          "Allstat": [
            {
              "Segment index": 0,
              "Time To First Result": "0.438",
              "Time To Total Result": "0",
              "Tuples": 0.0
            },
            {
              "Segment index": 1,
              "Time To First Result": "0.436",
              "Time To Total Result": "0.001",
              "Tuples": 0.0
            },
            {
              "Segment index": 2,
              "Time To First Result": "0.812",
              "Time To Total Result": "0.001",
              "Tuples": 0.0
            }
          ]
        }
      ]
    },
    "Planning Time": 0.310,
    "Triggers": [
    ],
    "Slice statistics": [
      {
        "Slice": 0,
        "Executor Memory": 42160
      },
      {
        "Slice": 1,
        "Executor Memory": {
          "Average": 42160,
          "Workers": 3,
          "Maximum Memory Used": 42160
        }
      }
    ],
    "Statement statistics": {
      "Memory used": 128000
    },
    "Settings": {
      "Optimizer": "Postgres query optimizer"
    },
    "Execution Time": 1.026
  }
]
(1 row)
reset gp_enable_explain_allstat;
-- Cleanup
RESET search_path;
DROP SCHEMA explaintest cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table explaintest.subselect_tbl
drop cascades to table explaintest.subselect_tbl_child
drop cascades to table explaintest.allstat_test
DROP TABLE boxes;
DROP TABLE apples;
DROP TABLE box_locations;
DROP TABLE jsonexplaintest;
