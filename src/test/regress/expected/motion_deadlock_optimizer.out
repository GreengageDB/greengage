-- detailed background please refer to the thread in gpdb-dev
-- https://groups.google.com/a/greenplum.org/g/gpdb-dev/c/Y4ajINeKeUw
set gp_interconnect_queue_depth =1;
set gp_interconnect_snd_queue_depth =1;
set gp_autostats_mode = none;
set disable_cost = 1e20;
-- To make this test case stable, we need autovacuum
-- to be off.
show autovacuum;
 autovacuum 
------------
 off
(1 row)

-- NOTES: motion deadlock seems cannot happen under merge join,
-- merge join needs both inner and outer is ordered, which means
-- if there is a motion, there must be a sort node above it.
-- Sort node will exhaust all tuples from motion.
-- ==============================================
-- outer plan & inner plan deadlock
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_2 where gp_segment_id <> 0;
insert into t_motion_deadlock_2
select y.a, x.b from t_motion_deadlock_1 x, t_motion_deadlock_2 y limit 10;
-- below plan should redistribute both inner and outer
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Hash Join
               Hash Cond: (x.b = y.b)
               ->  Seq Scan on public.t_motion_deadlock_1 x
                     Output: x.b
               ->  Hash
                     Output: y.b
                     ->  Broadcast Motion 3:3  (slice2; segments: 3)
                           Output: y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.b
 Optimizer: Pivotal Optimizer (GPORCA)
(14 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1; set optimizer_enable_nljoin = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Nested Loop
               Join Filter: (x.b = y.b)
               ->  Seq Scan on public.t_motion_deadlock_1 x
                     Output: x.b
               ->  Materialize
                     Output: y.b
                     ->  Broadcast Motion 3:3  (slice2; segments: 3)
                           Output: y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.b
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: enable_hashjoin = 'off', enable_nestloop = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_mergejoin = 'off'
(15 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0; set optimizer_enable_nljoin = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Output: (PARTIAL count(1))
         ->  Partial Aggregate
               Output: PARTIAL count(1)
               ->  Merge Join
                     Merge Cond: (x.b = y.b)
                     ->  Sort
                           Output: x.b
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: x.b
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b
                     ->  Sort
                           Output: y.b
                           Sort Key: y.b
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                 Output: y.b
                                 Hash Key: y.b
                                 ->  Seq Scan on public.t_motion_deadlock_2 y
                                       Output: y.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin = 'off', enable_mergejoin = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_nljoin = 'off'
(26 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop; reset optimizer_enable_nljoin;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
-- ==============================================
-- outer plan & joinqual
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_3(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 10000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30)i;
insert into t_motion_deadlock_3 select i,i from generate_series(1, 10000)i;
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Result
               Filter: ((x.b + y.a) > (SubPlan 1))
               ->  Hash Join
                     Output: x.a, x.b, y.a, y.b
                     Hash Cond: (x.b = y.a)
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)
                           Output: x.a, x.b
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.a, x.b
                     ->  Hash
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
               SubPlan 1
                 ->  Aggregate
                       Output: count(1)
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Pivotal Optimizer (GPORCA)
(29 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1; set optimizer_enable_nljoin = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Result
               Filter: ((x.b + y.a) > (SubPlan 1))
               ->  Nested Loop
                     Output: x.a, x.b, y.a, y.b
                     Join Filter: (x.b = y.a)
                     ->  Seq Scan on public.t_motion_deadlock_2 y
                           Output: y.a, y.b
                     ->  Materialize
                           Output: x.a, x.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: x.a, x.b
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.a, x.b
               SubPlan 1
                 ->  Aggregate
                       Output: count(1)
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: enable_hashjoin = 'off', enable_nestloop = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_mergejoin = 'off'
(30 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0; set optimizer_enable_nljoin = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Output: (PARTIAL count(1))
         ->  Partial Aggregate
               Output: PARTIAL count(1)
               ->  Merge Join
                     Merge Cond: (x.b = y.a)
                     Join Filter: ((x.b + y.a) > (SubPlan 1))
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.a, y.b
                           Sort Key: y.a
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1
                       ->  Aggregate
                             Output: count(1)
                             ->  Result
                                   Filter: (z.b < (x.a + y.b))
                                   ->  Materialize
                                         Output: z.b
                                         ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                               Output: z.b
                                               ->  Seq Scan on public.t_motion_deadlock_3 z
                                                     Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin = 'off', enable_mergejoin = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_nljoin = 'off'
(35 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop; reset optimizer_enable_nljoin;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
-- ==============================================
-- outer plan & qual
-- ==============================================
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                                                                                                 QUERY PLAN                                                                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  GroupAggregate
               Group Key: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id, (true)
               ->  Sort
                     Output: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id, (true)
                     Sort Key: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id, (true)
                     ->  Result
                           Output: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id, (true)
                           Filter: ((x.a IS NULL) OR CASE WHEN (NOT ((true) IS NULL)) THEN true ELSE false END)
                           ->  Nested Loop Left Join
                                 Output: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id, (true)
                                 Join Filter: (z.b < (x.a + y.b))
                                 ->  Hash Left Join
                                       Output: x.a, x.b, x.ctid, x.gp_segment_id, y.a, y.b, y.ctid, y.gp_segment_id
                                       Hash Cond: (x.b = y.a)
                                       ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                             Output: x.a, x.b, x.ctid, x.gp_segment_id
                                             Hash Key: x.b
                                             ->  Seq Scan on public.t_motion_deadlock_1 x
                                                   Output: x.a, x.b, x.ctid, x.gp_segment_id
                                       ->  Hash
                                             Output: y.a, y.b, y.ctid, y.gp_segment_id
                                             ->  Seq Scan on public.t_motion_deadlock_2 y
                                                   Output: y.a, y.b, y.ctid, y.gp_segment_id
                                 ->  Materialize
                                       Output: z.b, (true)
                                       ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                             Output: z.b, (true)
                                             ->  Seq Scan on public.t_motion_deadlock_3 z
                                                   Output: z.b, true
 Optimizer: Pivotal Optimizer (GPORCA)
(33 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1; set optimizer_enable_nljoin = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         ->  Result
               Filter: ((x.a IS NULL) OR (SubPlan 1))
               ->  Nested Loop Left Join
                     Output: x.a, y.b
                     Join Filter: (x.b = y.a)
                     ->  Seq Scan on public.t_motion_deadlock_1 x
                           Output: x.a, x.b
                     ->  Materialize
                           Output: y.a, y.b
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                 Output: y.a, y.b
                                 ->  Seq Scan on public.t_motion_deadlock_2 y
                                       Output: y.a, y.b
               SubPlan 1
                 ->  Result
                       Output: true
                       Filter: (z.b < (x.a + y.b))
                       ->  Materialize
                             Output: z.a, z.b
                             ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                   Output: z.a, z.b
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a, z.b
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: enable_hashjoin = 'off', enable_nestloop = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_mergejoin = 'off'
(28 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0; set optimizer_enable_nljoin = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Finalize Aggregate
   Output: count(1)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Output: (PARTIAL count(1))
         ->  Partial Aggregate
               Output: PARTIAL count(1)
               ->  Merge Left Join
                     Merge Cond: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (SubPlan 1))
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.a, y.b
                           Sort Key: y.a
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin = 'off', enable_mergejoin = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_nljoin = 'off'
(33 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop; reset optimizer_enable_nljoin;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
drop table t_motion_deadlock_3;
-- ==============================================
-- outer plan & target list
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_3(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30)i;
insert into t_motion_deadlock_3 select i,i from generate_series(1, 10000)i;
-- hash join
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: ((SubPlan 1))
   ->  Hash Join
         Output: (SubPlan 1)
         Hash Cond: (x.b = y.a)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Output: x.a, x.b
               Hash Key: x.b
               ->  Seq Scan on public.t_motion_deadlock_1 x
                     Output: x.a, x.b
         ->  Hash
               Output: y.a, y.b
               ->  Seq Scan on public.t_motion_deadlock_2 y
                     Output: y.a, y.b
         SubPlan 1
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Pivotal Optimizer (GPORCA)
(26 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1; set optimizer_enable_nljoin = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: ((SubPlan 1))
   ->  Nested Loop
         Output: (SubPlan 1)
         Join Filter: (x.b = y.a)
         ->  Seq Scan on public.t_motion_deadlock_2 y
               Output: y.a, y.b
         ->  Materialize
               Output: x.a, x.b
               ->  Redistribute Motion 3:3  (slice2; segments: 3)
                     Output: x.a, x.b
                     Hash Key: x.b
                     ->  Seq Scan on public.t_motion_deadlock_1 x
                           Output: x.a, x.b
         SubPlan 1
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: enable_hashjoin = 'off', enable_nestloop = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_mergejoin = 'off'
(27 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0; set optimizer_enable_nljoin = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: ((SubPlan 1))
   ->  Merge Join
         Output: (SubPlan 1)
         Merge Cond: (x.b = y.a)
         ->  Sort
               Output: x.a, x.b
               Sort Key: x.b
               ->  Redistribute Motion 3:3  (slice3; segments: 3)
                     Output: x.a, x.b
                     Hash Key: x.b
                     ->  Seq Scan on public.t_motion_deadlock_1 x
                           Output: x.a, x.b
         ->  Sort
               Output: y.b, y.a
               Sort Key: y.a
               ->  Seq Scan on public.t_motion_deadlock_2 y
                     Output: y.b, y.a
         SubPlan 1
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin = 'off', enable_mergejoin = 'on', optimizer_enable_hashjoin = 'off', optimizer_enable_nljoin = 'off'
(31 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop; reset optimizer_enable_nljoin;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
drop table t_motion_deadlock_3;
-- ==============================================
-- Test case for Github Issue 15719
-- SubPlan in Check Option of Upatable View
-- ==============================================
create table t1_15719(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2_15719(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t3_15719(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create view mv_15719 as
select a from t1_15719
where exists (select 1 from t2_15719 where t2_15719.a = t1_15719.a)
with check option;
insert into t1_15719 select generate_series(1, 30000);
delete from t1_15719 where gp_segment_id <> 2;
insert into t2_15719 select generate_series(1, 30000);
delete from t2_15719 where gp_segment_id <> 2;
explain (costs off, verbose) update mv_15719 set a = 6;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Update on public.t1_15719
   ->  Explicit Redistribute Motion 3:3  (slice1; segments: 3)
         Output: 6, t1_15719.ctid, t1_15719.gp_segment_id, t2_15719.ctid, (DMLAction)
         ->  Split
               Output: 6, t1_15719.ctid, t1_15719.gp_segment_id, t2_15719.ctid, DMLAction
               ->  Hash Join
                     Output: 6, t1_15719.ctid, t1_15719.gp_segment_id, t2_15719.ctid
                     Inner Unique: true
                     Hash Cond: (t1_15719.a = t2_15719.a)
                     ->  Seq Scan on public.t1_15719
                           Output: t1_15719.ctid, t1_15719.gp_segment_id, t1_15719.a
                     ->  Hash
                           Output: t2_15719.ctid, t2_15719.a
                           ->  HashAggregate
                                 Output: t2_15719.ctid, t2_15719.a
                                 Group Key: t2_15719.a
                                 ->  Seq Scan on public.t2_15719
                                       Output: t2_15719.ctid, t2_15719.a
   SubPlan 1
     ->  Result
           Filter: (t2_15719_1.a = t1_15719.a)
           ->  Materialize
                 Output: t2_15719_1.a
                 ->  Broadcast Motion 3:3  (slice2; segments: 3)
                       Output: t2_15719_1.a
                       ->  Seq Scan on public.t2_15719 t2_15719_1
                             Output: t2_15719_1.a
 Optimizer: Postgres query optimizer
(28 rows)

update mv_15719 set a = 6;
drop view mv_15719 cascade;
------------
reset gp_interconnect_queue_depth;
reset gp_interconnect_snd_queue_depth;
reset gp_autostats_mode;
reset disable_cost;
