SET optimizer_enforce_subplans = 1;
SET optimizer_trace_fallback=on;
SELECT a = ALL (SELECT generate_series(1, 2)), a FROM (values (1),(2)) v(a);
 ?column? | a 
----------+---
 f        | 1
 f        | 2
(2 rows)

SELECT a = ALL (SELECT generate_series(2, 2)), a FROM (values (1),(2)) v(a);
 ?column? | a 
----------+---
 f        | 1
 t        | 2
(2 rows)

SELECT 1 = ALL (SELECT generate_series(1, 2)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 f
 f
(2 rows)

SELECT 2 = ALL (SELECT generate_series(2, 2)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 t
 t
(2 rows)

SELECT 2 = ALL (SELECT generate_series(2, 3)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 f
 f
(2 rows)

SELECT 2+1 = ALL (SELECT generate_series(2, 3)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 f
 f
(2 rows)

SELECT 2+1 = ALL (SELECT generate_series(3, 3)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 t
 t
(2 rows)

SELECT (SELECT a) = ALL (SELECT generate_series(1, 2)), a FROM (values (1),(2)) v(a);
 ?column? | a 
----------+---
 f        | 1
 f        | 2
(2 rows)

SELECT (SELECT a) = ALL (SELECT generate_series(2, 2)), a FROM (values (1),(2)) v(a);
 ?column? | a 
----------+---
 f        | 1
 t        | 2
(2 rows)

SELECT (SELECT a+1) = ALL (SELECT generate_series(2, 2)), a FROM (values (1),(2)) v(a);
 ?column? | a 
----------+---
 t        | 1
 f        | 2
(2 rows)

SELECT (SELECT 1) = ALL (SELECT generate_series(1, 1)) FROM (values (1),(2)) v(a);
 ?column? 
----------
 t
 t
(2 rows)

SELECT (SELECT 1) = ALL (SELECT generate_series(1, 2)) FROM  (values (1),(2)) v(a);
 ?column? 
----------
 f
 f
(2 rows)

SELECT (SELECT 3) = ALL (SELECT generate_series(3, 3)) FROM  (values (1),(2)) v(a);
 ?column? 
----------
 t
 t
(2 rows)

SELECT (SELECT 1) = ALL (SELECT generate_series(1, 1));
 ?column? 
----------
 t
(1 row)

SELECT (SELECT 1) = ALL (SELECT generate_series(1, 2));
 ?column? 
----------
 f
(1 row)

SELECT (SELECT 3) = ALL (SELECT generate_series(3, 3));
 ?column? 
----------
 t
(1 row)

CREATE TABLE correlated_subquery_test(
   a varchar(100),
   b int
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
SELECT (SELECT a FROM correlated_subquery_test LIMIT 1)=ALL(SELECT a FROM correlated_subquery_test);
 ?column? 
----------
 t
(1 row)

-- Use a transaction because following CREATE CAST doesn't necessarily play
-- nicely with other tests.
BEGIN;
CREATE CAST (integer AS text) WITH INOUT AS IMPLICIT;
SELECT (SELECT b FROM correlated_subquery_test LIMIT 1)=ALL(SELECT a FROM correlated_subquery_test);
 ?column? 
----------
 t
(1 row)

ROLLBACK;
