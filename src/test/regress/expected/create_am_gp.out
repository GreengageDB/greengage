-- Greengage specific access method tests, in addition to what's
-- covered by upstream create_am.sql tests
\set HIDE_TABLEAM off
create table create_am_gp_ao1 (a int, b int) using ao_row distributed by (a);
\d+ create_am_gp_ao1
                             Table "public.create_am_gp_ao1"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Distributed by: (a)
Access method: ao_row
Options: blocksize=32768, compresslevel=0, compresstype=none, checksum=true

create table create_am_gp_ao2 (a int, b int) using ao_row with (compresstype=zlib) distributed by (a);
\d+ create_am_gp_ao2
                             Table "public.create_am_gp_ao2"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Distributed by: (a)
Access method: ao_row
Options: compresstype=zlib, blocksize=32768, compresslevel=1, checksum=true

-- Should fail
create table create_am_gp_ao3 (a int, b int) using ao_row with (compresstype=rle_type) distributed by (a);
ERROR:  rle_type cannot be used with Append Only relations row orientation
create table create_am_gp_ao3 (a int, b int) using heap with (compresstype=rle_type) distributed by (a);
ERROR:  unrecognized parameter "compresstype"
create table create_am_gp_ao3 (a int, b int) using ao_column with (compresstype=rle_type) distributed by (a);
\d+ create_am_gp_ao3
                                                       Table "public.create_am_gp_ao3"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Compression Type | Compression Level | Block Size | Description 
--------+---------+-----------+----------+---------+---------+--------------+------------------+-------------------+------------+-------------
 a      | integer |           |          |         | plain   |              | rle_type         | 1                 | 32768      | 
 b      | integer |           |          |         | plain   |              | rle_type         | 1                 | 32768      | 
Distributed by: (a)
Access method: ao_column
Options: compresstype=rle_type, blocksize=32768, compresslevel=1, checksum=true

-- Should fail because encoding clause is not supported by the tableam
create table create_am_gp_ao4(a int, b int encoding (compresstype=zlib)) using ao_row distributed by (a);
ERROR:  ENCODING clause only supported with column oriented tables
set gp_default_storage_options='compresstype=rle_type';
create table create_am_gp_heap(a int, b int) using heap distributed by (a);
-- should not have compresstype parameter
\d+ create_am_gp_heap
                             Table "public.create_am_gp_heap"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Distributed by: (a)
Access method: heap

-- Should fail because the default compresstype configured above is
-- not supported by this tableam
create table create_am_gp_ao5(a int, b int) using ao_row distributed by (a);
ERROR:  rle_type cannot be used with Append Only relations row orientation
create table create_am_gp_ao6(a int, b int) using ao_row with (compresstype=zlib) distributed by (a);
\d+ create_am_gp_ao6
                             Table "public.create_am_gp_ao6"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Distributed by: (a)
Access method: ao_row
Options: compresstype=zlib, blocksize=32768, compresslevel=1, checksum=true

create table create_am_gp_ao7(a int, b int encoding (compresstype=zlib)) using ao_column distributed by (a);
\d+ create_am_gp_ao7
                                                       Table "public.create_am_gp_ao7"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Compression Type | Compression Level | Block Size | Description 
--------+---------+-----------+----------+---------+---------+--------------+------------------+-------------------+------------+-------------
 a      | integer |           |          |         | plain   |              | rle_type         | 1                 | 32768      | 
 b      | integer |           |          |         | plain   |              | zlib             | 1                 | 32768      | 
Distributed by: (a)
Access method: ao_column
Options: blocksize=32768, compresslevel=1, compresstype=rle_type, checksum=true

reset gp_default_storage_options;
-- create partition hierarchies with AM specified
create table create_am_gp_part1(a int, b int) partition by range(a) (start (1) end (2)) using ao_row;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into create_am_gp_part1 select 1, i from generate_series(1, 10) i;
\d+ create_am_gp_part1
                      Partitioned table "public.create_am_gp_part1"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
Partition key: RANGE (a)
Partitions: create_am_gp_part1_1_prt_1 FOR VALUES FROM (1) TO (2)
Distributed by: (a)
Access method: ao_row

select relam, relname from pg_class where relname IN ('create_am_gp_part1', 'create_am_gp_part1_1_prt_1');
 relam |          relname           
-------+----------------------------
  3434 | create_am_gp_part1_1_prt_1
  3434 | create_am_gp_part1
(2 rows)

select count(*) from create_am_gp_part1;
 count 
-------
    10
(1 row)

