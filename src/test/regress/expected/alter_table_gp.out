-- MPP-20466 Dis-allow duplicate constraint names for same table
create table dupconstr (
						i int,
						j int constraint dup_constraint CHECK (j > 10))
						distributed by (i);
-- should fail because of duplicate constraint name
alter table dupconstr add constraint dup_constraint unique (i);
ERROR:  constraint "dup_constraint" for relation "dupconstr" already exists
alter table dupconstr add constraint dup_constraint primary key (i);
ERROR:  constraint "dup_constraint" for relation "dupconstr" already exists
-- cleanup
drop table dupconstr;
--
-- Alter datatype of column with constraint should raise meaningful error
-- See github issue: https://github.com/GreengageDB/greengage/issues/10561
--
create table contype (i int4 primary key, j int check (j < 100));
alter table contype alter i type numeric; --error
ERROR:  cannot alter column with primary key or unique constraint
HINT:  DROP the constraint first, and recreate it after the ALTER
insert into contype values (1, 1), (2, 2), (3, 3);
-- after insert data, alter primary key/unique column's type will go through a special check logic
alter table contype alter i type numeric; --error
ERROR:  cannot alter type of a column used in a distribution policy
alter table contype alter j type numeric;
-- cleanup
drop table contype;
--
-- Test ALTER COLUMN TYPE after dropped column with text datatype (see MPP-19146)
--
create domain mytype as text;
create temp table at_foo (f1 text, f2 mytype, f3 text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into at_foo values('aa','bb','cc');
drop domain mytype cascade;
NOTICE:  drop cascades to column f2 of table at_foo
alter table at_foo alter f1 TYPE varchar(10);
drop table at_foo;
create domain mytype as int;
create temp table at_foo (f1 text, f2 mytype, f3 text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into at_foo values('aa',0,'cc');
drop domain mytype cascade;
NOTICE:  drop cascades to column f2 of table at_foo
alter table at_foo alter f1 TYPE varchar(10);
-- Verify that INSERT, UPDATE and DELETE work after dropping a column and
-- adding a constraint. There was a bug on that in ORCA, once upon a time
-- (MPP-20207)
CREATE TABLE altable(a int, b text, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE altable DROP COLUMN b;
ALTER TABLE altable ADD CONSTRAINT c_check CHECK (c > 0);
INSERT INTO altable(a, c) VALUES(0, -10);
ERROR:  new row for relation "altable" violates check constraint "c_check"  (seg0 127.0.0.1:25432 pid=21869)
DETAIL:  Failing row contains (0, -10).
SELECT * FROM altable ORDER BY 1;
 a | c 
---+---
(0 rows)

INSERT INTO altable(a, c) VALUES(0, 10);
SELECT * FROM altable ORDER BY 1;
 a | c  
---+----
 0 | 10
(1 row)

DELETE FROM altable WHERE c = -10;
SELECT * FROM altable ORDER BY 1;
 a | c  
---+----
 0 | 10
(1 row)

DELETE FROM altable WHERE c = 10;
SELECT * FROM altable ORDER BY 1;
 a | c 
---+---
(0 rows)

DELETE FROM altable WHERE c = 10;
SELECT * FROM altable ORDER BY 1;
 a | c 
---+---
(0 rows)

INSERT INTO altable(a, c) VALUES(0, 10);
SELECT * FROM altable ORDER BY 1;
 a | c  
---+----
 0 | 10
(1 row)

UPDATE altable SET c = -10;
ERROR:  new row for relation "altable" violates check constraint "c_check"  (seg0 127.0.0.1:25432 pid=21869)
DETAIL:  Failing row contains (0, -10).
SELECT * FROM altable ORDER BY 1;
 a | c  
---+----
 0 | 10
(1 row)

UPDATE altable SET c = 1;
SELECT * FROM altable ORDER BY 1;
 a | c 
---+---
 0 | 1
(1 row)

-- Verify that changing the datatype of a funnily-named column works.
-- (There used to be a quoting bug in the internal query this issues.)
create table "foo'bar" (id int4, t text);
alter table "foo'bar" alter column t type integer using length(t);
--
-- ADD/DROP/ALTER COLUMN on root partition is approved.
--
-- Heap table
DROP TABLE IF EXISTS test_part_col;
NOTICE:  table "test_part_col" does not exist, skipping
CREATE TABLE test_part_col(a int, b int, c int, d int, e int)
DISTRIBUTED BY(a)
PARTITION BY RANGE (b)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
ALTER TABLE ONLY test_part_col ADD COLUMN f int; --error
ERROR:  column must be added to child tables too
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT; --error
ERROR:  type of inherited column "f" must be changed in child tables too
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f; --error
ERROR:  cannot drop column from only the partitioned table when partitions exist
HINT:  Do not specify the ONLY keyword.
ALTER TABLE test_part_col DROP COLUMN f;
ALTER TABLE ONLY test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE ONLY test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT; --error
ERROR:  cannot alter inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT;
ERROR:  cannot alter inherited column "e"
ALTER TABLE ONLY test_part_col_1_prt_other_b DROP COLUMN e; --error
ERROR:  cannot drop inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b DROP COLUMN e;
ERROR:  cannot drop inherited column "e"
DROP TABLE test_part_col;
-- Non-partition heap table
CREATE TABLE test_part_col(a int, b int, c int, d int, e int) DISTRIBUTED BY(a);
ALTER TABLE ONLY test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f;
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE test_part_col DROP COLUMN f;
DROP TABLE test_part_col;
-- AO table
CREATE TABLE test_part_col(a int, b int, c int, d int, e int)
WITH (appendonly=true)
DISTRIBUTED BY(a)
PARTITION BY RANGE (b)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
ALTER TABLE ONLY test_part_col ADD COLUMN f int; --error
ERROR:  column must be added to child tables too
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT; --error
ERROR:  type of inherited column "f" must be changed in child tables too
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f; --error
ERROR:  cannot drop column from only the partitioned table when partitions exist
HINT:  Do not specify the ONLY keyword.
ALTER TABLE test_part_col DROP COLUMN f;
ALTER TABLE ONLY test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE ONLY test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT; --error
ERROR:  cannot alter inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT;
ERROR:  cannot alter inherited column "e"
ALTER TABLE ONLY test_part_col_1_prt_other_b DROP COLUMN e; --error
ERROR:  cannot drop inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b DROP COLUMN e;
ERROR:  cannot drop inherited column "e"
DROP TABLE test_part_col;
-- Non-partition AO table
CREATE TABLE test_part_col(a int, b int, c int, d int, e int)
WITH (appendonly=true) DISTRIBUTED BY(a);
ALTER TABLE ONLY test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f;
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE test_part_col DROP COLUMN f;
DROP TABLE test_part_col;
-- AOCS table
CREATE TABLE test_part_col(a int, b int, c int, d int, e int)
WITH (appendonly=true, orientation=column)
DISTRIBUTED BY(a)
PARTITION BY RANGE (b)
( START (1) END (2) EVERY (1),
    DEFAULT PARTITION other_b);
ALTER TABLE ONLY test_part_col ADD COLUMN f int; --error
ERROR:  column must be added to child tables too
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT; --error
ERROR:  type of inherited column "f" must be changed in child tables too
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f; --error
ERROR:  cannot drop column from only the partitioned table when partitions exist
HINT:  Do not specify the ONLY keyword.
ALTER TABLE test_part_col DROP COLUMN f;
ALTER TABLE ONLY test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE test_part_col_1_prt_other_b ADD COLUMN f int;
ERROR:  cannot add column to a partition
ALTER TABLE ONLY test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT; --error
ERROR:  cannot alter inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b ALTER COLUMN e TYPE TEXT;
ERROR:  cannot alter inherited column "e"
ALTER TABLE ONLY test_part_col_1_prt_other_b DROP COLUMN e; --error
ERROR:  cannot drop inherited column "e"
ALTER TABLE test_part_col_1_prt_other_b DROP COLUMN e;
ERROR:  cannot drop inherited column "e"
DROP TABLE test_part_col;
-- Non-partition AOCS table
CREATE TABLE test_part_col(a int, b int, c int, d int, e int)
WITH (appendonly=true, orientation=column) DISTRIBUTED BY(a);
ALTER TABLE ONLY test_part_col ADD COLUMN f int;
ALTER TABLE ONLY test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE ONLY test_part_col DROP COLUMN f;
ALTER TABLE test_part_col ADD COLUMN f int;
ALTER TABLE test_part_col ALTER COLUMN f TYPE TEXT;
ALTER TABLE test_part_col DROP COLUMN f;
DROP TABLE test_part_col;
-- Test the new "fast default" mechanism from PostgreSQL v11. It's important
-- that each segment gets the same attmissingval.
CREATE TABLE gp_test_fast_def(i int);
INSERT INTO gp_test_fast_def (i) SELECT g FROM generate_series(1, 10) g;
ALTER TABLE gp_test_fast_def ADD COLUMN ts timestamp DEFAULT now();
ANALYZE gp_test_fast_def;
SELECT COUNT (DISTINCT ts) FROM gp_test_fast_def;
 count 
-------
     1
(1 row)

-- Create view with JOIN clause, drop column, check select to view not causing segfault
CREATE TABLE dropped_col_t1(i1 int, i2 int);
CREATE TABLE dropped_col_t2(i1 int, i2 int);
CREATE VIEW dropped_col_v AS SELECT dropped_col_t1.i1 FROM dropped_col_t1 JOIN dropped_col_t2 ON dropped_col_t1.i1=dropped_col_t2.i1;
ALTER TABLE dropped_col_t1 DROP COLUMN i2;
SELECT * FROM dropped_col_v;
 i1 
----
(0 rows)

-- Test that we are able to attach a newly created partition table when it has foreign key reference.
CREATE TABLE issue_14279_fk_reference (col2 text unique not null);
INSERT INTO issue_14279_fk_reference VALUES ('stuff');
CREATE TABLE issue_14279_taptest_table (
    col1 BIGINT,
    col2 TEXT NOT NULL DEFAULT 'stuff', FOREIGN KEY (col2) REFERENCES issue_14279_fk_reference(col2))
  PARTITION BY RANGE (col1);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'col1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greengage Database, will not be enforced
CREATE TABLE issue_14279_taptest_table_p3000000000 (
    LIKE issue_14279_taptest_table
    INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
ALTER TABLE issue_14279_taptest_table ATTACH PARTITION issue_14279_taptest_table_p3000000000 FOR VALUES FROM (3000000000) TO (3000000100);
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greengage Database, will not be enforced
BEGIN;
CREATE TABLE issue_14279_taptest_table_p3000000100 (
    LIKE issue_14279_taptest_table
    INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
NOTICE:  table doesn't have 'DISTRIBUTED BY' clause, defaulting to distribution columns from LIKE table
ALTER TABLE issue_14279_taptest_table ATTACH PARTITION issue_14279_taptest_table_p3000000100 FOR VALUES FROM (3000000100) TO (3000000200);
WARNING:  referential integrity (FOREIGN KEY) constraints are not supported in Greengage Database, will not be enforced
END;
INSERT INTO issue_14279_taptest_table SELECT generate_series(3000000000, 3000000001);
INSERT INTO issue_14279_taptest_table SELECT generate_series(3000000100, 3000000101);
-- The parent table shouldn't have anything.
SELECT * FROM ONLY issue_14279_taptest_table;
 col1 | col2 
------+------
(0 rows)

-- The newly attached table should have 2 rows.
SELECT * FROM issue_14279_taptest_table_p3000000000;
    col1    | col2  
------------+-------
 3000000000 | stuff
 3000000001 | stuff
(2 rows)

-- The newly attached table should have 2 rows.
SELECT * FROM issue_14279_taptest_table_p3000000100;
    col1    | col2  
------------+-------
 3000000100 | stuff
 3000000101 | stuff
(2 rows)

DROP TABLE issue_14279_taptest_table;
DROP TABLE issue_14279_fk_reference;
-- alter indexed column to the same type shouldn't change the index' relfilenode on QD and QEs.
-- helper utilities to check compare relfilenodes
drop table if exists relfilenodecheck;
create table relfilenodecheck(segid int, relname text, relfilenodebefore int, relfilenodeafter int, casename text);
prepare capturerelfilenodebefore as
insert into relfilenodecheck select -1 segid, relname, pg_relation_filenode(relname::text) as relfilenode, null::int, $1 as casename from pg_class where relname like $2
union select gp_segment_id segid, relname, pg_relation_filenode(relname::text) as relfilenode, null::int, $1 as casename  from gp_dist_random('pg_class')
where relname like $2 order by segid;
prepare checkrelfilenodediff as
select a.segid, b.casename, b.relname, (relfilenodebefore != a.relfilenode) rewritten
from
    (
        select -1 segid, relname, pg_relation_filenode(relname::text) as relfilenode
        from pg_class
        where relname like $2
        union
        select gp_segment_id segid, relname, pg_relation_filenode(relname::text) as relfilenode
        from gp_dist_random('pg_class')
        where relname like $2 order by segid
    )a, relfilenodecheck b
where b.casename like $1 and b.relname like $2 and a.segid = b.segid;
create table attype_indexed(a int, b int);
create index attype_indexed_i on attype_indexed(b);
insert into attype_indexed select i,i from generate_series(1, 100)i;
-- alter to same type.
-- check relfilenode before AT
execute capturerelfilenodebefore('alter column type same', 'attype_indexed_i');
alter table attype_indexed alter column b type int;
-- relfilenode stay same as before
execute checkrelfilenodediff('alter column type same', 'attype_indexed_i');
 segid |        casename        |     relname      | rewritten 
-------+------------------------+------------------+-----------
     0 | alter column type same | attype_indexed_i | f
     1 | alter column type same | attype_indexed_i | f
     2 | alter column type same | attype_indexed_i | f
    -1 | alter column type same | attype_indexed_i | f
(4 rows)

-- insert works fine
insert into attype_indexed select i,i from generate_series(1, 100)i;
select count(*) from attype_indexed;
 count 
-------
   200
(1 row)

-- alter to different type, relfilenode should change
execute capturerelfilenodebefore('alter column diff type', 'attype_indexed_i');
alter table attype_indexed alter column b type text;
execute checkrelfilenodediff('alter column diff type', 'attype_indexed_i');
 segid |        casename        |     relname      | rewritten 
-------+------------------------+------------------+-----------
     0 | alter column diff type | attype_indexed_i | t
     1 | alter column diff type | attype_indexed_i | t
     2 | alter column diff type | attype_indexed_i | t
    -1 | alter column diff type | attype_indexed_i | t
(4 rows)

--insert works fine
insert into attype_indexed select i, 'abc'::text from generate_series(1, 100) i;
select count(*) from attype_indexed;
 count 
-------
   300
(1 row)

-- alter column with exclusion constraint
create table attype_indexed_constr(
    c circle,
    dkey inet,
    exclude using gist (dkey inet_ops with =, c with &&)
);
-- not change
execute capturerelfilenodebefore('alter column diff type', 'attype_indexed_constr_dkey_c_excl');
alter table attype_indexed_constr alter column c type circle;
execute checkrelfilenodediff('alter column diff type', 'attype_indexed_constr_dkey_c_excl');
 segid |        casename        |              relname              | rewritten 
-------+------------------------+-----------------------------------+-----------
     0 | alter column diff type | attype_indexed_constr_dkey_c_excl | f
     1 | alter column diff type | attype_indexed_constr_dkey_c_excl | f
     2 | alter column diff type | attype_indexed_constr_dkey_c_excl | f
    -1 | alter column diff type | attype_indexed_constr_dkey_c_excl | f
(4 rows)

drop table relfilenodecheck;
