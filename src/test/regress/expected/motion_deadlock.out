-- detailed background please refer to the thread in gpdb-dev
-- https://groups.google.com/a/greenplum.org/g/gpdb-dev/c/Y4ajINeKeUw
set gp_interconnect_queue_depth =1;
set gp_interconnect_snd_queue_depth =1;
set gp_autostats_mode = none;
set disable_cost = 1e20;
-- ==============================================
-- outer plan & inner plan deadlock
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_2 where gp_segment_id <> 0;
insert into t_motion_deadlock_2
select y.a, x.b from t_motion_deadlock_1 x, t_motion_deadlock_2 y limit 10;
-- below plan should redistribute both inner and outer
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Hash Join
                     Hash Cond: (x.b = y.b)
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Hash
                           Output: y.b, y.a
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: y.b, y.a
                                 Hash Key: y.b
                                 ->  Seq Scan on public.t_motion_deadlock_2 y
                                       Output: y.b, y.a
 Optimizer: Postgres query optimizer
 Settings: optimizer=off
(22 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Nested Loop
                     Join Filter: (x.b = y.b)
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Materialize
                           Output: y.b, y.a
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: y.b, y.a
                                 Hash Key: y.b
                                 ->  Seq Scan on public.t_motion_deadlock_2 y
                                       Output: y.b, y.a
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=off, enable_nestloop=on, optimizer=off
(22 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0; 
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Merge Join
                     Merge Cond: (x.b = y.b)
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.b, y.a
                           Sort Key: y.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: y.b, y.a
                                 Hash Key: y.b
                                 ->  Seq Scan on public.t_motion_deadlock_2 y
                                       Output: y.b, y.a
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=on, enable_nestloop=off, optimizer=off
(26 rows)

select count(1)
from
  t_motion_deadlock_1 x,
  t_motion_deadlock_2 y
where x.b = y.b;
 count 
-------
    10
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
-- ==============================================
-- outer plan & joinqual
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_3(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 10000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30)i;
insert into t_motion_deadlock_3 select i,i from generate_series(1, 10000)i;
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Hash Join
                     Hash Cond: (x.b = y.a)
                     Join Filter: ((x.b + y.a) > (SubPlan 1))
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Hash
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Aggregate
                             Output: count(1)
                             ->  Result
                                   Filter: (z.b < (x.a + y.b))
                                   ->  Materialize
                                         Output: z.b
                                         ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                               Output: z.b
                                               ->  Seq Scan on public.t_motion_deadlock_3 z
                                                     Output: z.b
 Optimizer: Postgres query optimizer
 Settings: optimizer=off
(31 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Nested Loop
                     Join Filter: ((x.b = y.a) AND ((x.b + y.a) > (SubPlan 1)))
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Materialize
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Aggregate
                             Output: count(1)
                             ->  Result
                                   Filter: (z.b < (x.a + y.b))
                                   ->  Materialize
                                         Output: z.b
                                         ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                               Output: z.b
                                               ->  Seq Scan on public.t_motion_deadlock_3 z
                                                     Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=off, enable_nestloop=on, optimizer=off
(30 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Merge Join
                     Merge Cond: (x.b = y.a)
                     Join Filter: ((x.b + y.a) > (SubPlan 1))
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.a, y.b
                           Sort Key: y.a
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Aggregate
                             Output: count(1)
                             ->  Result
                                   Filter: (z.b < (x.a + y.b))
                                   ->  Materialize
                                         Output: z.b
                                         ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                               Output: z.b
                                               ->  Seq Scan on public.t_motion_deadlock_3 z
                                                     Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=on, enable_nestloop=off, optimizer=off
(35 rows)

select count(1)
from
  t_motion_deadlock_1 x join t_motion_deadlock_2 y
  on x.b = y.a and
     x.b + y.a > (select count(1) from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
-- ==============================================
-- outer plan & qual
-- ==============================================
-- hash join
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Hash Left Join
                     Hash Cond: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (SubPlan 1))
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Hash
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Postgres query optimizer
 Settings: optimizer=off
(29 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- hashed subplan
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice4; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Hash Left Join
                     Hash Cond: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (alternatives: SubPlan 1 or hashed SubPlan 2))
                     ->  Redistribute Motion 3:3  (slice3; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Hash
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice4; segments: 3)
                       ->  Result
                             Filter: (z.b = (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
                     SubPlan 2  (slice4; segments: 3)
                       ->  Materialize
                             Output: z_1.b
                             ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                   Output: z_1.b
                                   ->  Seq Scan on public.t_motion_deadlock_3 z_1
                                         Output: z_1.b
 Optimizer: Postgres query optimizer
 Settings: optimizer=off
(36 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
 count 
-------
     7
(1 row)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Nested Loop Left Join
                     Join Filter: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (SubPlan 1))
                     ->  Redistribute Motion 3:3  (slice2; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Materialize
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=off, enable_nestloop=on, optimizer=off
(29 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- hashed subplan
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice4; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Nested Loop Left Join
                     Join Filter: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (alternatives: SubPlan 1 or hashed SubPlan 2))
                     ->  Redistribute Motion 3:3  (slice3; segments: 3)
                           Output: x.b, x.a
                           Hash Key: x.b
                           ->  Seq Scan on public.t_motion_deadlock_1 x
                                 Output: x.b, x.a
                     ->  Materialize
                           Output: y.a, y.b
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice4; segments: 3)
                       ->  Result
                             Filter: (z.b = (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
                     SubPlan 2  (slice4; segments: 3)
                       ->  Materialize
                             Output: z_1.b
                             ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                   Output: z_1.b
                                   ->  Seq Scan on public.t_motion_deadlock_3 z_1
                                         Output: z_1.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=off, enable_nestloop=on, optimizer=off
(36 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
 count 
-------
     7
(1 row)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice3; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Merge Left Join
                     Merge Cond: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (SubPlan 1))
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.a, y.b
                           Sort Key: y.a
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice3; segments: 3)
                       ->  Result
                             Filter: (z.b < (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=on, enable_nestloop=off, optimizer=off
(33 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b < x.a + y.b);
 count 
-------
     7
(1 row)

-- hashed subplan
explain (costs off, verbose)
select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(1)))
   ->  Gather Motion 3:1  (slice4; segments: 3)
         Output: (count(1))
         ->  Aggregate
               Output: count(1)
               ->  Merge Left Join
                     Merge Cond: (x.b = y.a)
                     Filter: ((x.a IS NULL) OR (alternatives: SubPlan 1 or hashed SubPlan 2))
                     ->  Sort
                           Output: x.b, x.a
                           Sort Key: x.b
                           ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                 Output: x.b, x.a
                                 Hash Key: x.b
                                 ->  Seq Scan on public.t_motion_deadlock_1 x
                                       Output: x.b, x.a
                     ->  Sort
                           Output: y.a, y.b
                           Sort Key: y.a
                           ->  Seq Scan on public.t_motion_deadlock_2 y
                                 Output: y.a, y.b
                     SubPlan 1  (slice4; segments: 3)
                       ->  Result
                             Filter: (z.b = (x.a + y.b))
                             ->  Materialize
                                   Output: z.b
                                   ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                         Output: z.b
                                         ->  Seq Scan on public.t_motion_deadlock_3 z
                                               Output: z.b
                     SubPlan 2  (slice4; segments: 3)
                       ->  Materialize
                             Output: z_1.b
                             ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                   Output: z_1.b
                                   ->  Seq Scan on public.t_motion_deadlock_3 z_1
                                         Output: z_1.b
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=on, enable_nestloop=off, optimizer=off
(40 rows)

select count(1)
from
  t_motion_deadlock_1 x left join t_motion_deadlock_2 y
  on x.b = y.a
where
   x.a is null or exists (select random() from t_motion_deadlock_3 z where z.b = x.a + y.b);
 count 
-------
     7
(1 row)

reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
drop table t_motion_deadlock_3;
-- ==============================================
-- outer plan & target list
-- ==============================================
create table t_motion_deadlock_1(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_2(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_motion_deadlock_3(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_motion_deadlock_1 select i,i from generate_series(1, 30000)i;
delete from t_motion_deadlock_1 where gp_segment_id <> 1;
insert into t_motion_deadlock_2 select i,i from generate_series(1, 30)i;
insert into t_motion_deadlock_3 select i,i from generate_series(1, 10000)i;
-- hash join
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   Output: ((SubPlan 1))
   ->  Hash Join
         Output: (SubPlan 1)
         Hash Cond: (x.b = y.a)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Output: x.a, x.b
               Hash Key: x.b
               ->  Seq Scan on public.t_motion_deadlock_1 x
                     Output: x.a, x.b
         ->  Hash
               Output: y.b, y.a
               ->  Seq Scan on public.t_motion_deadlock_2 y
                     Output: y.b, y.a
         SubPlan 1  (slice3; segments: 3)
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Postgres query optimizer
 Settings: optimizer=off
(27 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

-- nestloop join
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 1;
set enable_mergejoin = 0; set optimizer_enable_mergejoin = 0;
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   Output: ((SubPlan 1))
   ->  Nested Loop
         Output: (SubPlan 1)
         Join Filter: (x.b = y.a)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)
               Output: x.a, x.b
               Hash Key: x.b
               ->  Seq Scan on public.t_motion_deadlock_1 x
                     Output: x.a, x.b
         ->  Materialize
               Output: y.b, y.a
               ->  Seq Scan on public.t_motion_deadlock_2 y
                     Output: y.b, y.a
         SubPlan 1  (slice3; segments: 3)
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=off, enable_nestloop=on, optimizer=off
(27 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

-- merge join is OK, but lets also put a case here
set enable_hashjoin = 0; set optimizer_enable_hashjoin = 0;
set enable_nestloop = 0;
set enable_mergejoin = 1; set optimizer_enable_mergejoin = 1;
explain (costs off, verbose)
select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice3; segments: 3)
   Output: ((SubPlan 1))
   ->  Merge Join
         Output: (SubPlan 1)
         Merge Cond: (x.b = y.a)
         ->  Sort
               Output: x.a, x.b
               Sort Key: x.b
               ->  Redistribute Motion 3:3  (slice2; segments: 3)
                     Output: x.a, x.b
                     Hash Key: x.b
                     ->  Seq Scan on public.t_motion_deadlock_1 x
                           Output: x.a, x.b
         ->  Sort
               Output: y.b, y.a
               Sort Key: y.a
               ->  Seq Scan on public.t_motion_deadlock_2 y
                     Output: y.b, y.a
         SubPlan 1  (slice3; segments: 3)
           ->  Aggregate
                 Output: count(1)
                 ->  Result
                       Filter: (z.a < (x.a + y.b))
                       ->  Materialize
                             Output: z.a
                             ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                   Output: z.a
                                   ->  Seq Scan on public.t_motion_deadlock_3 z
                                         Output: z.a
 Optimizer: Postgres query optimizer
 Settings: enable_hashjoin=off, enable_mergejoin=on, enable_nestloop=off, optimizer=off
(31 rows)

select
  (select count(1) from t_motion_deadlock_3 z where z.a < x.a + y.b ) s
from t_motion_deadlock_1 x join t_motion_deadlock_2 y on x.b = y.a;
 s  
----
  1
 23
 29
 39
 45
 51
 59
(7 rows)

drop table t_motion_deadlock_1;
drop table t_motion_deadlock_2;
drop table t_motion_deadlock_3;
-- reset all GUCs
reset enable_hashjoin; reset optimizer_enable_hashjoin;
reset enable_nestloop;
reset enable_mergejoin; reset optimizer_enable_mergejoin;
reset gp_interconnect_queue_depth;
reset gp_interconnect_snd_queue_depth;
reset gp_autostats_mode;
reset disable_cost;
