--
-- targetlist set returning function tests
--
-- SRF is not under any other expression --
explain verbose select generate_series(1,4) as x;
                   QUERY PLAN                   
------------------------------------------------
 ProjectSet  (cost=0.00..0.00 rows=1 width=4)
   Output: generate_series(1, 4)
   ->  Result  (cost=0.00..0.00 rows=1 width=1)
         Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(5 rows)

select generate_series(1,4) as x;
 x 
---
 1
 2
 3
 4
(4 rows)

-- SRF is present under a FUNCEXPR which is not a SRF
explain verbose select abs(generate_series(-5,-1)) as absolute;
                           QUERY PLAN                           
----------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: abs((generate_series('-5'::integer, '-1'::integer)))
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series('-5'::integer, '-1'::integer)
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select abs(generate_series(-5,-1)) as absolute;
 absolute 
----------
        5
        4
        3
        2
        1
(5 rows)

-- SRF is present under a OPEXPR(+)
explain verbose select generate_series(1,4)+1 as output;
                      QUERY PLAN                      
------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: ((generate_series(1, 4)) + 1)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(1, 4)
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select generate_series(1,4)+1 as output;
 output 
--------
      2
      3
      4
      5
(4 rows)

-- SRF is present under an SRF expression
explain verbose select generate_series(generate_series(1,3),4);
                      QUERY PLAN                       
-------------------------------------------------------
 ProjectSet  (cost=0.00..0.00 rows=1 width=4)
   Output: generate_series((generate_series(1, 3)), 4)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(1, 3)
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select generate_series(generate_series(1,3),4) as output;
 output 
--------
      1
      2
      3
      4
      2
      3
      4
      3
      4
(9 rows)

-- The inner SRF is present under an OPEXPR which in turn is under an SRF
explain verbose select generate_series(generate_series(1,2)+1,4) as output;
                         QUERY PLAN                          
-------------------------------------------------------------
 ProjectSet  (cost=0.00..0.00 rows=1 width=4)
   Output: generate_series(((generate_series(1, 2)) + 1), 4)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(1, 2)
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select generate_series(generate_series(1,2)+1,4) as output;
 output 
--------
      2
      3
      4
      3
      4
(5 rows)

-- The outer SRF is present under an OPEXPR
explain verbose select generate_series(generate_series(1,2),4)+1 as output;
                          QUERY PLAN                           
---------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: ((generate_series((generate_series(1, 2)), 4)) + 1)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series((generate_series(1, 2)), 4)
         ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
               Output: generate_series(1, 2)
               ->  Result  (cost=0.00..0.00 rows=1 width=1)
                     Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

select generate_series(generate_series(1,2),4)+1 as output;
 output 
--------
      2
      3
      4
      5
      3
      4
      5
(7 rows)

-- Both inner and outer SRF are present under OPEXPR
explain verbose select generate_series(generate_series(1,2)+1,4)+1 as output;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: ((generate_series(((generate_series(1, 2)) + 1), 4)) + 1)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(((generate_series(1, 2)) + 1), 4)
         ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
               Output: generate_series(1, 2)
               ->  Result  (cost=0.00..0.00 rows=1 width=1)
                     Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

select generate_series(generate_series(1,2)+1,4)+1 as output;
 output 
--------
      3
      4
      5
      4
      5
(5 rows)

explain verbose select generate_series(1,3)+1 as x from (select generate_series(1, 3)) as y;
                         QUERY PLAN                         
------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: ((generate_series(1, 3)) + 1)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(1, 3)
         ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
               Output: generate_series(1, 3)
               ->  Result  (cost=0.00..0.00 rows=1 width=1)
                     Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

select generate_series(1,3)+1 as x from (select generate_series(1, 3)) as y;
 x 
---
 2
 3
 4
 2
 3
 4
 2
 3
 4
(9 rows)

create table test_srf(a int,b int,c int) distributed by (a);
insert into test_srf values(2,2,2);
insert into test_srf values(3,2,2);
explain verbose select generate_series(1,a) as output,b,c from test_srf;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
   Output: (generate_series(1, a)), b, c
   ->  ProjectSet  (cost=0.00..431.00 rows=1 width=12)
         Output: generate_series(1, a), b, c
         ->  Seq Scan on public.test_srf  (cost=0.00..431.00 rows=1 width=12)
               Output: a, b, c
 Optimizer: Pivotal Optimizer (GPORCA)
(7 rows)

select generate_series(1,a) as output,b,c from test_srf;
 output | b | c 
--------+---+---
      1 | 2 | 2
      2 | 2 | 2
      1 | 2 | 2
      2 | 2 | 2
      3 | 2 | 2
(5 rows)

explain verbose select generate_series(1,a+1),b+generate_series(1,4),c from test_srf;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..431.00 rows=1 width=12)
   Output: (generate_series(1, (a + 1))), ((b + (generate_series(1, 4)))), c
   ->  Result  (cost=0.00..431.00 rows=1 width=12)
         Output: (generate_series(1, (a + 1))), (b + (generate_series(1, 4))), c
         ->  ProjectSet  (cost=0.00..431.00 rows=1 width=12)
               Output: generate_series(1, (a + 1)), generate_series(1, 4), b, c
               ->  Seq Scan on public.test_srf  (cost=0.00..431.00 rows=1 width=12)
                     Output: a, b, c
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

select generate_series(1,a+1),b+generate_series(1,4),c from test_srf;
 generate_series | ?column? | c 
-----------------+----------+---
               1 |        3 | 2
               2 |        4 | 2
               3 |        5 | 2
                 |        6 | 2
               1 |        3 | 2
               2 |        4 | 2
               3 |        5 | 2
               4 |        6 | 2
(8 rows)

drop table test_srf;
-- Test that the preprocessor step where
-- IN subquery is converted to EXIST subquery with a predicate,
-- is not happening if inner sub query is SRF
-- Fixed as part of github issue #15644
explain verbose SELECT a IN (SELECT generate_series(1,a)) AS x FROM (SELECT generate_series(1, 3) AS a) AS s;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Result  (cost=0.00..441357.57 rows=1 width=1)
   Output: (SubPlan 1)
   ->  ProjectSet  (cost=0.00..0.00 rows=1 width=4)
         Output: generate_series(1, 3)
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
   SubPlan 1
     ->  Result  (cost=0.00..0.00 rows=1 width=5)
           Output: (generate_series(1, (generate_series(1, 3))))
           ->  ProjectSet  (cost=0.00..0.00 rows=1 width=5)
                 Output: true, generate_series(1, (generate_series(1, 3)))
                 ->  Result  (cost=0.00..0.00 rows=1 width=1)
                       Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(14 rows)

SELECT a IN (SELECT generate_series(1,a)) AS x FROM (SELECT generate_series(1, 3) AS a) AS s;
 x 
---
 t
 t
 t
(3 rows)

SELECT a FROM (values(1),(2),(3)) as t(a) where a IN (SELECT generate_series(1,a));
 a 
---
 1
 2
 3
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT a FROM (values(1),(2),(3)) as t(a) where a IN (SELECT generate_series(1,a));
                       QUERY PLAN                       
--------------------------------------------------------
 Result
   Output: column1
   Filter: (SubPlan 1)
   ->  Values Scan on "Values"
         Output: column1
   SubPlan 1
     ->  ProjectSet
           Output: generate_series(1, "Values".column1)
           ->  Result
                 Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(11 rows)

CREATE TABLE t_outer (a int, b int) DISTRIBUTED BY (a);
INSERT INTO t_outer SELECT i, i+1 FROM generate_series(1,3) as i;  
CREATE TABLE t_inner (a int, b int) DISTRIBUTED BY (a);
INSERT INTO t_inner SELECT i, i+1 FROM generate_series(1,3) as i;
SELECT * FROM t_outer WHERE t_outer.b IN (SELECT generate_series(1, t_outer.b) FROM t_inner);
 a | b 
---+---
 2 | 3
 3 | 4
 1 | 2
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM t_outer WHERE t_outer.b IN (SELECT generate_series(1, t_outer.b)  FROM t_inner);
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: t_outer.a, t_outer.b
   ->  Seq Scan on public.t_outer
         Output: t_outer.a, t_outer.b
         Filter: (SubPlan 1)
         SubPlan 1
           ->  ProjectSet
                 Output: generate_series(1, t_outer.b)
                 ->  Materialize
                       ->  Broadcast Motion 3:3  (slice2; segments: 3)
                             ->  Seq Scan on public.t_inner
 Optimizer: Pivotal Optimizer (GPORCA)
(12 rows)

DROP TABLE t_outer, t_inner;
-- Check for proper resource deallocation for SRF which has been squelched
create table ao1_srf_test (a int primary key) with (appendonly=true);
insert into ao1_srf_test values (1);
select (gp_toolkit.__gp_aoblkdir('ao1_srf_test'::regclass)).* from gp_dist_random('gp_id') limit 1;
 tupleid | segno | columngroup_no | entry_no | first_row_no | file_offset | row_count 
---------+-------+----------------+----------+--------------+-------------+-----------
 (0,2)   |     1 |              0 |        0 |            1 |           0 |         1
(1 row)

-- Check that SRF squelch performs when rescan is happens
create table ao2_srf_test (a int primary key) with (appendonly=true);
insert into ao1_srf_test select a from generate_series(2, 10000)a;
insert into ao2_srf_test select a from generate_series(1, 10000)a;
create table srf_test_t1(a oid primary key);
insert into srf_test_t1 values ('ao1_srf_test'::regclass::oid), ('ao2_srf_test'::regclass::oid);
select * from srf_test_t1 where a in 
       (select (gp_toolkit.__gp_aoblkdir(srf_test_t1.a)).row_count 
        from gp_dist_random('gp_id') limit 1);
 a 
---
(0 rows)

drop table ao1_srf_test;
drop table ao2_srf_test;
drop table srf_test_t1;
-- Check various SRFs switched to squenched Value-Per-Call
create table test_ao1(i int) with (appendonly=true) distributed by (i);
insert into test_ao1 values (generate_series(1,1000));
select count(*) from (select get_ao_distribution('test_ao1') limit 1) sdist;
 count 
-------
     1
(1 row)

drop table test_ao1;
create table test_ao2 (a int, b int) with (appendonly=true, orientation=column) distributed by(a);
insert into test_ao2 select i, i from generate_series(1, 10) i;
update test_ao2 set b = 100 where a in (2, 5);
delete from test_ao2 where a in (4, 8);
select (gp_toolkit.__gp_aovisimap('test_ao2'::regclass)).* from gp_dist_random('gp_id') limit 1;
     tid      | segno | row_num 
--------------+-------+---------
 (33554432,2) |     1 |       1
(1 row)

select count (*) from (
  select (gp_toolkit.__gp_aovisimap_entry('test_ao2'::regclass)).* from gp_dist_random('gp_id') limit 1) vme1;
 count 
-------
     1
(1 row)

select count(*) from (select * from (select gp_toolkit.__gp_aovisimap_hidden_info('test_ao2'::regclass)) hi limit 1) hi1;
 count 
-------
     1
(1 row)

drop table test_ao2;
create table test_ao3(id int, key int) distributed by(id);
insert into test_ao3 values(1,2),(2,3),(3,4);
select count(*) from (select * from (select pg_catalog.gp_acquire_sample_rows('test_ao3'::regclass, 400, 'f')) ss limit 1) ss1;
 count 
-------
     1
(1 row)

drop table test_ao3;
