-- https://gist.github.com/kainwen/df7c0d3149684e1256d31b5c39e02de7#file-gp7-sql
-- This test is included in https://github.com/GreengageDB/greengage/issues/14982
-- The test creates an operator that performs absolute value comparisons of the input data.
-- The operator belongs to a customized btree opfamily 16433, which supports cross-type (20, 23) comparisons.
-- The test then creates two tables, t1 and t2.
-- Both are distributed by column a, and partitioned by column b.
-- t1.a is of type int, belonging to hash opfamily 1977, which supports cross-type (20, 21, 23) comparisons.
-- t2.a is of type int, belonging to hash opfamily 1977, which supports cross-type (20, 21, 23) comparisons.
-- t1.b is of type int4, belonging to btree opfamily 1976, which supports cross-type (20, 21, 23) comparisons.
-- t2.b is of type int8, belonging to btree opfamily 1976, which supports cross-type (20, 21, 23) comparisons.
-- As of now, ORCA doesn't consider partition key's opfamily when performing partition pruning
-- Internally, operator |=| of opfamily 16433 is treated as operator = of opfamily 1977 or 1976, and generated
-- incorrect hash join condition and unjustified partition pruning. This fix compares the operator to the
-- column's opfamily, thence deriving correct properties from the predicates.
-- greengage
create schema partition_prune_opfamily;
set search_path=partition_prune_opfamily;
SET optimizer_trace_fallback=on;
-- start_ignore
create language plpython3u;
-- end_ignore
-- proc for int4
create function abseq4(a int4, b int4) returns bool as $$
return abs(a) == abs(b)
$$ language plpython3u strict immutable;
create function abslt4(a int4, b int4) returns bool as $$
return abs(a) < abs(b)
$$ language plpython3u strict immutable;
create function absle4(a int4, b int4) returns bool as $$
return abs(a) <= abs(b)
$$ language plpython3u strict immutable;
create function absgt4(a int4, b int4) returns bool as $$
return abs(a) > abs(b)
$$ language plpython3u strict immutable;
create function absge4(a int4, b int4) returns bool as $$
return abs(a) >= abs(b)
$$ language plpython3u strict immutable;
create function abscmp4(a int4, b int4) returns int as $$
if abs(a) < abs(b):
    return -1
if abs(a) > abs(b):
    return 1
return 0
$$ language plpython3u strict immutable;
-- procs for int8
create function abseq8(a int8, b int8) returns bool as $$
return abs(a) == abs(b)
$$ language plpython3u strict immutable;
create function abslt8(a int8, b int8) returns bool as $$
return abs(a) < abs(b)
$$ language plpython3u strict immutable;
create function absle8(a int8, b int8) returns bool as $$
return abs(a) <= abs(b)
$$ language plpython3u strict immutable;
create function absgt8(a int8, b int8) returns bool as $$
return abs(a) > abs(b)
$$ language plpython3u strict immutable;
create function absge8(a int8, b int8) returns bool as $$
return abs(a) >= abs(b)
$$ language plpython3u strict immutable;
create function abscmp8(a int8, b int8) returns int as $$
if abs(a) < abs(b):
    return -1
if abs(a) > abs(b):
    return 1
return 0
$$ language plpython3u strict immutable;
-- procs for cross type int4 int8
create function abseq48(a int4, b int8) returns bool as $$
return abs(a) == abs(b)
$$ language plpython3u strict immutable;
create function abslt48(a int4, b int8) returns bool as $$
return abs(a) < abs(b)
$$ language plpython3u strict immutable;
create function absle48(a int4, b int8) returns bool as $$
return abs(a) <= abs(b)
$$ language plpython3u strict immutable;
create function absgt48(a int4, b int8) returns bool as $$
return abs(a) > abs(b)
$$ language plpython3u strict immutable;
create function absge48(a int4, b int8) returns bool as $$
return abs(a) >= abs(b)
$$ language plpython3u strict immutable;
create function abscmp48(a int4, b int8) returns int as $$
if abs(a) < abs(b):
    return -1
if abs(a) > abs(b):
    return 1
return 0
$$ language plpython3u strict immutable;
--procs for cross type int8 int4
create function abseq84(a int8, b int4) returns bool as $$
return abs(a) == abs(b)
$$ language plpython3u strict immutable;
create function abslt84(a int8, b int4) returns bool as $$
return abs(a) < abs(b)
$$ language plpython3u strict immutable;
create function absle84(a int8, b int4) returns bool as $$
return abs(a) <= abs(b)
$$ language plpython3u strict immutable;
create function absgt84(a int8, b int4) returns bool as $$
return abs(a) > abs(b)
$$ language plpython3u strict immutable;
create function absge84(a int8, b int4) returns bool as $$
return abs(a) >= abs(b)
$$ language plpython3u strict immutable;
create function abscmp84(a int8, b int4) returns int as $$
if abs(a) < abs(b):
    return -1
if abs(a) > abs(b):
    return 1
return 0
$$ language plpython3u strict immutable;
-- |=|
create operator |=| (
  procedure = abseq4,
  leftarg = int4,
  rightarg = int4,
  commutator = |=|,
  merges);
create operator |=| (
  procedure = abseq8,
  leftarg = int8,
  rightarg = int8,
  commutator = |=|,
  merges);
create operator |=| (
  procedure = abseq48,
  leftarg = int4,
  rightarg = int8,
  commutator = |=|,
  merges);
create operator |=| (
  procedure = abseq84,
  leftarg = int8,
  rightarg = int4,
  commutator = |=|,
  merges);
-- |<|
create operator |<| (
  procedure = abslt4,
  leftarg = int4,
  rightarg = int4,
  commutator = |<|);
create operator |<| (
  procedure = abslt8,
  leftarg = int8,
  rightarg = int8,
  commutator = |<|);
create operator |<| (
  procedure = abslt48,
  leftarg = int4,
  rightarg = int8,
  commutator = |<|);
create operator |<| (
  procedure = abslt84,
  leftarg = int8,
  rightarg = int4,
  commutator = |<|);
-- |>|
create operator |>| (
  procedure = absgt4,
  leftarg = int4,
  rightarg = int4,
  commutator = |>|);
create operator |>| (
  procedure = absgt8,
  leftarg = int8,
  rightarg = int8,
  commutator = |>|);
create operator |>| (
  procedure = absgt48,
  leftarg = int4,
  rightarg = int8,
  commutator = |>|);
create operator |>| (
  procedure = absgt84,
  leftarg = int8,
  rightarg = int4,
  commutator = |>|);
-- |<=|
create operator |<=| (
  procedure = absle4,
  leftarg = int4,
  rightarg = int4,
  commutator = |<=|);
create operator |<=| (
  procedure = absle8,
  leftarg = int8,
  rightarg = int8,
  commutator = |<=|);
create operator |<=| (
  procedure = absle48,
  leftarg = int4,
  rightarg = int8,
  commutator = |<=|);
 
create operator |<=| (
  procedure = absle84,
  leftarg = int8,
  rightarg = int4,
  commutator = |<=|);
-- |>=|
create operator |>=| (
  procedure = absge4,
  leftarg = int4,
  rightarg = int4,
  commutator = |>=|);
create operator |>=| (
  procedure = absge8,
  leftarg = int8,
  rightarg = int8,
  commutator = |>=|);
create operator |>=| (
  procedure = absge48,
  leftarg = int4,
  rightarg = int8,
  commutator = |>=|);
create operator |>=| (
  procedure = absge84,
  leftarg = int8,
  rightarg = int4,
  commutator = |>=|);
--------
create operator family abs_int_ops using btree;
create operator class abs_int4_ops for type int4
  using btree FAMILY abs_int_ops  as
  operator 1 |<|,
  operator 3 |=|,
  operator 5 |>|,
  function 1 abscmp4(int4, int4);
create operator class abs_int8_ops for type int8
  using btree FAMILY abs_int_ops as
  operator 1 |<|,
  operator 3 |=|,
  operator 5 |>|,
  function 1 abscmp8(int8, int8);
alter operator family abs_int_ops using btree add
  -- cross-type comparisons int4 vs int8
  operator 1 |<| (int4, int8),
  operator 2 |<=| (int4, int8),
  operator 3 |=| (int4, int8),
  operator 4 |>=| (int4, int8),
  operator 5 |>| (int4, int8),
  function 1 abscmp48(int4, int8),
  
  -- cross-type comparisons int8 vs int4
  operator 1 |<| (int8, int4),
  operator 2 |<=| (int8, int4),
  operator 3 |=| (int8, int4),
  operator 4 |>=| (int8, int4),
  operator 5 |>| (int8, int4),
  function 1 abscmp84(int8, int4);
-- gpdb
-- start_ignore
DROP TABLE t1;
ERROR:  table "t1" does not exist
DROP TABLE t2;
ERROR:  table "t2" does not exist
-- end_ignore
create table t1 (a int, b int4)
partition by list (b)
(
  partition p1 values (1),
  partition p2 values (-1)
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2 (a int, b int8)
partition by list (b)
(
  partition p1 values (1),
  partition p2 values (-1)
);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t1 values (1,1), (1,-1), (-1,1), (-1,-1);
insert into t2 values (1,1), (1,-1), (-1,1), (-1,-1);
explain select * from t1 where t1.b |=| 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..16283.50 rows=86100 width=8)
   ->  Append  (cost=0.00..15135.50 rows=28700 width=8)
         ->  Seq Scan on t1_1_prt_p2  (cost=0.00..7496.00 rows=14350 width=8)
               Filter: (b |=| 1)
         ->  Seq Scan on t1_1_prt_p1  (cost=0.00..7496.00 rows=14350 width=8)
               Filter: (b |=| 1)
 Optimizer: Postgres query optimizer
(7 rows)

select * from t1 where t1.b |=| 1;
 a  | b  
----+----
  1 | -1
  1 |  1
 -1 | -1
 -1 |  1
(4 rows)

explain select * from t1, t2 where t1.b = t2.b and t2.b |=| 1;
                                                QUERY PLAN                                                 
-----------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=2794.50..426963.08 rows=13414380 width=20)
   ->  Hash Join  (cost=2794.50..248104.68 rows=4471460 width=20)
         Hash Cond: (t2_1_prt_p2.b = t1_1_prt_p2.b)
         ->  Redistribute Motion 3:3  (slice2; segments: 3)  (cost=0.00..14219.83 rows=25967 width=12)
               Hash Key: t2_1_prt_p2.b
               ->  Append  (cost=0.00..13700.50 rows=25967 width=12)
                     ->  Seq Scan on t2_1_prt_p2  (cost=0.00..6785.33 rows=12983 width=12)
                           Filter: (b |=| 1)
                     ->  Seq Scan on t2_1_prt_p1  (cost=0.00..6785.33 rows=12983 width=12)
                           Filter: (b |=| 1)
         ->  Hash  (cost=2077.00..2077.00 rows=57400 width=8)
               ->  Redistribute Motion 3:3  (slice3; segments: 3)  (cost=0.00..2077.00 rows=57400 width=8)
                     Hash Key: t1_1_prt_p2.b
                     ->  Append  (cost=0.00..929.00 rows=57400 width=8)
                           ->  Seq Scan on t1_1_prt_p2  (cost=0.00..321.00 rows=28700 width=8)
                           ->  Seq Scan on t1_1_prt_p1  (cost=0.00..321.00 rows=28700 width=8)
 Optimizer: Postgres query optimizer
(17 rows)

select * from t1, t2 where t1.b = t2.b and t2.b |=| 1;
 a  | b  | a  | b  
----+----+----+----
 -1 | -1 |  1 | -1
  1 | -1 |  1 | -1
 -1 | -1 | -1 | -1
  1 | -1 | -1 | -1
 -1 |  1 |  1 |  1
  1 |  1 |  1 |  1
 -1 |  1 | -1 |  1
  1 |  1 | -1 |  1
(8 rows)

explain select * from t1, t2 where t1.a = t2.a and t1.b |=| t2.b;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=1496.17..1344006.67 rows=13414380 width=20)
   ->  Hash Join  (cost=1496.17..1165148.27 rows=4471460 width=20)
         Hash Cond: (t1_1_prt_p2.a = t2_1_prt_p2.a)
         Join Filter: (t1_1_prt_p2.b |=| t2_1_prt_p2.b)
         ->  Append  (cost=0.00..929.00 rows=57400 width=8)
               ->  Seq Scan on t1_1_prt_p2  (cost=0.00..321.00 rows=28700 width=8)
               ->  Seq Scan on t1_1_prt_p1  (cost=0.00..321.00 rows=28700 width=8)
         ->  Hash  (cost=847.00..847.00 rows=51933 width=12)
               ->  Append  (cost=0.00..847.00 rows=51933 width=12)
                     ->  Seq Scan on t2_1_prt_p2  (cost=0.00..293.67 rows=25967 width=12)
                     ->  Seq Scan on t2_1_prt_p1  (cost=0.00..293.67 rows=25967 width=12)
 Optimizer: Postgres query optimizer
(12 rows)

select * from t1, t2 where t1.a = t2.a and t1.b |=| t2.b;
 a  | b  | a  | b  
----+----+----+----
 -1 | -1 | -1 |  1
 -1 | -1 | -1 | -1
 -1 |  1 | -1 |  1
 -1 |  1 | -1 | -1
  1 | -1 |  1 |  1
  1 | -1 |  1 | -1
  1 |  1 |  1 |  1
  1 |  1 |  1 | -1
(8 rows)

explain select * from t1, t2 where t1.a = t2.a and t1.b |=| t2.b and t2.b = 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=358.91..1921.43 rows=6707 width=20)
   ->  Hash Join  (cost=358.91..1832.00 rows=2236 width=20)
         Hash Cond: (t1_1_prt_p2.a = t2_1_prt_p1.a)
         Join Filter: (t1_1_prt_p2.b |=| t2_1_prt_p1.b)
         ->  Append  (cost=0.00..929.00 rows=57400 width=8)
               ->  Seq Scan on t1_1_prt_p2  (cost=0.00..321.00 rows=28700 width=8)
               ->  Seq Scan on t1_1_prt_p1  (cost=0.00..321.00 rows=28700 width=8)
         ->  Hash  (cost=358.58..358.58 rows=26 width=12)
               ->  Seq Scan on t2_1_prt_p1  (cost=0.00..358.58 rows=26 width=12)
                     Filter: (b = 1)
 Optimizer: Postgres query optimizer
(11 rows)

select * from t1, t2 where t1.a = t2.a and t1.b |=| t2.b and t2.b = 1;
 a  | b  | a  | b 
----+----+----+---
  1 | -1 |  1 | 1
  1 |  1 |  1 | 1
 -1 | -1 | -1 | 1
 -1 |  1 | -1 | 1
(4 rows)

-- CLEANUP
