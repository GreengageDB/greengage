-- start_matchsubs
-- m/ Gather Motion [12]:1  \(slice1; segments: [12]\)/
-- s/ Gather Motion [12]:1  \(slice1; segments: [12]\)/ Gather Motion XXX/
-- m/Memory Usage: \d+\w?B/
-- s/Memory Usage: \d+\w?B/Memory Usage: ###B/
-- m/Buckets: \d+/
-- s/Buckets: \d+/Buckets: ###/
-- m/Batches: \d+/
-- s/Batches: \d+/Batches: ###/
-- m/Execution time: \d+\.\d+ ms/
-- s/Execution time: \d+\.\d+ ms/Execution time: ##.### ms/
-- m/Planning time: \d+\.\d+ ms/
-- s/Planning time: \d+\.\d+ ms/Planning time: ##.### ms/
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes\./
-- s/Executor memory: (\d+)\w bytes\./Executor memory: (#####)K bytes./
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./
-- s/Executor memory: (\d+)\w bytes avg x \d+ workers, \d+\w bytes max \(seg\d+\)\./Executor memory: ####K bytes avg x #### workers, ####K bytes max (seg#)./
-- m/\(slice\d+\)    Executor memory: (\d+)\w bytes \(seg\d+\)\.  Work_mem: \d+\w bytes max\./
-- s/Executor memory: (\d+)\w bytes \(seg\d+\)\.  Work_mem: \d+\w bytes max\./Executor memory: ####K bytes (seg#).  Work_mem: ####K bytes max./
-- m/Memory used:  \d+\w?B/
-- s/Memory used:  \d+\w?B/Memory used: ###B/
-- end_matchsubs
CREATE TEMP TABLE empty_table(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- We used to incorrectly report "never executed" for a node that returns 0 rows
-- from every segment. This was misleading because "never executed" should
-- indicate that the node was never executed by its parent.
-- explain_processing_off
EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF) SELECT a FROM empty_table;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=0 loops=1)
   ->  Seq Scan on empty_table (actual rows=0 loops=1)
 Planning time: 36.594 ms
   (slice0)    Executor memory: 42K bytes.
   (slice1)    Executor memory: 42K bytes avg x 3 workers, 42K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 1.216 ms
(8 rows)

-- explain_processing_on
-- For a node that is truly never executed, we still expect "never executed" to
-- be reported
-- explain_processing_off
EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF) SELECT t1.a FROM empty_table t1 join empty_table t2 on t1.a = t2.a;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=0 loops=1)
   ->  Hash Join (actual rows=0 loops=1)
         Hash Cond: (empty_table.a = empty_table_1.a)
         ->  Seq Scan on empty_table (never executed)
         ->  Hash (actual rows=0 loops=1)
               ->  Seq Scan on empty_table empty_table_1 (actual rows=0 loops=1)
 Planning time: 20.770 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 4170K bytes avg x 3 workers, 4170K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 8.442 ms
(12 rows)

-- Test with predicate
INSERT INTO empty_table select generate_series(1, 1000)::int as a;
EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF) SELECT a FROM empty_table WHERE b = 2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=0 loops=1)
   ->  Seq Scan on empty_table (actual rows=0 loops=1)
         Filter: (b = 2)
 Planning time: 28.345 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 42K bytes avg x 3 workers, 42K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 1.561 ms
(9 rows)

ANALYZE empty_table;
EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF) SELECT a FROM empty_table WHERE b = 2;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=0 loops=1)
   ->  Seq Scan on empty_table (actual rows=0 loops=1)
         Filter: (b = 2)
 Planning time: 8.519 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 42K bytes avg x 3 workers, 42K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Pivotal Optimizer (GPORCA)
 Execution time: 1.594 ms
(9 rows)

-- explain_processing_on
-- The statistics for modifying CTEs used to be reported as "never executed",
-- when all plan nodes were executed and some stat information was expected.
-- Test QD recieving the stats from all slices and showing it in explain output.
--start_ignore
DROP TABLE IF EXISTS with_dml;
NOTICE:  table "with_dml" does not exist, skipping
--end_ignore
CREATE TABLE with_dml (i int, j int) DISTRIBUTED BY (i);
EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF)
WITH cte AS (
    INSERT INTO with_dml SELECT i, i * 100 FROM generate_series(1,5) i
    RETURNING i
) SELECT * FROM cte;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3) (actual rows=5 loops=1)
   ->  Insert on with_dml (actual rows=3 loops=1)
         ->  Redistribute Motion 1:3  (slice1; segments: 1) (actual rows=3 loops=1)
               Hash Key: i.i
               ->  Function Scan on generate_series i (actual rows=5 loops=1)
 Planning time: 20.649 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 58K bytes (seg1).  Work_mem: 17K bytes max.
   (slice2)    Executor memory: 42K bytes avg x 3 workers, 42K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 21.314 ms
(12 rows)

EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF)
WITH cte AS (
    UPDATE with_dml SET j = j + 1
    RETURNING i
) SELECT * FROM cte;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=5 loops=1)
   ->  Update on with_dml (actual rows=3 loops=1)
         ->  Seq Scan on with_dml (actual rows=3 loops=1)
 Planning time: 13.933 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 58K bytes avg x 3 workers, 58K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 4.397 ms
(9 rows)

EXPLAIN (ANALYZE, TIMING OFF, COSTS OFF)
WITH cte AS (
    DELETE FROM with_dml WHERE i > 0
    RETURNING i
) SELECT * FROM cte;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=5 loops=1)
   ->  Delete on with_dml (actual rows=3 loops=1)
         ->  Seq Scan on with_dml (actual rows=3 loops=1)
               Filter: (i > 0)
 Planning time: 8.322 ms
   (slice0)    Executor memory: 59K bytes.
   (slice1)    Executor memory: 57K bytes avg x 3 workers, 57K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 9.462 ms
(10 rows)

DROP TABLE with_dml;
--
-- Test EXPLAIN ANALYZE with DECLARE CURSOR.
-- Cursor should not be opened if we have ANALYZE in query.
--
BEGIN;
EXPLAIN (ANALYZE ON, TIMING OFF, COSTS off) DECLARE c CURSOR FOR SELECT * FROM empty_table;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=1000 loops=1)
   ->  Seq Scan on empty_table (actual rows=340 loops=1)
 Planning time: 5.057 ms
   (slice0)    Executor memory: 87K bytes.
   (slice1)    Executor memory: 58K bytes avg x 3 workers, 58K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 2.178 ms
(8 rows)

CLOSE c;
ERROR:  cursor "c" does not exist
END;
-- The query works without transaction block, because it doesn't open cursor
EXPLAIN (ANALYZE ON, TIMING OFF, COSTS off) DECLARE c CURSOR FOR SELECT * FROM empty_table;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3) (actual rows=1000 loops=1)
   ->  Seq Scan on empty_table (actual rows=340 loops=1)
 Planning time: 9.745 ms
   (slice0)    Executor memory: 87K bytes.
   (slice1)    Executor memory: 43K bytes avg x 3 workers, 43K bytes max (seg0).
 Memory used:  128000kB
 Optimizer: Postgres query optimizer
 Execution time: 1.539 ms
(8 rows)

