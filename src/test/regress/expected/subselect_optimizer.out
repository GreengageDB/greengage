--
-- SUBSELECT
--
SELECT 1 AS one WHERE 1 IN (SELECT 1);
 one 
-----
   1
(1 row)

SELECT 1 AS zero WHERE 1 NOT IN (SELECT 1);
 zero 
------
(0 rows)

SELECT 1 AS zero WHERE 1 IN (SELECT 2);
 zero 
------
(0 rows)

-- Check grammar's handling of extra parens in assorted contexts
SELECT * FROM (SELECT 1 AS x) ss;
 x 
---
 1
(1 row)

SELECT * FROM ((SELECT 1 AS x)) ss;
 x 
---
 1
(1 row)

(SELECT 2) UNION SELECT 2;
 ?column? 
----------
        2
(1 row)

((SELECT 2)) UNION SELECT 2;
 ?column? 
----------
        2
(1 row)

SELECT ((SELECT 2) UNION SELECT 2);
 ?column? 
----------
        2
(1 row)

SELECT (((SELECT 2)) UNION SELECT 2);
 ?column? 
----------
        2
(1 row)

SELECT (SELECT ARRAY[1,2,3])[1];
 array 
-------
     1
(1 row)

SELECT ((SELECT ARRAY[1,2,3]))[2];
 array 
-------
     2
(1 row)

SELECT (((SELECT ARRAY[1,2,3])))[3];
 array 
-------
     3
(1 row)

-- Set up some simple test tables
CREATE TABLE SUBSELECT_TBL (
  f1 integer,
  f2 integer,
  f3 float
);
INSERT INTO SUBSELECT_TBL VALUES (1, 2, 3);
INSERT INTO SUBSELECT_TBL VALUES (2, 3, 4);
INSERT INTO SUBSELECT_TBL VALUES (3, 4, 5);
INSERT INTO SUBSELECT_TBL VALUES (1, 1, 1);
INSERT INTO SUBSELECT_TBL VALUES (2, 2, 2);
INSERT INTO SUBSELECT_TBL VALUES (3, 3, 3);
INSERT INTO SUBSELECT_TBL VALUES (6, 7, 8);
INSERT INTO SUBSELECT_TBL VALUES (8, 9, NULL);
SELECT '' AS eight, * FROM SUBSELECT_TBL;
 eight | f1 | f2 | f3 
-------+----+----+----
       |  1 |  2 |  3
       |  2 |  3 |  4
       |  3 |  4 |  5
       |  1 |  1 |  1
       |  2 |  2 |  2
       |  3 |  3 |  3
       |  6 |  7 |  8
       |  8 |  9 |   
(8 rows)

-- Uncorrelated subselects
SELECT '' AS two, f1 AS "Constant Select" FROM SUBSELECT_TBL
  WHERE f1 IN (SELECT 1);
 two | Constant Select 
-----+-----------------
     |               1
     |               1
(2 rows)

SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL);
 six | Uncorrelated Field 
-----+--------------------
     |                  1
     |                  2
     |                  3
     |                  1
     |                  2
     |                  3
(6 rows)

SELECT '' AS six, f1 AS "Uncorrelated Field" FROM SUBSELECT_TBL
  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE
    f2 IN (SELECT f1 FROM SUBSELECT_TBL));
 six | Uncorrelated Field 
-----+--------------------
     |                  1
     |                  2
     |                  3
     |                  1
     |                  2
     |                  3
(6 rows)

SELECT '' AS three, f1, f2
  FROM SUBSELECT_TBL
  WHERE (f1, f2) NOT IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL
                         WHERE f3 IS NOT NULL);
 three | f1 | f2 
-------+----+----
       |  1 |  2
       |  6 |  7
       |  8 |  9
(3 rows)

-- Correlated subselects
SELECT '' AS six, f1 AS "Correlated Field", f2 AS "Second Field"
  FROM SUBSELECT_TBL upper
  WHERE f1 IN (SELECT f2 FROM SUBSELECT_TBL WHERE f1 = upper.f1);
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                1 |            2
     |                2 |            3
     |                3 |            4
     |                1 |            1
     |                2 |            2
     |                3 |            3
(6 rows)

SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
  FROM SUBSELECT_TBL upper
  WHERE f1 IN
    (SELECT f2 FROM SUBSELECT_TBL WHERE CAST(upper.f2 AS float) = f3);
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                2 |            4
     |                3 |            5
     |                1 |            1
     |                2 |            2
     |                3 |            3
(5 rows)

SELECT '' AS six, f1 AS "Correlated Field", f3 AS "Second Field"
  FROM SUBSELECT_TBL upper
  WHERE f3 IN (SELECT upper.f1 + f2 FROM SUBSELECT_TBL
               WHERE f2 = CAST(f3 AS integer));
 six | Correlated Field | Second Field 
-----+------------------+--------------
     |                1 |            3
     |                2 |            4
     |                3 |            5
     |                6 |            8
(4 rows)

SELECT '' AS five, f1 AS "Correlated Field"
  FROM SUBSELECT_TBL
  WHERE (f1, f2) IN (SELECT f2, CAST(f3 AS int4) FROM SUBSELECT_TBL
                     WHERE f3 IS NOT NULL);
 five | Correlated Field 
------+------------------
      |                2
      |                3
      |                1
      |                2
      |                3
(5 rows)

-- Unspecified-type literals in output columns should resolve as text
SELECT *, pg_typeof(f1) FROM
  (SELECT 'foo' AS f1 FROM generate_series(1,3)) ss ORDER BY 1;
 f1  | pg_typeof 
-----+-----------
 foo | text
 foo | text
 foo | text
(3 rows)

-- ... unless there's context to suggest differently
explain verbose select '42' union all select '43';
                      QUERY PLAN
------------------------------------------------------
 Append  (cost=0.00..0.00 rows=1 width=8)
   ->  Result  (cost=0.00..0.00 rows=1 width=8)
         Output: '42'::text
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
   ->  Result  (cost=0.00..0.00 rows=1 width=8)
         Output: '43'::text
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: optimizer=on
(11 rows)

explain verbose select '42' union all select 43;
                      QUERY PLAN
------------------------------------------------------
 Append  (cost=0.00..0.00 rows=1 width=4)
   ->  Result  (cost=0.00..0.00 rows=1 width=4)
         Output: 42
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
   ->  Result  (cost=0.00..0.00 rows=1 width=4)
         Output: 43
         ->  Result  (cost=0.00..0.00 rows=1 width=1)
               Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: optimizer=on
(11 rows)

--
-- Use some existing tables in the regression test
--
SELECT '' AS eight, ss.f1 AS "Correlated Field", ss.f3 AS "Second Field"
  FROM SUBSELECT_TBL ss
  WHERE f1 NOT IN (SELECT f1+1 FROM INT4_TBL
                   WHERE f1 != ss.f1 AND f1 < 2147483647);
 eight | Correlated Field | Second Field 
-------+------------------+--------------
       |                2 |            4
       |                3 |            5
       |                2 |            2
       |                3 |            3
       |                6 |            8
       |                8 |             
(6 rows)

select q1, float8(count(*)) / (select count(*) from int8_tbl)
from int8_tbl group by q1 order by q1;
        q1        | ?column? 
------------------+----------
              123 |      0.4
 4567890123456789 |      0.6
(2 rows)

--
-- Test cases to catch unpleasant interactions between IN-join processing
-- and subquery pullup.
--
select count(*) from
  (select 1 from tenk1 a
   where unique1 IN (select hundred from tenk1 b)) ss;
 count 
-------
   100
(1 row)

select count(distinct ss.ten) from
  (select ten from tenk1 a
   where unique1 IN (select hundred from tenk1 b)) ss;
 count 
-------
    10
(1 row)

select count(*) from
  (select 1 from tenk1 a
   where unique1 IN (select distinct hundred from tenk1 b)) ss;
 count 
-------
   100
(1 row)

select count(distinct ss.ten) from
  (select ten from tenk1 a
   where unique1 IN (select distinct hundred from tenk1 b)) ss;
 count 
-------
    10
(1 row)

--
-- Test cases to check for overenthusiastic optimization of
-- "IN (SELECT DISTINCT ...)" and related cases.  Per example from
-- Luca Pireddu and Michael Fuhr.
--
CREATE TEMP TABLE foo (id integer);
CREATE TEMP TABLE bar (id1 integer, id2 integer);
INSERT INTO foo VALUES (1);
INSERT INTO bar VALUES (1, 1);
INSERT INTO bar VALUES (2, 2);
INSERT INTO bar VALUES (3, 1);
-- These cases require an extra level of distinct-ing above subquery s
SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT DISTINCT id1, id2 FROM bar) AS s);
 id 
----
  1
(1 row)

SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT id1,id2 FROM bar GROUP BY id1,id2) AS s);
 id 
----
  1
(1 row)

SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT id1, id2 FROM bar UNION
                      SELECT id1, id2 FROM bar) AS s);
 id 
----
  1
(1 row)

-- These cases do not
SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT DISTINCT ON (id2) id1, id2 FROM bar) AS s);
 id 
----
  1
(1 row)

SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT id2 FROM bar GROUP BY id2) AS s);
 id 
----
  1
(1 row)

SELECT * FROM foo WHERE id IN
    (SELECT id2 FROM (SELECT id2 FROM bar UNION
                      SELECT id2 FROM bar) AS s);
 id 
----
  1
(1 row)

--
-- Test case to catch problems with multiply nested sub-SELECTs not getting
-- recalculated properly.  Per bug report from Didier Moens.
--
CREATE TABLE orderstest (
    approver_ref integer,
    po_ref integer,
    ordercanceled boolean
);
INSERT INTO orderstest VALUES (1, 1, false);
INSERT INTO orderstest VALUES (66, 5, false);
INSERT INTO orderstest VALUES (66, 6, false);
INSERT INTO orderstest VALUES (66, 7, false);
INSERT INTO orderstest VALUES (66, 1, true);
INSERT INTO orderstest VALUES (66, 8, false);
INSERT INTO orderstest VALUES (66, 1, false);
INSERT INTO orderstest VALUES (77, 1, false);
INSERT INTO orderstest VALUES (1, 1, false);
INSERT INTO orderstest VALUES (66, 1, false);
INSERT INTO orderstest VALUES (1, 1, false);
CREATE VIEW orders_view AS
SELECT *,
(SELECT CASE
   WHEN ord.approver_ref=1 THEN '---' ELSE 'Approved'
 END) AS "Approved",
(SELECT CASE
 WHEN ord.ordercanceled
 THEN 'Canceled'
 ELSE
  (SELECT CASE
		WHEN ord.po_ref=1
		THEN
		 (SELECT CASE
				WHEN ord.approver_ref=1
				THEN '---'
				ELSE 'Approved'
			END)
		ELSE 'PO'
	END)
END) AS "Status",
(CASE
 WHEN ord.ordercanceled
 THEN 'Canceled'
 ELSE
  (CASE
		WHEN ord.po_ref=1
		THEN
		 (CASE
				WHEN ord.approver_ref=1
				THEN '---'
				ELSE 'Approved'
			END)
		ELSE 'PO'
	END)
END) AS "Status_OK"
FROM orderstest ord;
SELECT * FROM orders_view;
 approver_ref | po_ref | ordercanceled | Approved |  Status  | Status_OK 
--------------+--------+---------------+----------+----------+-----------
            1 |      1 | f             | ---      | ---      | ---
           66 |      5 | f             | Approved | PO       | PO
           66 |      6 | f             | Approved | PO       | PO
           66 |      7 | f             | Approved | PO       | PO
           66 |      1 | t             | Approved | Canceled | Canceled
           66 |      8 | f             | Approved | PO       | PO
           66 |      1 | f             | Approved | Approved | Approved
           77 |      1 | f             | Approved | Approved | Approved
            1 |      1 | f             | ---      | ---      | ---
           66 |      1 | f             | Approved | Approved | Approved
            1 |      1 | f             | ---      | ---      | ---
(11 rows)

DROP TABLE orderstest cascade;
NOTICE:  drop cascades to view orders_view
--
-- Test cases to catch situations where rule rewriter fails to propagate
-- hasSubLinks flag correctly.  Per example from Kyle Bateman.
--
create temp table parts (
    partnum     text,
    cost        float8
);
create temp table shipped (
    ttype       char(2),
    ordnum      int4,
    partnum     text,
    value       float8
);
create temp view shipped_view as
    select * from shipped where ttype = 'wt';
create rule shipped_view_insert as on insert to shipped_view do instead
    insert into shipped values('wt', new.ordnum, new.partnum, new.value);
insert into parts (partnum, cost) values (1, 1234.56);
insert into shipped_view (ordnum, partnum, value)
    values (0, 1, (select cost from parts where partnum = '1'));
select * from shipped_view;
 ttype | ordnum | partnum |  value  
-------+--------+---------+---------
 wt    |      0 | 1       | 1234.56
(1 row)

create rule shipped_view_update as on update to shipped_view do instead
    update shipped set partnum = new.partnum, value = new.value
        where ttype = new.ttype and ordnum = new.ordnum;
update shipped_view set value = 11
    from int4_tbl a join int4_tbl b
      on (a.f1 = (select f1 from int4_tbl c where c.f1=b.f1))
    where ordnum = a.f1;
select * from shipped_view;
 ttype | ordnum | partnum | value 
-------+--------+---------+-------
 wt    |      0 | 1       |    11
(1 row)

select f1, ss1 as relabel from
    (select *, (select sum(f1) from int4_tbl b where f1 >= a.f1) as ss1
     from int4_tbl a) ss;
     f1      |  relabel   
-------------+------------
           0 | 2147607103
      123456 | 2147607103
     -123456 | 2147483647
  2147483647 | 2147483647
 -2147483647 |          0
(5 rows)

--
-- Test cases involving PARAM_EXEC parameters and min/max index optimizations.
-- Per bug report from David Sanchez i Gregori.
--
select * from (
  select max(unique1) from tenk1 as a
  where exists (select 1 from tenk1 as b where b.thousand = a.unique2)
) ss;
 max  
------
 9997
(1 row)

select * from (
  select min(unique1) from tenk1 as a
  where not exists (select 1 from tenk1 as b where b.unique2 = 10000)
) ss;
 min 
-----
   0
(1 row)

--
-- Test that an IN implemented using a UniquePath does unique-ification
-- with the right semantics, as per bug #4113.  (Unfortunately we have
-- no simple way to ensure that this test case actually chooses that type
-- of plan, but it does in releases 7.4-8.3.  Note that an ordering difference
-- here might mean that some other plan type is being used, rendering the test
-- pointless.)
--
create temp table numeric_table (num_col numeric);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'num_col' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into numeric_table values (1), (1.000000000000000000001), (2), (3);
create temp table float_table (float_col float8);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'float_col' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into float_table values (1), (2), (3);
select * from float_table
  where float_col in (select num_col from numeric_table);
 float_col 
-----------
         1
         2
         3
(3 rows)

select * from numeric_table
  where num_col in (select float_col from float_table);
         num_col         
-------------------------
                       1
                       2
 1.000000000000000000001
                       3
(4 rows)

--
-- Test case for bug #4290: bogus calculation of subplan param sets
--
create temp table ta (id int primary key, val int);
insert into ta values(1,1);
insert into ta values(2,2);
create temp table tb (id int primary key, aval int);
insert into tb values(1,1);
insert into tb values(2,1);
insert into tb values(3,2);
insert into tb values(4,2);
create temp table tc (id int primary key, aid int);
insert into tc values(1,1);
insert into tc values(2,2);
select
  ( select min(tb.id) from tb
    where tb.aval = (select ta.val from ta where ta.id = tc.aid) ) as min_tb_id
from tc;
 min_tb_id 
-----------
         1
         3
(2 rows)

--
-- Test case for 8.3 "failed to locate grouping columns" bug
--
create temp table t1 (f1 numeric(14,0), f2 varchar(30));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select * from
  (select distinct f1, f2, (select f2 from t1 x where x.f1 = up.f1) as fs
   from t1 up) ss
group by f1,f2,fs;
 f1 | f2 | fs 
----+----+----
(0 rows)

--
-- Test case for bug #5514 (mishandling of whole-row Vars in subselects)
--
create temp table table_a(id integer);
insert into table_a values (42);
create temp view view_a as select * from table_a;
select view_a from view_a;
 view_a 
--------
 (42)
(1 row)

select (select view_a) from view_a;
 view_a 
--------
 (42)
(1 row)

select (select (select view_a)) from view_a;
 view_a 
--------
 (42)
(1 row)

select (select (a.*)::text) from view_a a;
  a   
------
 (42)
(1 row)

--
-- Check that whole-row Vars reading the result of a subselect don't include
-- any junk columns therein
--
-- In GPDB, the ORDER BY in the subquery or CTE doesn't force an ordering
-- for the whole query. Mark these with the "order none" gpdiff directive,
-- so that differences in result order are ignored.
select q from (select max(f1) from int4_tbl group by f1 order by f1) q;  -- order none
       q       
---------------
 (-2147483647)
 (-123456)
 (0)
 (123456)
 (2147483647)
(5 rows)

with q as (select max(f1) from int4_tbl group by f1 order by f1)
  select q from q;  -- order none
       q       
---------------
 (-2147483647)
 (-123456)
 (0)
 (123456)
 (2147483647)
(5 rows)

--
-- Test case for sublinks pushed down into subselects via join alias expansion
--
-- Greenplum note: This query will only work with ORCA. This type of query
-- was not supported in postgres versions prior to 8.4, and thus was never
-- supported in the planner. After 8.4 versions, the planner works, but
-- the plan it creates is not currently parallel safe.
select
  (select sq1) as qq1
from
  (select exists(select 1 from int4_tbl where f1 = q2) as sq1, 42 as dummy
   from int8_tbl) sq0
  join
  int4_tbl i4 on dummy = i4.f1;
 qq1 
-----
(0 rows)

--
-- Test case for cross-type partial matching in hashed subplan (bug #7597)
--
create temp table outer_7597 (f1 int4, f2 int4);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'f1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into outer_7597 values (0, 0);
insert into outer_7597 values (1, 0);
insert into outer_7597 values (0, null);
insert into outer_7597 values (1, null);
create temp table inner_7597(c1 int8, c2 int8);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into inner_7597 values(0, null);
select * from outer_7597 where (f1, f2) not in (select * from inner_7597);
 f1 | f2 
----+----
  1 |  0
  1 |   
(2 rows)

--
-- Test case for premature memory release during hashing of subplan output
--
select '1'::text in (select '1'::name union all select '1'::name);
 ?column? 
----------
 t
(1 row)

--
-- Test case for planner bug with nested EXISTS handling
--
-- GPDB_92_MERGE_FIXME: ORCA cannot decorrelate this query, and generates
-- correct-but-slow plan that takes 45 minutes. Revisit this when ORCA can
-- reorder anti-joins
set optimizer to off;
select a.thousand from tenk1 a, tenk1 b
where a.thousand = b.thousand
  and exists ( select 1 from tenk1 c where b.hundred = c.hundred
                   and not exists ( select 1 from tenk1 d
                                    where a.thousand = d.thousand ) );
 thousand 
----------
(0 rows)

reset optimizer;
--
-- Check that nested sub-selects are not pulled up if they contain volatiles
--
explain (verbose, costs off)
  select x, x from
    (select (select current_database()) as x from (values(1),(2)) v(y)) ss;
                   QUERY PLAN
------------------------------------------------
 Result
   Output: current_database, current_database
   ->  Result
         Output: current_database
         ->  Nested Loop Left Join
               Output: current_database
               Join Filter: true
               ->  Values Scan on "Values"
                     Output: column1
               ->  Materialize
                     Output: current_database
                     ->  Result
                           Output: 'regression'::name
                           ->  Result
                                 Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: optimizer=on
(17 rows)

explain (verbose, costs off)
  select x, x from
    (select (select random()) as x from (values(1),(2)) v(y)) ss;
            QUERY PLAN             
-----------------------------------
 Subquery Scan on ss
   Output: ss.x, ss.x
   ->  Values Scan on "*VALUES*"
         Output: $0
         InitPlan 1 (returns $0)
           ->  Result
                 Output: random()
 Optimizer: Postgres query optimizer
(8 rows)

explain (verbose, costs off)
  select x, x from
    (select (select current_database() where y=y) as x from (values(1),(2)) v(y)) ss;
                            QUERY PLAN
------------------------------------------------------------------
 Result
   Output: current_database, current_database
   ->  Result
         Output: current_database
         ->  Nested Loop Left Join
               Output: current_database
               Join Filter: ("Values".column1 = "Values".column1)
               ->  Values Scan on "Values"
                     Output: column1
               ->  Materialize
                     Output: current_database
                     ->  Result
                           Output: 'regression'::name
                           ->  Result
                                 Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
 Settings: optimizer=on
(17 rows)

explain (verbose, costs off)
  select x, x from
    (select (select random() where y=y) as x from (values(1),(2)) v(y)) ss;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Subquery Scan on ss
   Output: ss.x, ss.x
   ->  Values Scan on "*VALUES*"
         Output: (SubPlan 1)
         SubPlan 1
           ->  Result
                 Output: random()
                 One-Time Filter: ("*VALUES*".column1 = "*VALUES*".column1)
 Optimizer: Postgres query optimizer
(9 rows)

--
-- Check we behave sanely in corner case of empty SELECT list (bug #8648)
--
create temp table nocolumns();
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause, and no column type is suitable for a distribution key. Creating a NULL policy entry.
select exists(select * from nocolumns);
 exists 
--------
 f
(1 row)

--
-- Check behavior with a SubPlan in VALUES (bug #14924)
--
select val.x
  from generate_series(1,10) as s(i),
  lateral (
    values ((select s.i + 1)), (s.i + 101)
  ) as val(x)
where s.i < 10 and (select val.x) < 110;
  x  
-----
   2
 102
   3
 103
   4
 104
   5
 105
   6
 106
   7
 107
   8
 108
   9
 109
  10
(17 rows)

-- another variant of that (bug #16213)
explain (verbose, costs off)
select * from
(values
  (3 not in (select * from (values (1), (2)) ss1)),
  (false)
) ss;
                                                                                                                                                                  QUERY PLAN                                                                                                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Append
   ->  Result
         Output: ((CASE WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (3 IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END) = true)
         ->  Nested Loop Left Join
               Output: (CASE WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (3 IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END)
               Join Filter: true
               ->  Result
                     Output: true
               ->  Materialize
                     Output: (CASE WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (3 IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END)
                     ->  Result
                           Output: CASE WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (3 IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END
                           ->  Aggregate
                                 Output: sum((CASE WHEN (3 = column1) THEN 1 ELSE 0 END)), sum((CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END))
                                 ->  Result
                                       Output: CASE WHEN (3 = column1) THEN 1 ELSE 0 END, CASE WHEN (column1 IS NULL) THEN 1 ELSE 0 END
                                       ->  Values Scan on "Values"
                                             Output: column1
   ->  Result
         Output: false
 Optimizer: Pivotal Optimizer (GPORCA)
(19 rows)

select * from
(values
  (3 not in (select * from (values (1), (2)) ss1)),
  (false)
) ss;
 column1 
---------
 t
 f
(2 rows)

--
-- Check sane behavior with nested IN SubLinks
-- GPDB_94_MERGE_FIXME: ORCA plan is correct but very pricy. Should we fallback to planner?
--
explain (verbose, costs off)
select * from int4_tbl where
  (case when f1 in (select unique1 from tenk1 a) then f1 else null end) in
  (select ten from tenk1 b);
                             QUERY PLAN
--------------------------------------------------------------------
 Result
   Output: int4_tbl.f1
   Filter: (SubPlan 2)
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Output: int4_tbl.f1
         ->  Seq Scan on public.int4_tbl
               Output: int4_tbl.f1
   SubPlan 1  (slice0)
     ->  Result
           Output: tenk1.unique1
           ->  Result
                 Output: true, tenk1.unique1
                 ->  Materialize
                       Output: tenk1.unique1
                       ->  Gather Motion 3:1  (slice2; segments: 3)
                             Output: tenk1.unique1
                             ->  Seq Scan on public.tenk1
                                   Output: tenk1.unique1
   SubPlan 2  (slice0)
     ->  Materialize
           Output: tenk1_1.ten
           ->  Gather Motion 3:1  (slice3; segments: 3)
                 Output: tenk1_1.ten
                 ->  Seq Scan on public.tenk1 tenk1_1
                       Output: tenk1_1.ten
 Optimizer: Pivotal Optimizer (GPORCA) version 3.1.0
 Settings: optimizer=on
(27 rows)

select * from int4_tbl where
  (case when f1 in (select unique1 from tenk1 a) then f1 else null end) in
  (select ten from tenk1 b);
 f1 
----
  0
(1 row)

--
-- Check for incorrect optimization when IN subquery contains a SRF
--
explain (verbose, costs off)
select * from int4_tbl o where (f1, f1) in
  (select f1, generate_series(1,2) / 10 g from int4_tbl i group by f1);
                              QUERY PLAN
----------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: o.f1
   ->  Hash Semi Join
         Output: o.f1
         Hash Cond: (o.f1 = "ANY_subquery".f1)
         ->  Seq Scan on public.int4_tbl o
               Output: o.f1
         ->  Hash
               Output: "ANY_subquery".f1, "ANY_subquery".g
               ->  Subquery Scan on "ANY_subquery"
                     Output: "ANY_subquery".f1, "ANY_subquery".g
                     Filter: ("ANY_subquery".f1 = "ANY_subquery".g)
                     ->  Result
                           Output: i.f1, (generate_series(1, 2) / 10)
                           ->  Seq Scan on public.int4_tbl i
                                 Output: i.f1
 Optimizer: Postgres query optimizer
(18 rows)

select * from int4_tbl o where (f1, f1) in
  (select f1, generate_series(1,2) / 10 g from int4_tbl i group by f1);
 f1 
----
  0
(1 row)

--
-- check for over-optimization of whole-row Var referencing an Append plan
--
select (select q from
         (select 1,2,3 where f1 > 0
          union all
          select 4,5,6.0 where f1 <= 0
         ) q )
from int4_tbl;
     q     
-----------
 (4,5,6.0)
 (4,5,6.0)
 (1,2,3)
 (1,2,3)
 (4,5,6.0)
(5 rows)

--
-- Check that volatile quals aren't pushed down past a DISTINCT:
-- nextval() should not be called more than the nominal number of times
--
create temp sequence ts1;
select * from
  (select distinct ten from tenk1) ss
  where ten < 10 + nextval('ts1')
  order by 1;
 ten 
-----
   0
   1
   2
   3
   4
   5
   6
   7
   8
   9
(10 rows)

select nextval('ts1');
 nextval 
---------
      11
(1 row)

--
-- Ensure that backward scan direction isn't propagated into
-- expression subqueries (bug #15336)
--
--start_ignore
begin;
declare c1 scroll cursor for
 select * from generate_series(1,4) i
  where i <> all (values (2),(3));
move forward all in c1;
fetch backward all in c1;
ERROR:  backward scan is not supported in this version of Greenplum Database
commit;
--end_ignore
-- Ensure that both planners produce valid plans for the query with the nested
-- SubLink, which contains attributes referenced in query's GROUP BY clause.
-- Due to presence of non-grouping columns in targetList, ORCA performs query
-- normalization, during which ORCA establishes a correspondence between vars
-- from targetlist entries to grouping attributes. And this process should
-- correctly handle nested structures. The inner part of SubPlan in the test
-- should contain only t.j.
-- start_ignore
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
-- end_ignore
create table t (i int, j int) distributed by (i);
insert into t values (1, 2);
explain (verbose, costs off)
select j,
(select j from (select j) q2)
from t
group by i, j;
                  QUERY PLAN                  
----------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   Output: j, ((SubPlan 1))
   ->  Result
         Output: j, (SubPlan 1)
         ->  GroupAggregate
               Output: j, i
               Group Key: t.i, t.j
               ->  Sort
                     Output: i, j
                     Sort Key: t.i, t.j
                     ->  Seq Scan on public.t
                           Output: i, j
         SubPlan 1  (slice1; segments: 3)
           ->  Result
                 Output: t.j
                 ->  Result
                       Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(18 rows)

select j,
(select j from (select j) q2)
from t
group by i, j;
 j | j 
---+---
 2 | 2
(1 row)

-- Ensure that both planners produce valid plans for the query with the nested
-- SubLink when this SubLink is inside the GROUP BY clause. Attribute, which is
-- not grouping column (1 as c), is added to query targetList to make ORCA
-- perform query normalization. During normalization ORCA modifies the vars of
-- the grouping elements of targetList in order to produce a new Query tree.
-- The modification of vars inside nested part of SubLinks should be handled
-- correctly. ORCA shouldn't fall back due to missing variable entry as a result
-- of incorrect query normalization.
explain (verbose, costs off)
select j, 1 as c,
(select j from (select j) q2) q1
from t
group by j, q1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Result
   Output: j, 1, ((SubPlan 1))
   ->  Gather Motion 3:1  (slice2; segments: 3)
         Output: j, ((SubPlan 1))
         ->  GroupAggregate
               Output: j, ((SubPlan 1))
               Group Key: t.j, ((SubPlan 1))
               ->  Sort
                     Output: j, ((SubPlan 1))
                     Sort Key: t.j, ((SubPlan 1))
                     ->  Redistribute Motion 3:3  (slice1; segments: 3)
                           Output: j, ((SubPlan 1))
                           Hash Key: j, ((SubPlan 1))
                           ->  Result
                                 Output: j, ((SubPlan 1))
                                 ->  Result
                                       Output: (SubPlan 1), j
                                       ->  Seq Scan on public.t
                                             Output: j
                                       SubPlan 1  (slice1; segments: 3)
                                         ->  Result
                                               Output: t.j
                                               ->  Result
                                                     Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(25 rows)

select j, 1 as c,
(select j from (select j) q2) q1
from t
group by j, q1;
 j | c | q1 
---+---+----
 2 | 1 |  2
(1 row)

-- Ensure that both planners produce valid plans for the query with the nested
-- SubLink, and this SubLink is under aggregation. ORCA shouldn't fall back due
-- to missing variable entry as a result of incorrect query normalization. ORCA
-- should correctly process args of the aggregation during normalization.
explain (verbose, costs off)
select (select max((select t.i))) from t;
                      QUERY PLAN                      
------------------------------------------------------
 Result
   Output: (SubPlan 2)
   ->  Aggregate
         Output: max((max((SubPlan 1))))
         ->  Gather Motion 3:1  (slice1; segments: 3)
               Output: (max((SubPlan 1)))
               ->  Aggregate
                     Output: max((SubPlan 1))
                     ->  Seq Scan on public.t
                           Output: i
                     SubPlan 1  (slice1; segments: 3)
                       ->  Result
                             Output: t.i
                             ->  Result
                                   Output: true
   SubPlan 2  (slice0)
     ->  Result
           Output: (max((max((SubPlan 1)))))
           ->  Result
                 Output: true
 Optimizer: Pivotal Optimizer (GPORCA)
(21 rows)

select (select max((select t.i))) from t;
 max 
-----
   1
(1 row)

drop table t;
-- Fix join condition expression lost as pull up sublink to join.
create table tl1(a int, b int, c int, d int) distributed by (a);
create table tl2(a int, b int, c int, d int) distributed by (a);
create table tl3(a int, b int, c int, d int) distributed by (a);
create table tl4(a int, b int, c int, d int) distributed by (a);
insert into tl1 values (-1, 3, 1, 0);
insert into tl2 values (2, 1, 1, 0);
insert into tl2 values (3, 1, 1, 0);
insert into tl2 values (1, 1, 1, 0);
insert into tl3 values (9, 9, 1, 9);
insert into tl4 values (-1, -1, -1, -1);
explain(costs off, verbose on)
select * from tl1
where
  tl1.b = (
    select
      max(tl2.a)
    from
      tl2 join tl4
      on tl4.d = tl2.d
    where
      tl2.b = tl1.c
  );
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: tl1.a, tl1.b, tl1.c, tl1.d
   Hash Cond: ((tl1.b = (max((max(tl2.a))))) AND (tl1.c = tl2.b))
   ->  Gather Motion 3:1  (slice1; segments: 3)
         Output: tl1.a, tl1.b, tl1.c, tl1.d
         ->  Seq Scan on public.tl1
               Output: tl1.a, tl1.b, tl1.c, tl1.d
   ->  Hash
         Output: tl2.b, (max((max(tl2.a))))
         ->  Gather Motion 3:1  (slice4; segments: 3)
               Output: tl2.b, (max((max(tl2.a))))
               ->  Result
                     Output: tl2.b, (max((max(tl2.a))))
                     ->  GroupAggregate
                           Output: max((max(tl2.a))), tl2.b
                           Group Key: tl2.b
                           ->  Sort
                                 Output: tl2.b, (max(tl2.a))
                                 Sort Key: tl2.b
                                 ->  Redistribute Motion 3:3  (slice3; segments: 3)
                                       Output: tl2.b, (max(tl2.a))
                                       Hash Key: tl2.b
                                       ->  Result
                                             Output: tl2.b, (max(tl2.a))
                                             ->  GroupAggregate
                                                   Output: max(tl2.a), tl2.b
                                                   Group Key: tl2.b
                                                   ->  Sort
                                                         Output: tl2.a, tl2.b
                                                         Sort Key: tl2.b
                                                         ->  Hash Join
                                                               Output: tl2.a, tl2.b
                                                               Hash Cond: (tl2.d = tl4.d)
                                                               ->  Seq Scan on public.tl2
                                                                     Output: tl2.a, tl2.b, tl2.d
                                                               ->  Hash
                                                                     Output: tl4.d
                                                                     ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                                                           Output: tl4.d
                                                                           ->  Seq Scan on public.tl4
                                                                                 Output: tl4.d
 Optimizer: Pivotal Optimizer (GPORCA)
(42 rows)

select * from tl1
where
  tl1.b = (
    select
      max(tl2.a)
    from
      tl2 join tl4
      on tl4.d = tl2.d
    where
      tl2.b = tl1.c
  );
 a | b | c | d 
---+---+---+---
(0 rows)

drop table tl1;
drop table tl2;
drop table tl3;
drop table tl4;
