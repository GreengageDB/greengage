-- turn off autostats so we don't have to worry about the logging of the autostat queries
set gp_autostats_mode = None;
-- create needed tables (in a transaction, for speed)
begin;
create table direct_test
(
  key int NULL,
  value varchar(50) NULL
)
distributed by (key); 
create table direct_test_two_column
(
  key1 int NULL,
  key2 int NULL,
  value varchar(50) NULL
)
distributed by (key1, key2);
create table direct_test_bitmap  as select '2008-02-01'::DATE AS DT,
        case when j <= 996
                then 0
        when j<= 998 then 2
        when j<=999 then 3
        when i%10000 < 9000 then 4
        when i%10000 < 9800 then 5
        when i % 10000 <= 9998 then 5 else 6
        end as ind,
        (i*1017-j)::bigint as s from generate_series(1,10) i, generate_series(1,10) j distributed by (dt);
create index direct_test_bitmap_idx on direct_test_bitmap using bitmap (ind, dt);
CREATE TABLE direct_test_partition (trans_id int, date date, amount decimal(9,2), region text) DISTRIBUTED BY (trans_id) PARTITION BY RANGE (date) (START (date '2008-01-01') INCLUSIVE END (date '2009-01-01') EXCLUSIVE EVERY (INTERVAL '1month') );
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_1" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_2" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_3" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_4" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_5" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_6" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_7" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_8" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_9" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_10" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_11" for table "direct_test_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_partition_1_prt_12" for table "direct_test_partition"
create unique index direct_test_uk on direct_test_partition(trans_id);
NOTICE:  building index for child partition "direct_test_partition_1_prt_1"
NOTICE:  building index for child partition "direct_test_partition_1_prt_2"
NOTICE:  building index for child partition "direct_test_partition_1_prt_3"
NOTICE:  building index for child partition "direct_test_partition_1_prt_4"
NOTICE:  building index for child partition "direct_test_partition_1_prt_5"
NOTICE:  building index for child partition "direct_test_partition_1_prt_6"
NOTICE:  building index for child partition "direct_test_partition_1_prt_7"
NOTICE:  building index for child partition "direct_test_partition_1_prt_8"
NOTICE:  building index for child partition "direct_test_partition_1_prt_9"
NOTICE:  building index for child partition "direct_test_partition_1_prt_10"
NOTICE:  building index for child partition "direct_test_partition_1_prt_11"
NOTICE:  building index for child partition "direct_test_partition_1_prt_12"
create table direct_test_range_partition (a int, b int, c int, d int) distributed by (a) partition by range(d) (start(1) end(10) every(1));
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_1" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_2" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_3" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_4" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_5" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_6" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_7" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_8" for table "direct_test_range_partition"
NOTICE:  CREATE TABLE will create partition "direct_test_range_partition_1_prt_9" for table "direct_test_range_partition"
insert into direct_test_range_partition select i, i+1, i+2, i+3 from generate_series(1, 2) i;
commit;
-- enable printing of printing info
set test_print_direct_dispatch_info=on;
-- Constant single-row insert, one column in distribution
-- DO direct dispatch
insert into direct_test values (100, 'cow');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
 100 | cow
(1 row)

-- Constant single-row update, one column in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
update direct_test set value = 'horse' where key = 100;
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
 100 | horse
(1 row)

-- Constant single-row delete, one column in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
delete from direct_test where key = 100;
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
(0 rows)

-- Constant single-row insert, one column in distribution
-- DO direct dispatch
insert into direct_test values (NULL, 'cow');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
     | cow
(1 row)

-- DELETE with an IS NULL predicate
-- DO direct dispatch
delete from direct_test where key is null;
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- Same single-row insert as above, but with DEFAULT instead of an explicit values.
-- DO direct dispatch
insert into direct_test values (default, 'cow');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test order by key, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
     | cow
(1 row)

-- Constant single-row insert, two columns in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
insert into direct_test_two_column values (100, 101, 'cow');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key1 | key2 | value 
------+------+-------
  100 |  101 | cow
(1 row)

-- Constant single-row update, two columns in distribution
-- DO direct dispatch
-- Known_opt_diff: MPP-21346
update direct_test_two_column set value = 'horse' where key1 = 100 and key2 = 101;
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key1 | key2 | value 
------+------+-------
  100 |  101 | horse
(1 row)

-- Constant single-row delete, two columns in distribution
-- DO direct dispatch
delete from direct_test_two_column where key1 = 100 and key2 = 101;
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- verify
select * from direct_test_two_column order by key1, key2, value;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key1 | key2 | value 
------+------+-------
(0 rows)

-- expression single-row insert
-- DO direct dispatch
insert into direct_test (key, value) values ('123',123123);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
insert into direct_test (key, value) values (sqrt(100*10*10),123123);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
--
-- should get 100 and 123 as the values
--
select * from direct_test where value = '123123' order by key;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value  
-----+--------
 100 | 123123
 123 | 123123
(2 rows)

delete from direct_test where value = '123123';
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
--------------------------------------------------------------------------------
-- Multiple row update, where clause lists multiple values which hash differently so no direct dispatch
--
-- note that if the hash function for values changes then certain segment configurations may actually 
--                hash all these values to the same content! (and so test would change)
--
update direct_test set value = 'pig' where key in (1,2,3,4,5);
INFO:  (slice 0) Dispatch command to ALL contents: 1 0 2
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to ALL contents: 1 0 2
update direct_test_two_column set value = 'pig' where key1 = 100 and key2 in (1,2,3,4);
INFO:  (slice 0) Dispatch command to PARTIAL contents: 1 2
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to PARTIAL contents: 1 2
update direct_test_two_column set value = 'pig' where key1 in (100,101,102,103,104) and key2 in (1);
INFO:  (slice 0) Dispatch command to ALL contents: 1 0 2
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to ALL contents: 1 0 2
update direct_test_two_column set value = 'pig' where key1 in (100,101) and key2 in (1,2);
INFO:  (slice 0) Dispatch command to PARTIAL contents: 1 2
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to PARTIAL contents: 1 2
-- Multiple row update, where clause lists values which all hash to same segment
-- DO direct dispatch
-- CAN'T IMPLEMENT THIS TEST BECAUSE THE # of segments changes again (unless we use a # of segments function, and exploit the simple nature of int4 hashing -- can we do that?)
------------------------------
-- Transaction cases
--
-- note that single-row insert can happen BUT DTM will always go to all contents
--
begin;
insert into direct_test values (1,100);
INFO:  (slice 0) Dispatch command to SINGLE content
rollback;
INFO:  Distributed transaction command 'Distributed Abort (No Prepared)' to SINGLE content
begin;
insert into direct_test values (1,100);
INFO:  (slice 0) Dispatch command to SINGLE content
insert into direct_test values (2,100);
INFO:  (slice 0) Dispatch command to SINGLE content
insert into direct_test values (3,100);
INFO:  (slice 0) Dispatch command to SINGLE content
rollback;
INFO:  Distributed transaction command 'Distributed Abort (No Prepared)' to PARTIAL contents: 1 0
-------------------
-- MPP-7634: bitmap index scan
select count(*) from direct_test_bitmap where dt='2008-02-05';
INFO:  (slice 1) Dispatch command to SINGLE content
 count 
-------
     0
(1 row)

select count(*) from direct_test_bitmap where dt='2008-02-01';
INFO:  (slice 1) Dispatch command to SINGLE content
 count 
-------
   100
(1 row)

----------------------------------------------------------------------------------
-- MPP-7637: partitioned table
--
insert into direct_test_partition values (1,'2008-01-02',1,'usa');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
select * from direct_test_partition where trans_id =1;
INFO:  (slice 1) Dispatch command to SINGLE content
 trans_id |    date    | amount | region 
----------+------------+--------+--------
        1 | 01-02-2008 |   1.00 | usa
(1 row)

----------------------------------------------------------------------------------
-- MPP-7638: range table partition
--
select count(*) from direct_test_range_partition where a =1;
INFO:  (slice 1) Dispatch command to SINGLE content
 count 
-------
     1
(1 row)

----------------------------------------------------------------------------------
-- Prepared statements
--  do same as above ones but using prepared statements, verify data goes to the right spot
prepare test_insert (int) as insert into direct_test values ($1,100);
execute test_insert(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute test_insert(2);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
select * from direct_test;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
     | cow
   1 | 100
   2 | 100
(3 rows)

prepare test_update (int) as update direct_test set value = 'boo' where key = $1;
-- Known_opt_diff: MPP-21346
execute test_update(2);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
select * from direct_test;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 key | value 
-----+-------
   1 | 100
   2 | boo
     | cow
(3 rows)

------------------------
-- A subquery
--
set test_print_direct_dispatch_info=off;
CREATE TEMP TABLE direct_dispatch_foo (id integer) DISTRIBUTED BY (id);
CREATE TEMP TABLE direct_dispatch_bar (id1 integer, id2 integer) DISTRIBUTED by (id1);
INSERT INTO direct_dispatch_foo VALUES (1);
INSERT INTO direct_dispatch_bar VALUES (1, 1);
INSERT INTO direct_dispatch_bar VALUES (2, 2);
INSERT INTO direct_dispatch_bar VALUES (3, 1);
set test_print_direct_dispatch_info=on;
-- Known_opt_diff: MPP-21346
SELECT * FROM direct_dispatch_foo WHERE id IN
    (SELECT id2 FROM (SELECT DISTINCT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 1) AS s) ORDER BY 1;
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
 id 
----
  1
(1 row)

--
-- this one will NOT do direct dispatch because it is a many slice query and those are disabled right now
SELECT * FROM direct_dispatch_foo WHERE id IN
    (SELECT id2 FROM (SELECT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 1 UNION
                      SELECT id1, id2 FROM direct_dispatch_bar WHERE direct_dispatch_bar.id1 = 2) AS s) ORDER BY 1;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 3) Dispatch command to ALL contents: 0 1 2
 id 
----
  1
(1 row)

-- simple one using an expression on the variable
SELECT * from direct_dispatch_foo WHERE id * id = 1;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 id 
----
  1
(1 row)

SELECT * from direct_dispatch_foo WHERE id * id = 1 OR id = 1;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 id 
----
  1
(1 row)

SELECT * from direct_dispatch_foo where id * id = 1 AND id = 1;
INFO:  (slice 1) Dispatch command to SINGLE content
 id 
----
  1
(1 row)

-- main plan is direct dispatch and also has init plans
update direct_dispatch_bar set id2 = 1 where id1 = 1 and exists (select * from direct_dispatch_foo where id = 2);
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to PARTIAL contents: 0 1
-- init plan to see how transaction escalation happens
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id = (select max(id2) from direct_dispatch_bar where id1 = 5);
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to ALL contents: 2 0 1
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id * id = (select max(id2) from direct_dispatch_bar where id1 = 5) AND id = 3;
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to PARTIAL contents: 2 0
-- Known_opt_diff: MPP-21346
delete from direct_dispatch_foo where id * id = (select max(id2) from direct_dispatch_bar) AND id = 3;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to ALL contents: 0 1 2
-- tests with subplans (MPP-22019)
CREATE TABLE MPP_22019_a ( i INT, j INT) DISTRIBUTED BY (i);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
INSERT INTO MPP_22019_a (
 SELECT i, i * i FROM generate_series(1, 10) AS i);
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
CREATE TABLE MPP_22019_b (i INT, j INT) DISTRIBUTED BY (i);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
INSERT INTO MPP_22019_b (SELECT i, i * i FROM generate_series(1, 10) AS i);
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
EXPLAIN SELECT a.* FROM MPP_22019_a a INNER JOIN MPP_22019_b b ON a.i = b.i WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = b.j) and a.i = 1;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)  (cost=1176.34..4363211.36 rows=3707 width=8)
   ->  Nested Loop  (cost=1176.34..4363211.36 rows=1236 width=8)
         Join Filter: (subplan)
         ->  Seq Scan on mpp_22019_a a  (cost=0.00..1176.25 rows=29 width=8)
               Filter: i = 1
         ->  Materialize  (cost=1176.34..1177.20 rows=29 width=8)
               ->  Seq Scan on mpp_22019_b b  (cost=0.00..1176.25 rows=29 width=8)
                     Filter: i = 1
         SubPlan 1
           ->  Result  (cost=1176.34..1177.20 rows=29 width=4)
                 Filter: a2.j = $0
                 ->  Materialize  (cost=1176.34..1177.20 rows=29 width=4)
                       ->  Broadcast Motion 3:3  (slice1; segments: 3)  (cost=0.00..1176.25 rows=29 width=4)
                             ->  Seq Scan on mpp_22019_a a2  (cost=0.00..1176.25 rows=29 width=4)
(14 rows)

SELECT a.* FROM MPP_22019_a a INNER JOIN MPP_22019_b b ON a.i = b.i WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = b.j) and a.i = 1;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
 i | j 
---+---
(0 rows)

SELECT a.* FROM MPP_22019_a a  WHERE a.j NOT IN (SELECT j FROM MPP_22019_a a2 where a2.j = a.j) and a.i = 1;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
 i | j 
---+---
(0 rows)

--
-- Test direct dispatch with volatile functions, and nextval().
--
-- Simple table.
create table ddtesttab (i int, j int, k int8) distributed by (k);
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
create sequence ddtestseq;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, 5);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
drop table ddtesttab;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- Partitioned table, with mixed distribution keys.
create table ddtesttab (i int, j int, k int8) distributed by (i) partition by
range(k)
(start(1) end(20) every(10));
NOTICE:  CREATE TABLE will create partition "ddtesttab_1_prt_1" for table "ddtesttab"
NOTICE:  CREATE TABLE will create partition "ddtesttab_1_prt_2" for table "ddtesttab"
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, 5);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- One partition is randomly distributed, while others are distributed by key.
alter table ddtesttab_1_prt_2 set distributed randomly;
ERROR:  can't set the distribution policy of "ddtesttab_1_prt_2"
HINT:  Distribution policy can be set for an entire partitioned table, not for one of its leaf parts or an interior branch.
insert into ddtesttab values (1, 1, 5);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
insert into ddtesttab values (1, 1, 5 + random()); -- volatile expression as distribution key
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into ddtesttab values (1, 1, 5 + nextval('ddtestseq'));
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
drop table ddtesttab;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
drop sequence ddtestseq;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- Test prepare statement will choose custom plan instead of generic plan when
-- considering no direct dispatch cost.
create table test_prepare(i int, j int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- insert case
prepare p1 as insert into test_prepare values($1, 1);
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- the first 5 execute will always use custom plan, focus on the 6th one.
execute p1(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- update case
prepare p2 as update test_prepare set j =2 where i =$1;
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
execute p2(1);
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
-- select case
prepare p3 as select * from test_prepare where i =$1;
execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

execute p3(1);
INFO:  (slice 1) Dispatch command to SINGLE content
 i | j 
---+---
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
 1 | 2
(6 rows)

drop table test_prepare;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- Tests to check direct dispatch if the table is randomly distributed and the
-- filter has condition on gp_segment_id
-- NOTE: Only EXPLAIN query included, output of SELECT query is not shown.
-- Since the table is distributed randomly, the output of SELECT query
-- will differ everytime new table is created, and hence the during comparision
-- the tests will fail.
drop table if exists bar_randDistr;
NOTICE:  table "bar_randdistr" does not exist, skipping
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to ALL contents: 0 1 2
create table bar_randDistr(col1 int, col2 int) distributed randomly;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into bar_randDistr select i,i*2 from generate_series(1, 10)i;
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- Case 1 : simple conditions on gp_segment_id
explain (costs off) select gp_segment_id, * from bar_randDistr where gp_segment_id=0;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on bar_randdistr
         Filter: (gp_segment_id = 0)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, * from bar_randDistr where gp_segment_id=1 or gp_segment_id=2;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on bar_randdistr
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, count(*) from bar_randDistr group by gp_segment_id;
                         QUERY PLAN                         
------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  HashAggregate
         Group Key: bar_randdistr.gp_segment_id
         ->  Redistribute Motion 3:3  (slice1; segments: 3)
               Hash Key: bar_randdistr.gp_segment_id
               ->  HashAggregate
                     Group Key: bar_randdistr.gp_segment_id
                     ->  Seq Scan on bar_randdistr
 Optimizer: Postgres query optimizer
(9 rows)

-- Case2: Conjunction scenario with filter condition on gp_segment_id and column
explain (costs off) select gp_segment_id, * from bar_randDistr where gp_segment_id=0 and col1 between 1 and 10;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on bar_randdistr
         Filter: ((col1 >= 1) AND (col1 <= 10) AND (gp_segment_id = 0))
 Optimizer: Postgres query optimizer
(4 rows)

-- Case3: Disjunction scenario with filter condition on gp_segment_id and column
explain (costs off) select gp_segment_id, * from bar_randDistr where gp_segment_id=1 or (col1=6 and gp_segment_id=2);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on bar_randdistr
         Filter: ((gp_segment_id = 1) OR ((col1 = 6) AND (gp_segment_id = 2)))
 Optimizer: Postgres query optimizer
(4 rows)

-- Case4: Scenario with constant/variable column and constant/variable gp_segment_id
explain (costs off) select gp_segment_id, * from bar_randDistr where col1 =3 and gp_segment_id in (0,1);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on bar_randdistr
         Filter: ((gp_segment_id = ANY ('{0,1}'::integer[])) AND (col1 = 3))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, * from bar_randDistr where col1 =3 and gp_segment_id <>1;
                      QUERY PLAN                       
-------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on bar_randdistr
         Filter: ((gp_segment_id <> 1) AND (col1 = 3))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, * from bar_randDistr where col1 between 1 and 5 and gp_segment_id =0;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on bar_randdistr
         Filter: ((col1 >= 1) AND (col1 <= 5) AND (gp_segment_id = 0))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, * from bar_randDistr where col1 in (1,5) and gp_segment_id <> 0;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on bar_randdistr
         Filter: ((col1 = ANY ('{1,5}'::integer[])) AND (gp_segment_id <> 0))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, * from bar_randDistr where col1 in (1,5) and gp_segment_id in (0,1);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on bar_randdistr
         Filter: ((col1 = ANY ('{1,5}'::integer[])) AND (gp_segment_id = ANY ('{0,1}'::integer[])))
 Optimizer: Postgres query optimizer
(4 rows)

-- Case5: Scenarios with special conditions
create function afunc() returns integer as $$ begin return 42; end; $$ language plpgsql;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
create function immutable_func() returns integer as $$ begin return 42; end; $$ language plpgsql immutable;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
explain (costs off) select * from bar_randDistr where col1 = 1;
                QUERY PLAN                
------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on bar_randdistr
         Filter: (col1 = 1)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select * from bar_randDistr where gp_segment_id % 2 = 0;
                QUERY PLAN                 
-------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on bar_randdistr
         Filter: ((gp_segment_id % 2) = 0)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select * from bar_randDistr where gp_segment_id=immutable_func();
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on bar_randdistr
         Filter: (gp_segment_id = 42)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select * from bar_randDistr where gp_segment_id=afunc();
                QUERY PLAN                 
-------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on bar_randdistr
         Filter: (gp_segment_id = afunc())
 Optimizer: Postgres query optimizer
(4 rows)

drop table if exists bar_randDistr;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
-- test direct dispatch via gp_segment_id qual
create table t_test_dd_via_segid(id int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into t_test_dd_via_segid select * from generate_series(1, 6);
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=0;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 0)
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=0;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | id 
---------------+----
             0 |  2
             0 |  3
             0 |  4
(3 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 1)
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | id 
---------------+----
             1 |  1
(1 row)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=2;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 2)
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=2;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | id 
---------------+----
             2 |  5
             2 |  6
(2 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2;
INFO:  (slice 1) Dispatch command to PARTIAL contents: 1 2
 gp_segment_id | id 
---------------+----
             1 |  1
             2 |  5
             2 |  6
(3 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2 or gp_segment_id=3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2) OR (gp_segment_id = 3))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2 or gp_segment_id=3;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 gp_segment_id | id 
---------------+----
             2 |  5
             2 |  6
             1 |  1
(3 rows)

explain (costs off) select t1.gp_segment_id, t2.gp_segment_id, * from t_test_dd_via_segid t1, t_test_dd_via_segid t2 where t1.gp_segment_id=t2.id;
                         QUERY PLAN                         
------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  Hash Join
         Hash Cond: (t1.gp_segment_id = t2.id)
         ->  Redistribute Motion 3:3  (slice1; segments: 3)
               Hash Key: t1.gp_segment_id
               ->  Seq Scan on t_test_dd_via_segid t1
         ->  Hash
               ->  Seq Scan on t_test_dd_via_segid t2
 Optimizer: Postgres query optimizer
(9 rows)

select t1.gp_segment_id, t2.gp_segment_id, * from t_test_dd_via_segid t1, t_test_dd_via_segid t2 where t1.gp_segment_id=t2.id;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
 gp_segment_id | gp_segment_id | id | id 
---------------+---------------+----+----
             1 |             1 |  1 |  1
             2 |             0 |  5 |  2
             2 |             0 |  6 |  2
(3 rows)

explain (costs off) select gp_segment_id, count(*) from t_test_dd_via_segid group by gp_segment_id;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  HashAggregate
         Group Key: t_test_dd_via_segid.gp_segment_id
         ->  Redistribute Motion 3:3  (slice1; segments: 3)
               Hash Key: t_test_dd_via_segid.gp_segment_id
               ->  HashAggregate
                     Group Key: t_test_dd_via_segid.gp_segment_id
                     ->  Seq Scan on t_test_dd_via_segid
 Optimizer: Postgres query optimizer
(9 rows)

select gp_segment_id, count(*) from t_test_dd_via_segid group by gp_segment_id;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 2) Dispatch command to ALL contents: 0 1 2
 gp_segment_id | count 
---------------+-------
             0 |     3
             1 |     1
             2 |     2
(3 rows)

-- test direct dispatch via gp_segment_id qual with conjunction
create table t_test_dd_via_segid_conj(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into t_test_dd_via_segid_conj select i,i from generate_series(1, 10)i;
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where gp_segment_id=0 and a between 1 and 10;
                            QUERY PLAN                            
------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((a >= 1) AND (a <= 10) AND (gp_segment_id = 0))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where gp_segment_id=0 and a between 1 and 10;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | a | b 
---------------+---+---
             0 | 2 | 2
             0 | 3 | 3
             0 | 4 | 4
             0 | 7 | 7
             0 | 8 | 8
(5 rows)

explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where b between 1 and 5 and gp_segment_id=2 and a between 1 and 10;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((b >= 1) AND (b <= 5) AND (a >= 1) AND (a <= 10) AND (gp_segment_id = 2))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where b between 1 and 5 and gp_segment_id=2 and a between 1 and 10;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | a | b 
---------------+---+---
             2 | 5 | 5
(1 row)

--test direct dispatch via gp_segment_id with disjunction
explain (costs off) select * from t_test_dd_via_segid_conj where gp_segment_id=1 or (a=3 and gp_segment_id=2);
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((gp_segment_id = 1) OR ((a = 3) AND (gp_segment_id = 2)))
 Optimizer: Postgres query optimizer
(4 rows)

select * from t_test_dd_via_segid_conj where gp_segment_id=1 or (a=3 and gp_segment_id=2);
INFO:  (slice 1) Dispatch command to PARTIAL contents: 1 2
 a | b 
---+---
 1 | 1
(1 row)

--test direct dispatch with constant distribution column and constant/variable gp_segment_id condition
explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 10 and gp_segment_id in (0,1);
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((b >= 1) AND (b <= 10) AND (gp_segment_id = ANY ('{0,1}'::integer[])) AND (a = 3))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 10 and gp_segment_id in (0,1);
INFO:  (slice 1) Dispatch command to PARTIAL contents: 1 0
 gp_segment_id | a | b 
---------------+---+---
             0 | 3 | 3
(1 row)

explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 10 and gp_segment_id <>1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((b >= 1) AND (b <= 10) AND (gp_segment_id <> 1) AND (a = 3))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 10 and gp_segment_id <>1;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | a | b 
---------------+---+---
             0 | 3 | 3
(1 row)

explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 100 and gp_segment_id =0;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((b >= 1) AND (b <= 100) AND (a = 3) AND (gp_segment_id = 0))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where a =3 and b between 1 and 100 and gp_segment_id =0;
INFO:  (slice 1) Dispatch command to SINGLE content
 gp_segment_id | a | b 
---------------+---+---
             0 | 3 | 3
(1 row)

explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where a in (1,3) and gp_segment_id <> 0;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((a = ANY ('{1,3}'::integer[])) AND (gp_segment_id <> 0))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where a in (1,3) and gp_segment_id <> 0;
INFO:  (slice 1) Dispatch command to PARTIAL contents: 1 0
 gp_segment_id | a | b 
---------------+---+---
             1 | 1 | 1
(1 row)

explain (costs off) select gp_segment_id, * from t_test_dd_via_segid_conj where a in (1,3) and gp_segment_id in (0,1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid_conj
         Filter: ((a = ANY ('{1,3}'::integer[])) AND (gp_segment_id = ANY ('{0,1}'::integer[])))
 Optimizer: Postgres query optimizer
(4 rows)

select gp_segment_id, * from t_test_dd_via_segid_conj where a in (1,3) and gp_segment_id in (0,1);
INFO:  (slice 1) Dispatch command to PARTIAL contents: 1 0
 gp_segment_id | a | b 
---------------+---+---
             0 | 3 | 3
             1 | 1 | 1
(2 rows)

-- test direct dispatch via gp_segment_id qual on distributed randomly table
alter table t_test_dd_via_segid set distributed randomly;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=0;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 0)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 1)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=2;
                QUERY PLAN                
------------------------------------------
 Gather Motion 1:1  (slice1; segments: 1)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: (gp_segment_id = 2)
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2;
                          QUERY PLAN                          
--------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2))
 Optimizer: Postgres query optimizer
(4 rows)

explain (costs off) select gp_segment_id, id from t_test_dd_via_segid where gp_segment_id=1 or gp_segment_id=2 or gp_segment_id=3;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)
   ->  Seq Scan on t_test_dd_via_segid
         Filter: ((gp_segment_id = 1) OR (gp_segment_id = 2) OR (gp_segment_id = 3))
 Optimizer: Postgres query optimizer
(4 rows)

-- https://github.com/GreengageDB/greengage/issues/14887
-- If opno of clause does not belong to opfamily of distributed key,
-- do not use direct dispatch to resolve wrong result
create table t_14887(a varchar);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into t_14887 values('a   ');
INFO:  (slice 0) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Commit (one-phase)' to SINGLE content
explain select * from t_14887 where a = 'a'::bpchar;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..760.00 rows=53 width=32)
   ->  Seq Scan on t_14887  (cost=0.00..760.00 rows=18 width=32)
         Filter: ((a)::bpchar = 'a'::bpchar)
 Optimizer: Postgres query optimizer
(4 rows)

select * from t_14887 where a = 'a'::bpchar;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
  a   
------
 a   
(1 row)

-- texteq does not belong to the hash opfamily of the table's citext distkey.
-- But from the implementation can deduce: texteq ==> citext_eq, and we can
-- do the direct dispatch.
-- But we do not have the kind of implication rule in Postgres: texteq ==> citext_eq.
CREATE EXTENSION if not exists citext;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
drop table t_14887;
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
create table t_14887(a citext);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
insert into t_14887 values('A'),('a');
INFO:  (slice 0) Dispatch command to ALL contents: 0 1 2
INFO:  (slice 1) Dispatch command to SINGLE content
INFO:  Distributed transaction command 'Distributed Prepare' to ALL contents: 0 1 2
INFO:  Distributed transaction command 'Distributed Commit Prepared' to ALL contents: 0 1 2
explain select * from t_14887 where a = 'a'::text;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Gather Motion 3:1  (slice1; segments: 3)  (cost=0.00..760.00 rows=53 width=32)
   ->  Seq Scan on t_14887  (cost=0.00..760.00 rows=18 width=32)
         Filter: ((a)::text = 'a'::text)
 Optimizer: Postgres query optimizer
(4 rows)

select * from t_14887 where a = 'a'::text;
INFO:  (slice 1) Dispatch command to ALL contents: 0 1 2
 a 
---
 a
(1 row)

-- cleanup
set test_print_direct_dispatch_info=off;
begin;
drop table if exists direct_test;
drop table if exists direct_test_two_column;
drop table if exists direct_test_bitmap;
drop table if exists direct_test_partition;
drop table if exists direct_test_range_partition;
drop table if exists direct_dispatch_foo;
drop table if exists direct_dispatch_bar;
drop table if exists t_14887;
drop EXTENSION citext;
drop table if exists MPP_22019_a;
drop table if exists MPP_22019_b;
commit;
