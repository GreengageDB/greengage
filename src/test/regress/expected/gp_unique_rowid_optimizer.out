-- this SQL suites only test planners unique rowid path
-- set fault inject at the start of the file and reset
-- it when finish. This SQL tests planner but let's also
-- run the queries under ORCA (means without set optimizer = off here).
create extension if not exists gp_inject_fault;
select gp_inject_fault_infinite('low_unique_rowid_path_cost', 'skip', dbid) from gp_segment_configuration where role = 'p' and content = -1;
 gp_inject_fault_infinite 
--------------------------
 Success:
(1 row)

-- Test index only scan path not error out when semjoin.
-- Greengage might add unique_rowid_path to handle semjoin,
-- that was introduced in Greengage long before, and after
-- merging so many commits from upstream, new logic might
-- not work well. The following cases test for this.
create table t_indexonly_cdbdedup_1(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t_indexonly_cdbdedup_2(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create index t_indexonly_cdbdedup_2_index on t_indexonly_cdbdedup_2(b);
set enable_seqscan = off;
set enable_bitmapscan = off;
explain (costs off)
select b from t_indexonly_cdbdedup_2 where b in (select b from t_indexonly_cdbdedup_1 where t_indexonly_cdbdedup_1.b = 3) ;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Gather Motion 3:1  (slice2; segments: 3)
   ->  Hash Semi Join
         Hash Cond: (t_indexonly_cdbdedup_2.b = t_indexonly_cdbdedup_1.b)
         ->  Seq Scan on t_indexonly_cdbdedup_2
         ->  Hash
               ->  Broadcast Motion 3:3  (slice1; segments: 3)
                     ->  Seq Scan on t_indexonly_cdbdedup_1
                           Filter: (b = 3)
 Optimizer: Pivotal Optimizer (GPORCA)
(9 rows)

reset enable_bitmapscan;
reset enable_seqscan;
-- Test append path not error out when semjoin.
-- issue1:https://github.com/GreengageDB/greengage/issues/12402
-- issue2:https://github.com/GreengageDB/greengage/issues/3719
-- Greengage might add unique_rowid_path to handle semjoin, that
-- was introduced in Greengage long before, and after merging so
-- many commits from upstream, new logic might not work well.
-- We just disallow unique_rowid_path for inheritance_planner.
-- through injecting fault in unique_row_path to make the cost
-- of unique_rowid low, however, we use a switch to disallow
-- create unique_rowid plan for inheritance plan.
-- the two above issues can work well.
-- The following cases test for this.
--create table
create table rank_12402 (id int, rank int, year int, value int) distributed by (id)
partition by range (year) (start (2006) end (2007) every (1), default partition extra );
NOTICE:  CREATE TABLE will create partition "rank_12402_1_prt_extra" for table "rank_12402"
NOTICE:  CREATE TABLE will create partition "rank_12402_1_prt_2" for table "rank_12402"
create table rank1_12402 (id int, rank int, year int, value int) distributed by (id)
partition by range (year) (start (2006) end (2007) every (1), default partition extra );
NOTICE:  CREATE TABLE will create partition "rank1_12402_1_prt_extra" for table "rank1_12402"
NOTICE:  CREATE TABLE will create partition "rank1_12402_1_prt_2" for table "rank1_12402"
-- It should create a unique_rowid plan.
-- but it creates a semi-join plan, due to we disallow unique_rowid path in inheritance_planner.
explain (costs off ) update rank_12402 set rank = 1 where id in (select id from rank1_12402) and value in (select value from rank1_12402);
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Update
   ->  Split
         ->  Result
               ->  Hash Semi Join
                     Hash Cond: (rank_12402.value = rank1_12402_1.value)
                     ->  Hash Semi Join
                           Hash Cond: (rank_12402.id = rank1_12402.id)
                           ->  Sequence
                                 ->  Partition Selector for rank_12402 (dynamic scan id: 1)
                                       Partitions selected: 2 (out of 2)
                                 ->  Dynamic Seq Scan on rank_12402 (dynamic scan id: 1)
                           ->  Hash
                                 ->  Sequence
                                       ->  Partition Selector for rank1_12402 (dynamic scan id: 2)
                                             Partitions selected: 2 (out of 2)
                                       ->  Dynamic Seq Scan on rank1_12402 (dynamic scan id: 2)
                     ->  Hash
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                 ->  Sequence
                                       ->  Partition Selector for rank1_12402 (dynamic scan id: 3)
                                             Partitions selected: 2 (out of 2)
                                       ->  Dynamic Seq Scan on rank1_12402 rank1_12402_1 (dynamic scan id: 3)
 Optimizer: Pivotal Optimizer (GPORCA)
(24 rows)

-- Test for fake ctid works well
-- issue: https://github.com/GreengageDB/greengage/issues/12512
-- NOTE: orca use split-update, planner use update, behavior is different when
-- tuple is updated by self.
-- test ctid for subquery in update
create table t_12512(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t1_12512(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create table t2_12512(a int, b int, c int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into t_12512 select i,i,i from generate_series(1, 100)i;
insert into t1_12512 select i,i,i from generate_series(1, 100)i;
insert into t2_12512 select i,i,i from generate_series(1, 100)i;
explain (costs off)
update t_12512 set b = 1
    from
(
          select
            t1_12512.b, sum(t1_12512.a) as x from t1_12512 group by t1_12512.b
)e
where e.x in
    (
    select b from t2_12512
    )
;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Update
   ->  Split
         ->  Result
               ->  Hash Semi Join
                     Hash Cond: ((sum(t1_12512.a)) = (t2_12512.b)::bigint)
                     ->  Nested Loop
                           Join Filter: true
                           ->  Seq Scan on t_12512
                           ->  Materialize
                                 ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                       ->  Result
                                             ->  HashAggregate
                                                   Group Key: t1_12512.b
                                                   ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                                         Hash Key: t1_12512.b
                                                         ->  Seq Scan on t1_12512
                     ->  Hash
                           ->  Broadcast Motion 3:3  (slice3; segments: 3)
                                 ->  Seq Scan on t2_12512
 Optimizer: Pivotal Optimizer (GPORCA)
(20 rows)

update t_12512 set b = 1
    from
(
          select
            t1_12512.b, sum(t1_12512.a) as x from t1_12512 group by t1_12512.b
)e
where e.x in
    (
    select b from t2_12512
    )
;
ERROR:  multiple updates to a row by the same query is not allowed  (seg0 127.0.1.1:6002 pid=31136)
-- test fake ctid for functions
explain (costs off)
update t_12512 set b = 1
    from
(
	  select * from pg_backend_pid() x
)e
where e.x in
    (
    select b from t2_12512
    )
;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Update
   ->  Split
         ->  Result
               ->  Hash Semi Join
                     Hash Cond: ("outer".x = t2_12512.b)
                     ->  Nested Loop
                           Join Filter: true
                           ->  Seq Scan on t_12512
                           ->  Materialize
                                 ->  Result
                                       ->  Result
                     ->  Hash
                           ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                 ->  Seq Scan on t2_12512
 Optimizer: Pivotal Optimizer (GPORCA)
(15 rows)

update t_12512 set b = 1
    from
(
	  select * from pg_backend_pid() x
)e
where e.x in
    (
    select b from t2_12512
    )
;
-- test fake ctid for values scan
explain (costs off)
update t_12512 set b = 1
    from
(
	  select x from (values (1), (2), (3), (4)) as z(x)
)e
where e.x in
    (
    select b from t2_12512
    )
;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Update
   ->  Redistribute Motion 3:3  (slice3; segments: 3)
         Hash Key: t_12512.a
         ->  Split
               ->  Result
                     ->  Hash Semi Join
                           Hash Cond: ("Values".column1 = t2_12512.b)
                           ->  Redistribute Motion 3:3  (slice1; segments: 3)
                                 Hash Key: "Values".column1
                                 ->  Nested Loop
                                       Join Filter: true
                                       ->  Seq Scan on t_12512
                                       ->  Values Scan on "Values"
                           ->  Hash
                                 ->  Redistribute Motion 3:3  (slice2; segments: 3)
                                       Hash Key: t2_12512.b
                                       ->  Seq Scan on t2_12512
 Optimizer: Pivotal Optimizer (GPORCA)
(18 rows)

update t_12512 set b = 1
    from
(
	  select x from (values (1), (2), (3), (4)) as z(x)
)e
where e.x in
    (
    select b from t2_12512
    )
;
ERROR:  multiple updates to a row by the same query is not allowed  (seg0 127.0.1.1:6002 pid=31136)
-- test fake ctid for external scan
CREATE OR REPLACE FUNCTION write_to_file_12512() RETURNS integer AS
   '$libdir/gpextprotocol.so', 'demoprot_export' LANGUAGE C STABLE;
CREATE OR REPLACE FUNCTION read_from_file_12512() RETURNS integer AS
    '$libdir/gpextprotocol.so', 'demoprot_import' LANGUAGE C STABLE;
-- declare the protocol name along with in/out funcs
CREATE PROTOCOL demoprot (
    readfunc  = read_from_file_12512,
    writefunc = write_to_file_12512
);
CREATE writable EXTERNAL TABLE ext_w_12512(like t2_12512)
    LOCATION('demoprot://demotextfile.txt')
FORMAT 'text'
DISTRIBUTED BY (a);
INSERT into ext_w_12512 select * from t2_12512;
CREATE  EXTERNAL TABLE ext_r_12512(like t2_12512) LOCATION('demoprot://demotextfile.txt') FORMAT 'text';
explain (costs off)
update t_12512 set b = 1
    from
(
	  select a x, b from ext_r_12512
)e
where e.x in
    (
    select b from t2_12512
    )
;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Update
   ->  Redistribute Motion 3:3  (slice3; segments: 3)
         Hash Key: t_12512.a
         ->  Split
               ->  Result
                     ->  Nested Loop
                           Join Filter: true
                           ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                 ->  Seq Scan on t_12512
                           ->  Materialize
                                 ->  Hash Semi Join
                                       Hash Cond: (ext_r_12512.a = t2_12512.b)
                                       ->  External Scan on ext_r_12512
                                       ->  Hash
                                             ->  Broadcast Motion 3:3  (slice1; segments: 3)
                                                   ->  Seq Scan on t2_12512
 Optimizer: Pivotal Optimizer (GPORCA)
(17 rows)

update t_12512 set b = 1
    from
(
	  select a x, b from ext_r_12512
)e
where e.x in
    (
    select b from t2_12512
    )
;
ERROR:  multiple updates to a row by the same query is not allowed  (seg0 127.0.1.1:6002 pid=31136)
-- reset fault injector
select gp_inject_fault('low_unique_rowid_path_cost', 'reset', dbid) from gp_segment_configuration where role = 'p' and content = -1;
 gp_inject_fault 
-----------------
 Success:
(1 row)

-- clean up
drop index t_indexonly_cdbdedup_2_index;
drop table t_indexonly_cdbdedup_1;
drop table t_indexonly_cdbdedup_2;
drop table rank_12402;
drop table rank1_12402;
drop table t_12512;
drop table t1_12512;
drop table t2_12512;
drop external table ext_w_12512;
drop external table ext_r_12512;
drop protocol demoprot;
drop function write_to_file_12512();
drop function read_from_file_12512();
