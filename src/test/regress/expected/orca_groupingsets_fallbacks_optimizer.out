--
-- One purpose of these tests is to make sure that ORCA can gracefully fall
-- back for these queries. To detect that, turn optimizer_trace_fallback on,
-- and watch for "falling back to planner" messages.
--
set optimizer_trace_fallback='on';
create temp table gstest1 (a int, b int, c int, d int, v int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into gstest1 values (1, 5, 10, 0, 100);
insert into gstest1 values (1, 42, 20, 7, 200);
insert into gstest1 values (2, 5, 30, 21, 300);
insert into gstest1 values (2, 42, 40, 53, 400);
-- Orca falls back due to multiple grouping sets specifications referencing
-- duplicate alias columns where column is possibly nulled by ROLLUP or CUBE.
-- This is also a known issue in Postgres. Following threads [1][2] have more
-- details.
--
-- [1] https://www.postgresql.org/message-id/flat/CAHnPFjSdFx_TtNpQturPMkRSJMYaD5rGP2=8iFH9V24-OjHGiQ@mail.gmail.com
-- [2] https://www.postgresql.org/message-id/flat/830269.1656693747@sss.pgh.pa.us
select a as alias1, a as alias2 from gstest1 group by alias1, rollup(alias2);
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: Multiple grouping sets specifications with duplicate aliased columns
 alias1 | alias2 
--------+--------
      1 |      1
      1 |       
      2 |      2
      2 |       
(4 rows)

select a as alias1, a as alias2 from gstest1 group by alias1, cube(alias2);
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: Multiple grouping sets specifications with duplicate aliased columns
 alias1 | alias2 
--------+--------
      2 |      2
      2 |       
      1 |      1
      1 |       
(4 rows)

-- Following does not need to fallback because no ROLLUP/CUBE means neither
-- column needs to be nulled.
select a as alias1, a as alias2 from gstest1 group by alias1, alias2;
 alias1 | alias2 
--------+--------
      1 |      1
      2 |      2
(2 rows)

-- Orca falls back due to nested grouping sets
select sum(v), b, a, c, d from gstest1 group by grouping sets(a, b, rollup(c, d));
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: nested grouping set
 sum  | b  | a | c  | d  
------+----+---+----+----
 1000 |    |   |    |   
  300 |    | 1 |    |   
  700 |    | 2 |    |   
  400 |  5 |   |    |   
  600 | 42 |   |    |   
  100 |    |   | 10 |  0
  400 |    |   | 40 | 53
  300 |    |   | 30 | 21
  200 |    |   | 20 |  7
  300 |    |   | 30 |   
  100 |    |   | 10 |   
  400 |    |   | 40 |   
  200 |    |   | 20 |   
(13 rows)

-- Orca falls back when all grouping sets contain the primary key and the target
-- list contains a column that does not appear in any grouping set
create temp table gstest2 (a int primary key, b int, c int, d int, v int);
insert into gstest2 values (1, 1, 1, 1, 1);
insert into gstest2 values (2, 2, 2, 2, 1);
select d from gstest2 group by grouping sets ((a,b), (a));
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Query-to-DXL Translation: No attribute entry found due to incorrect normalization of query
 d 
---
 2
 2
 1
 1
(4 rows)

-- Orca falls back due to HAVING clause with outer references
select v.c, (select count(*) from gstest1 group by () having v.c) from (values (false),(true)) v(c);
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: {TARGETENTRY :expr {VAR :varno 1 :varattno 2 :vartype 20 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 2 :location -1} :resno 1 :resname count :ressortgroupref 0 :resorigtbl 0 :resorigcol 0 :resjunk false}
 c | count 
---+-------
 f |      
 t |     4
(2 rows)

-- Orca falls back due to grouping function with multiple arguments
select a, b, grouping(a,b), sum(v), count(*), max(v) from gstest1 group by rollup (a,b);
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: Grouping function with multiple arguments
 a | b  | grouping | sum  | count | max 
---+----+----------+------+-------+-----
 1 |  5 |        0 |  100 |     1 | 100
 1 | 42 |        0 |  200 |     1 | 200
 1 |    |        1 |  300 |     2 | 200
 2 |  5 |        0 |  300 |     1 | 300
 2 | 42 |        0 |  400 |     1 | 400
 2 |    |        1 |  700 |     2 | 400
   |    |        3 | 1000 |     4 | 400
(7 rows)

-- Orca falls back due to grouping function with outer references
select (select grouping(a) from (values(1)) v2(c)) from (values(1, 2)) v1(a, b) group by (a, b);
INFO:  GPORCA failed to produce a plan, falling back to Postgres-based planner
DETAIL:  Falling back to Postgres-based planner because GPORCA does not support the following feature: Grouping function with outer references
 grouping 
----------
        0
(1 row)

