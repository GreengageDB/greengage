-- gp_dump_query_oids() doesn't list built-in functions, so we need a UDF to test with.
CREATE FUNCTION dumptestfunc(t text) RETURNS integer AS $$ SELECT 123 $$ LANGUAGE SQL;
CREATE FUNCTION dumptestfunc2(t text) RETURNS integer AS $$ SELECT 123 $$ LANGUAGE SQL;
create table base(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
create materialized view base_mv as select a from base;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
create view base_v as select a from base;
CREATE SEQUENCE minirepro_test_b;
CREATE TABLE minirepro_test(a serial, b int default nextval('minirepro_test_b'));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- The function returns OIDs. We need to replace them with something reproducable.
CREATE FUNCTION sanitize_output(t text) RETURNS text AS $$
declare
  dumptestfunc_oid oid;
  dumptestfunc2_oid oid;
  base_oid oid;
  base_mv_oid oid;
  base_v_oid oid;
  minirepro_test_oid oid;
  minirepro_test_b_oid oid;
  minirepro_test_a_seq_oid oid;
begin
    dumptestfunc_oid = 'dumptestfunc'::regproc::oid;
    dumptestfunc2_oid = 'dumptestfunc2'::regproc::oid;
    base_oid = 'base'::regclass::oid;
    base_mv_oid = 'base_mv'::regclass::oid;
    base_v_oid = 'base_v'::regclass::oid;
    minirepro_test_oid = 'minirepro_test'::regclass::oid;
    minirepro_test_b_oid = 'minirepro_test_b'::regclass::oid;
    minirepro_test_a_seq_oid = 'minirepro_test_a_seq'::regclass::oid;

    t := replace(t, dumptestfunc_oid::text, '<dumptestfunc>');
    t := replace(t, dumptestfunc2_oid::text, '<dumptestfunc2>');
    t := replace(t, base_oid::text, '<base_table>');
    t := replace(t, base_mv_oid::text, '<base_mv>');
    t := replace(t, base_v_oid::text, '<base_v>');
    t := replace(t, minirepro_test_oid::text, '<minirepro_test>');
    t := replace(t, minirepro_test_b_oid::text, '<minirepro_test_b>');
    t := replace(t, minirepro_test_a_seq_oid::text, '<minirepro_test_a_seq>');

    RETURN t;
end;
$$ LANGUAGE plpgsql;
-- Test the built-in gp_dump_query function.
SELECT sanitize_output(gp_dump_query_oids('SELECT 123'));
        sanitize_output        
-------------------------------
 {"relids": "", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('SELECT * FROM pg_proc'));
          sanitize_output          
-----------------------------------
 {"relids": "1255", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('SELECT length(proname) FROM pg_proc'));
          sanitize_output          
-----------------------------------
 {"relids": "1255", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('SELECT dumptestfunc(proname) FROM pg_proc'));
                 sanitize_output                 
-------------------------------------------------
 {"relids": "1255", "funcids": "<dumptestfunc>"}
(1 row)

-- with EXPLAIN
SELECT sanitize_output(gp_dump_query_oids('explain SELECT dumptestfunc(proname) FROM pg_proc'));
                 sanitize_output                 
-------------------------------------------------
 {"relids": "1255", "funcids": "<dumptestfunc>"}
(1 row)

-- with a multi-query statement
SELECT sanitize_output(gp_dump_query_oids('SELECT dumptestfunc(proname) FROM pg_proc; SELECT dumptestfunc2(relname) FROM pg_class'));
                           sanitize_output                            
----------------------------------------------------------------------
 {"relids": "1255,1259", "funcids": "<dumptestfunc>,<dumptestfunc2>"}
(1 row)

-- Test error reporting on an invalid query.
SELECT gp_dump_query_oids('SELECT * FROM nonexistent_table');
ERROR:  relation "nonexistent_table" does not exist
LINE 1: SELECT * FROM nonexistent_table
                      ^
QUERY:  SELECT * FROM nonexistent_table
SELECT gp_dump_query_oids('SELECT with syntax error');
ERROR:  syntax error at or near "with"
LINE 1: SELECT with syntax error
               ^
QUERY:  SELECT with syntax error
-- Test partition and inherited tables
CREATE TABLE minirepro_partition_test (id int, info json);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE foo (id int, year int, a int, b int, c int, d int, region text)
 DISTRIBUTED BY (id)
 PARTITION BY RANGE (year)
     SUBPARTITION BY RANGE (a)
        SUBPARTITION TEMPLATE (
         START (1) END (2) EVERY (1),
         DEFAULT SUBPARTITION other_a )
            SUBPARTITION BY RANGE (b)
               SUBPARTITION TEMPLATE (
               START (1) END (2) EVERY (1),
               DEFAULT SUBPARTITION other_b )
( START (2002) END (2003) EVERY (1),
   DEFAULT PARTITION outlying_years );
CREATE TABLE ptable (c1 text, c2 float);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE ctable (c3 char(2)) INHERITS (ptable);
NOTICE:  table has parent, setting distribution columns to match parent table
CREATE TABLE cctable (c4 char(2)) INHERITS (ctable);
NOTICE:  table has parent, setting distribution columns to match parent table
INSERT INTO minirepro_partition_test VALUES (1, (select gp_dump_query_oids('SELECT * FROM foo') ) :: json);
INSERT INTO minirepro_partition_test VALUES (2, (select gp_dump_query_oids('SELECT * FROM ptable') ) :: json);
INSERT INTO minirepro_partition_test VALUES (3, (select gp_dump_query_oids('SELECT * FROM pg_class') ) :: json);
SELECT array['foo'::regclass::oid::text,
             'foo_1_prt_outlying_years'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_other_a'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_other_a_3_prt_other_b'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_other_a_3_prt_2'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_2'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_2_3_prt_other_b'::regclass::oid::text,
             'foo_1_prt_outlying_years_2_prt_2_3_prt_2'::regclass::oid::text,
             'foo_1_prt_2'::regclass::oid::text,
             'foo_1_prt_2_2_prt_other_a'::regclass::oid::text,
             'foo_1_prt_2_2_prt_other_a_3_prt_other_b'::regclass::oid::text,
             'foo_1_prt_2_2_prt_other_a_3_prt_2'::regclass::oid::text,
             'foo_1_prt_2_2_prt_2'::regclass::oid::text,
             'foo_1_prt_2_2_prt_2_3_prt_other_b'::regclass::oid::text,
             'foo_1_prt_2_2_prt_2_3_prt_2'::regclass::oid::text] <@  (string_to_array((SELECT info->>'relids' FROM minirepro_partition_test WHERE id = 1),','));
 ?column? 
----------
 t
(1 row)

SELECT array['ptable'::regclass::oid::text,
             'ctable'::regclass::oid::text,
             'cctable'::regclass::oid::text] <@  (string_to_array((SELECT info->>'relids' FROM minirepro_partition_test WHERE id = 2),','));
 ?column? 
----------
 t
(1 row)

SELECT array['pg_class'::regclass::oid::text] <@  (string_to_array((SELECT info->>'relids' FROM minirepro_partition_test WHERE id = 3),','));
 ?column? 
----------
 t
(1 row)

SELECT sanitize_output(gp_dump_query_oids('SELECT * FROM base_mv'));
                   sanitize_output                   
-----------------------------------------------------
 {"relids": "<base_mv>,<base_table>", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('SELECT * FROM base_v'));
                  sanitize_output                   
----------------------------------------------------
 {"relids": "<base_v>,<base_table>", "funcids": ""}
(1 row)

-- gp_dump_query_oids should output relids of view/materialized view and used/accessed objects when query contains explain command
SELECT sanitize_output(gp_dump_query_oids('EXPLAIN SELECT * FROM base_mv'));
                   sanitize_output                   
-----------------------------------------------------
 {"relids": "<base_mv>,<base_table>", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('EXPLAIN SELECT * FROM base_v'));
                  sanitize_output                   
----------------------------------------------------
 {"relids": "<base_v>,<base_table>", "funcids": ""}
(1 row)

-- gp_dump_query_oids should output relids of view/materialized view and used/accessed objects when query contains explain analyze command
SELECT sanitize_output(gp_dump_query_oids('EXPLAIN ANALYZE SELECT * FROM base_mv'));
                   sanitize_output                   
-----------------------------------------------------
 {"relids": "<base_mv>,<base_table>", "funcids": ""}
(1 row)

SELECT sanitize_output(gp_dump_query_oids('EXPLAIN ANALYZE SELECT * FROM base_v'));
                  sanitize_output                   
----------------------------------------------------
 {"relids": "<base_v>,<base_table>", "funcids": ""}
(1 row)

-- gp_dump_query_oids should output relids of referenced sequences
SELECT sanitize_output(gp_dump_query_oids('SELECT * FROM minirepro_test'));
                                     sanitize_output                                     
-----------------------------------------------------------------------------------------
 {"relids": "<minirepro_test>,<minirepro_test_a_seq>,<minirepro_test_b>", "funcids": ""}
(1 row)

DROP TABLE minirepro_test;
DROP SEQUENCE minirepro_test_b;
DROP TABLE foo;
DROP TABLE cctable;
DROP TABLE ctable;
DROP TABLE ptable;
DROP TABLE minirepro_partition_test;
DROP MATERIALIZED VIEW base_mv;
DROP VIEW base_v;
DROP TABLE base;
DROP FUNCTION dumptestfunc(text);
DROP FUNCTION dumptestfunc2(text);
