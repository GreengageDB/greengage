# ----------
# src/test/regress/parallel_schedule
#
# By convention, we put no more than twenty tests in any one parallel group;
# this limits the number of connections needed to run the tests.
# ----------

# required setup steps
test: test_setup

# run tablespace by itself, and first, because it forces a checkpoint;
# we'd prefer not to have checkpoints later in the tests because that
# interferes with crash-recovery testing.
test: tablespace
# ----------
# The first group of parallel tests
# ----------
test: boolean char name varchar text int2 int4 int8 oid float4 float8 bit numeric txid uuid enum money rangetypes pg_lsn regproc

# ----------
# The second group of parallel tests
# strings depends on char, varchar and text
# numerology depends on int2, int4, int8, float4, float8
# ----------
test: strings numerology point lseg line box path polygon circle date time timetz timestamp timestamptz interval inet macaddr macaddr8 tstypes

# ----------
# Another group of parallel tests
# geometry depends on point, lseg, box, path, polygon and circle
# horology depends on interval, timetz, timestamp, timestamptz
# ----------
test: geometry horology regex oidjoins type_sanity opr_sanity misc_sanity comments expressions

# ----------
# These four each depend on the previous one
# ----------
test: create_function_1
test: create_type
test: create_table
test: create_function_2

# ----------
# Load huge amounts of data
# We should split the data files into single files and then
# execute two copy tests parallel, to check that copy itself
# is concurrent safe.
# ----------
test: copy copyselect copydml insert insert_conflict

# ----------
# More groups of parallel tests
# ----------
test: create_misc create_operator create_procedure
# These depend on create_misc and create_operator
test: create_index create_index_spgist create_view index_including index_including_gist
# Depends on things setup for create_index
test: gp_gin_index

# ----------
# Another group of parallel tests
# ----------
test: create_aggregate create_function_3 create_cast constraints triggers select inherit typed_table vacuum drop_if_exists updatable_views roleattributes create_am hash_func errors infinite_recurse

# ----------
# Because vacuum will detect concurrently running transactions, it is necessary to
# run this test on its own, or it might not detect the pages are 'all visible'
# ----------
test: disable_autovacuum
test: vacuum_stats
test: enable_autovacuum

# ----------
# sanity_check does a vacuum, affecting the sort order of SELECT *
# results. So it should not run parallel to other tests.
#
# Disabled in GPDB. FIXME: why?
# ----------
#test: sanity_check

# ----------
# Another group of parallel tests
# Note: the ignore: line does not run random, just mark it as ignorable
# ----------
ignore: random
test: select_into select_distinct select_distinct_on select_implicit select_having subselect union case join aggregates random portals arrays btree_index hash_index update delete

# In PostgreSQL, namespace test is run as part of the previous group, but there
# are some GPDB additions in it that will show diff if concurrent tests use
# temporary tables. So run it separately.
test: namespace

# 2-phase commit is not supported by GPDB.
#test: prepared_xacts

# The 'transactions' test is disabled in GPDB, because it uses functions
# in segments in a way that doesn't work:
# ERROR:  function cannot execute on a QE slice because it accesses relation "public.xacttest"
#test: transactions

# ----------
# Another group of parallel tests
# ----------
test: brin gin gist spgist privileges init_privs security_label collate matview lock replica_identity rowsecurity object_address tablesample groupingsets drop_operator password identity generated join_hash

# ----------
# Another group of parallel tests
# ----------
test: create_table_like alter_generic alter_operator misc async dbsize misc_functions sysviews tsrf tid tidscan

# rules cannot run concurrently with any test that creates
# a view or rule in the public schema
test: psql psql_crosstab amutils stats_ext
#
# 'rules' test is disabled in GPDB. Maintaining the list of views in it is
# too painful, and there are also errors because of cross-segment UPDATEs
# and functions.
#
# GPDB_84_MERGE_FIXME: While disabling this was not really an effect of the 8.4
# merge, it was done a long time ago, it's time to revisit this so we can re-
# enable it
#test: rules

# run by itself so it can run parallel workers
test: select_parallel
test: write_parallel

# no relation related tests can be put in this group
test: publication subscription

# ----------
# Another group of parallel tests
# ----------
test: select_views portals_p2 cluster dependency guc bitmapops combocid tsearch tsdicts foreign_data window xmlmap functional_deps advisory_lock indirect_toast equivclass

# 'foreign_key' test is disabled, because it contains several tables with
# multiple UNIQUE constraints, which is not supported in GPDB.
# See the foreign_key_gp test in greengage_schedule for the GPDB-specific behavior.
#test: foreign_key

# ----------
# Another group of parallel tests (JSON related)
# ----------
test: json jsonb json_encoding jsonpath jsonpath_encoding jsonb_jsonpath

# ----------
# Another group of parallel tests
# NB: temp.sql does a reconnect which transiently uses 2 connections,
# so keep this parallel group to at most 19 tests
# ----------
test: plancache limit plpgsql copy2 temp domain rangefuncs prepare conversion truncate alter_table sequence polymorphism rowtypes returning with xml
# large objects are not supported by GPDB
# test: largeobject

test: gp_foreign_data

# ----------
# Another group of parallel tests
# ----------
test: partition_join partition_prune reloptions hash_part indexing partition_aggregate partition_info

# event triggers cannot run concurrently with any test that runs DDL
test: event_trigger
# this test also uses event triggers, so likewise run it by itself
test: fast_default

# loose over-eager constraint exclusion check, please refer to issue 10287
test: constraints_check

# run stats by itself because its delay may be insufficient under heavy load
#
# 'stats' test has been disabled in GPDB, because it tries to set stats-related
# GUCs stats_block_level and stats_row_level, which have been removed from
# GPDB.
#test: stats
