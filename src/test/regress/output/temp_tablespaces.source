create tablespace some_temp_tablespace location '@testtablespace@_temp_tablespace';
create tablespace some_default_tablespace location '@testtablespace@_default_tablespace';
-- Given I've set up GUCS for how to use tablespaces
set temp_tablespaces to some_temp_tablespace;
set default_tablespace to 'some_default_tablespace';
-- When I create a temporary table
create temporary table some_table_in_temp_tablespace (a int);
-- Then the temp_tablespaces settings should be used
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_temp_tablespace' AND relname = 'some_table_in_temp_tablespace';
 count 
-------
     1
(1 row)

-- And the temp_tablespaces should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_table_in_temp_tablespace' and spcname = 'some_temp_tablespace';
 count 
-------
     3
(1 row)

-- When I create a non-temporary table, the default_tablespace should be chosen
create table some_non_temp_table (a int);
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_default_tablespace' AND relname = 'some_non_temp_table';
 count 
-------
     1
(1 row)

-- And the default_tablespace should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_non_temp_table' and spcname = 'some_default_tablespace';
 count 
-------
     3
(1 row)

drop table some_table_in_temp_tablespace;
drop table some_non_temp_table;
drop tablespace some_temp_tablespace;
drop tablespace some_default_tablespace;
reset default_tablespace;
reset temp_tablespaces;
-- When the GUC temp_tablespaces is set, one of the temp tablespaces is used instead of the default tablespace.
-- create several tablespaces and use them as temp tablespaces
-- all QD/QEs in one session should have the same temp tablespace
create tablespace mytempsp0 location '@testtablespace@_mytempsp0';
create tablespace mytempsp1 location '@testtablespace@_mytempsp1';
create tablespace mytempsp2 location '@testtablespace@_mytempsp2';
create tablespace mytempsp3 location '@testtablespace@_mytempsp3';
create tablespace mytempsp4 location '@testtablespace@_mytempsp4';
-- temp_tablespaces will synchronized to all segments
set temp_tablespaces=mytempsp0;
CREATE OR REPLACE FUNCTION gp_tablespace_watch_start(dbid int, name text, location text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
output = '/tmp/gp_temp_tablespaces_dbid%d_%s' % (dbid, name)
cmd = "/tmp/file_monitor %s | tee -a /tmp/gp_temp_tablespaces_dbid%d.log > %s &" % (location, dbid, output)
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
if rc != 0:
    output, error = process.communicate()
    raise Exception("error=%s" % str(error))
$$ LANGUAGE plpythonu;
CREATE OR REPLACE FUNCTION gp_tablespace_watch_log(dbid int, message text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
cmd = "echo \"%s\" >> /tmp/gp_temp_tablespaces_dbid%d.log" % (message, dbid)
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
if rc != 0:
    output, error = process.communicate()
    raise Exception("error=%s" % str(error))
$$ LANGUAGE plpythonu;
CREATE OR REPLACE FUNCTION gp_tablespace_watch_stop()
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
cmd = "pkill file_monitor"
cmd = ["bash", "-c", cmd]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
process.wait()
$$ LANGUAGE plpythonu;
CREATE OR REPLACE FUNCTION gp_tablespace_watch_match(dbid int, name text, patstr text)
    RETURNS int
    EXECUTE ON ALL SEGMENTS
AS $$
import subprocess
script = '''grep "%s" '/tmp/gp_temp_tablespaces_dbid%d_%s' | wc -l''' % (patstr, dbid, name)
cmd = ["bash", "-c", script]
process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
rc = process.wait()
output, error = process.communicate()
if rc != 0:
    raise Exception("error=%s" % str(error))
return int(str(output).strip())
$$ LANGUAGE plpythonu;
CREATE OR REPLACE FUNCTION gp_temptablespace_path(tblspcOid Oid)
    RETURNS text
    EXECUTE ON ALL SEGMENTS
AS '@abs_builddir@/regress.so', 'gp_tablespace_tmppath'
    LANGUAGE C;
CREATE TABLE tts_foo (a int, b int) distributed by(a);
CREATE TABLE tts_bar (c int, d int) distributed by(d);
CREATE TABLE tts_jazz(e int, f int) distributed by(e);
CREATE TABLE tts_aggspill (i int, j int, t text) distributed by (i);
CREATE TABLE tts_testsiscm (i1 int, i2 int, i3 int, i4 int) distributed by(i1);
insert into tts_foo select i, i from generate_series(1,1000000)i;
insert into tts_bar select i, i from generate_series(6000,120000)i;
insert into tts_jazz select i, i from generate_series(4000,150000)i;
insert into tts_aggspill select i, i*2, i::text from generate_series(1, 10000) i;
insert into tts_aggspill select i, i*2, i::text from generate_series(1, 100000) i;
insert into tts_aggspill select i, i*2, i::text from generate_series(1, 1000000) i;
insert into tts_testsiscm select i, i % 1000, i % 100000, i % 75 from
  (select generate_series(1, nsegments * 150000) as i from
    (select count(*) as nsegments from gp_segment_configuration where role='p' and content >= 0) foo) bar;
ANALYZE tts_foo;
ANALYZE tts_bar;
ANALYZE tts_jazz;
ANALYZE tts_aggspill;
ANALYZE tts_testsiscm;
set gp_cte_sharing=on;
-- set small statement_mem, so temp files are generated by some queries,
-- like join/agg/share input scan, etc.
set statement_mem = '2MB';
-- this query should trigger the directory pgsql_tmp created
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
 count  
--------
 228002
(1 row)

select dattablespace from pg_database where datname=current_database();
 dattablespace 
---------------
          1663
(1 row)

-- show the directories for the default tablespace and temp tablespace.
-- start_ignore
select gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1));
 gp_temptablespace_path 
------------------------
 base/pgsql_tmp
 base/pgsql_tmp
 base/pgsql_tmp
(3 rows)

select gp_temptablespace_path((select oid from pg_tablespace where spcname='mytempsp0' limit 1));
           gp_temptablespace_path           
--------------------------------------------
 pg_tblspc/17172/GPDB_6_301908232/pgsql_tmp
 pg_tblspc/17172/GPDB_6_301908232/pgsql_tmp
 pg_tblspc/17172/GPDB_6_301908232/pgsql_tmp
(3 rows)

-- end_ignore
select gp_tablespace_watch_start(gp_execution_dbid(), 'default', gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1)));
 gp_tablespace_watch_start 
---------------------------
 
 
 
(3 rows)

select gp_tablespace_watch_start(gp_execution_dbid(), 'temp', gp_temptablespace_path((select oid from pg_tablespace where spcname='mytempsp0' limit 1)));
 gp_tablespace_watch_start 
---------------------------
 
 
 
(3 rows)

-- ShareInputScan across multiple slices, they should access the same
-- temp tablespace.
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
 count  
--------
 228002
(1 row)

-- optional: to separator the logged messages about created event
select gp_tablespace_watch_log(gp_execution_dbid(), '[temp_tablespace]: separator 1 ]');
 gp_tablespace_watch_log 
-------------------------
 
 
 
(3 rows)

set statement_mem='1MB';
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
 count 
-------
 10000
(1 row)

--start_ignore
-- ignore the output, we only need the following query to spill on Sort
--end_ignore
set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;
 count  
--------
 100000
(1 row)

select gp_tablespace_watch_stop();
 gp_tablespace_watch_stop 
--------------------------
 
 
 
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashJoin') > 0 as "exist";
 exist 
-------
 f
 f
 f
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_HashJoin') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_SIRW_') > 0 as "exist";
 exist 
-------
 f
 f
 f
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_SIRW_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_Sort_') > 0 as "exist";
 exist 
-------
 f
 f
 f
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_Sort_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashAggregate_') > 0 as "exist";
 exist 
-------
 f
 f
 f
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'temp', '_HashAggregate_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

reset optimizer;
-- set a list as temp_tablespaces to verify that temp files across slices can work.
select gp_tablespace_watch_log(gp_execution_dbid(), '[SET - use multiple temp tablespaces]');
 gp_tablespace_watch_log 
-------------------------
 
 
 
(3 rows)

set statement_mem='2MB';
set temp_tablespaces=mytempsp0,mytempsp1,mytempsp2,mytempsp3,mytempsp4;
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
 count  
--------
 228002
(1 row)

set statement_mem = '1MB';
-- hash aggregate should spill on the default tablespace.
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
 count 
-------
 10000
(1 row)

select gp_tablespace_watch_log(gp_execution_dbid(), '[RESET - use default temp tablespace]');
 gp_tablespace_watch_log 
-------------------------
 
 
 
(3 rows)

set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;
 count  
--------
 100000
(1 row)

-- After we unset temp_tablespaces, the temp files should be generated in the default tablespace
set statement_mem='2MB';
set temp_tablespaces to '';
show temp_tablespaces;
 temp_tablespaces 
------------------
 ""
(1 row)

select gp_tablespace_watch_start(gp_execution_dbid(), 'default', gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1)));
 gp_tablespace_watch_start 
---------------------------
 
 
 
(3 rows)

with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
      UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;
 count  
--------
 228002
(1 row)

-- optional: separate logged messages about created events.
select gp_tablespace_watch_log(gp_execution_dbid(), '[temp_tablespace]: separator 2 ]');
 gp_tablespace_watch_log 
-------------------------
 
 
 
(3 rows)

set statement_mem='1MB';
-- hash aggregate should spill on the default tablespace.
select count(*) from (select i, count(*) from tts_aggspill group by i,j,t having count(*) = 3) g;
 count 
-------
 10000
(1 row)

--start_ignore
-- ignore the output, we only need the following query to spill on Sort
--end_ignore
set optimizer = off;
set statement_mem='3MB';
select count(*) from (with ctesisc as
  (select count(i1) as c1, i2 as c2, i3 as c3 from tts_testsiscm group by i2, i3)
  select *
  from ctesisc as t1, ctesisc as t2
  where t1.c1 = t2.c1 and t1.c3 = t2.c3) foo;
 count  
--------
 100000
(1 row)

select gp_tablespace_watch_stop();
 gp_tablespace_watch_stop 
--------------------------
 
 
 
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashJoin') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_SIRW_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashAggregate_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

select gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_Sort_') > 0 as "exist";
 exist 
-------
 t
 t
 t
(3 rows)

drop table tts_foo, tts_bar, tts_jazz, tts_aggspill, tts_testsiscm;
drop tablespace mytempsp0;
drop tablespace mytempsp1;
drop tablespace mytempsp2;
drop tablespace mytempsp3;
drop tablespace mytempsp4;
-- test for Github Issue 12871
create tablespace space_12871 location '@testtablespace@_space_12871';
set temp_tablespaces = space_12871;
DO
$$
    DECLARE l_rec RECORD;
    BEGIN
        CREATE TEMPORARY TABLE tmp_table_12871
        (
            key VARCHAR NOT NULL,
            value   VARCHAR NOT NULL
        )   DISTRIBUTED RANDOMLY;
        INSERT INTO tmp_table_12871  VALUES ('a',1),('b',2);
        FOR l_rec IN ( SELECT key, value
                       FROM tmp_table_12871
                       )
            LOOP
                RAISE NOTICE 'ok';
            END LOOP;
    END;
$$;
NOTICE:  ok
NOTICE:  ok
drop table tmp_table_12871;
drop tablespace space_12871;
--
-- temp_spill_files_tablespaces:
--
CREATE TABLE tts_foo (a int, b int) DISTRIBUTED BY (a);
CREATE TABLE tts_bar (c int, d int) DISTRIBUTED BY (d);
CREATE TABLE tts_jazz (e int, f int) DISTRIBUTED BY (e);
INSERT INTO tts_foo SELECT i, i FROM generate_series (1, 1000000) i;
INSERT INTO tts_bar SELECT i, i FROM generate_series (6000, 120000) i;
INSERT INTO tts_jazz SELECT i, i FROM generate_series (4000, 150000) i;
ANALYZE tts_foo;
ANALYZE tts_bar;
ANALYZE tts_jazz;
CREATE TABLESPACE temp_tables LOCATION '@testtablespace@_temp_tables';
CREATE TABLESPACE temp_files0 LOCATION '@testtablespace@_temp_files0';
CREATE TABLESPACE "temp_files1'" LOCATION '@testtablespace@_temp_files1';
CREATE TABLESPACE "temp_files2""" LOCATION '@testtablespace@_temp_files2';
CREATE TABLESPACE temp_files3 LOCATION '@testtablespace@_temp_files3';
RESET temp_tablespaces;
RESET temp_spill_files_tablespaces;
-- Creates a temporary table and remembers the tablespace it was created in.
-- Runs a query that creates some temporary files, calculates the tablespace for
-- temporary files that will be used for current session, and checks if any
-- files were created in that tablespace.
--
-- 'n_temp_spill_files_tablespaces' is the count of tablespaces specified in
-- 'temp_spill_files_tablespaces', either global or session-wide.
CREATE OR REPLACE FUNCTION gp_tablespace_file_report(
    n_temp_spill_files_tablespaces int
) RETURNS TABLE (
        temp_table_in text,
        temp_files_in text
    ) AS $$
DECLARE
    owo int;
    session_file_ts_name text;
    temp_table_ts_name text;
    session_file_ts_filename text;
BEGIN
    SET optimizer = off;
    SET statement_mem = '1MB';

    CREATE TEMPORARY TABLE tts_baz (a int) DISTRIBUTED BY (a);

    -- See the tablespace where temporary table was created. If there is no
    -- tablespace for this table, it's in default tablespace.
    SELECT ts.spcname
        FROM pg_tablespace ts
        JOIN pg_class c ON ts.oid = c.reltablespace AND c.relname = 'tts_baz'
        LIMIT 1
        INTO temp_table_ts_name;

    DROP TABLE tts_baz;

    -- Find out the tablespace that will be used for files.
    -- N = gp_session_id % number of tablespaces in GUC.
    SELECT 'temp_files' || (current_setting('gp_session_id')::int % n_temp_spill_files_tablespaces)
        INTO session_file_ts_filename;
    SELECT CASE current_setting('gp_session_id')::int % n_temp_spill_files_tablespaces
        WHEN 0 THEN 'temp_files0'
        WHEN 1 THEN 'temp_files1'''
        WHEN 2 THEN 'temp_files2"'
        WHEN 3 THEN 'temp_files3'
    END INTO session_file_ts_name;

    -- Create the temporary directory.
    WITH out11 AS (
        SELECT * FROM (
            WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
            SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
            UNION ALL SELECT *, 1, 2 FROM cte
        ) AS XY
        JOIN tts_jazz on c = e AND b = f
    )
    SELECT count(*) FROM out11 INTO owo;

    -- Start monitoring temporary tablespace usage.
    PERFORM gp_tablespace_watch_start(gp_execution_dbid(), 'default', gp_temptablespace_path((SELECT dattablespace FROM pg_database WHERE datname = current_database() LIMIT 1)));
    PERFORM gp_tablespace_watch_start(gp_execution_dbid(), 'temp_tables', gp_temptablespace_path((SELECT oid FROM pg_tablespace WHERE spcname = 'temp_tables' LIMIT 1)));
    PERFORM gp_tablespace_watch_start(gp_execution_dbid(), session_file_ts_filename, gp_temptablespace_path((SELECT oid FROM pg_tablespace WHERE spcname = session_file_ts_name LIMIT 1)));

    -- Run the query again to create temporary hashjoin files in the tablespaces.
    WITH out11 AS (
        SELECT * FROM (
            WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
            SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
            UNION ALL SELECT *, 1, 2 FROM cte
        ) AS XY
        JOIN tts_jazz on c = e AND b = f
    )
    SELECT count(*) FROM out11 INTO owo;

    PERFORM gp_tablespace_watch_stop();

    -- Check the existence of temporary hashjoin files.
    RETURN QUERY SELECT
        coalesce(temp_table_ts_name, 'default'),
        CASE
            WHEN gp_tablespace_watch_match(gp_execution_dbid(), 'default', '_HashJoin') > 0 THEN 'default'
            WHEN gp_tablespace_watch_match(gp_execution_dbid(), 'temp_tables', '_HashJoin') > 0 THEN 'temp_tables'
            WHEN gp_tablespace_watch_match(gp_execution_dbid(), session_file_ts_filename, '_HashJoin') > 0 THEN 'temp_filesN'
        END;
END;
$$ LANGUAGE plpgsql;
--
-- Global GUC value tests:
--
-- Both files and the table should be in the default tablespace.
-- start_ignore
\! gpconfig -r temp_tablespaces
\! gpconfig -r temp_spill_files_tablespaces
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | default
 default       | default
 default       | default
(3 rows)

-- Both files and the table should be in temp_tables.
-- start_ignore
\! gpconfig -c temp_tablespaces -v 'temp_tables'
\! gpconfig -r temp_spill_files_tablespaces
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | temp_tables
 temp_tables   | temp_tables
 temp_tables   | temp_tables
(3 rows)

-- Files should be in temp_files0, table should be in the default tablespace.
-- start_ignore
\! gpconfig -r temp_tablespaces
\! gpconfig -c temp_spill_files_tablespaces -v 'temp_files0'
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | temp_filesN
 default       | temp_filesN
 default       | temp_filesN
(3 rows)

-- Files should be in temp_files0, table should be in temp_tables.
-- start_ignore
\! gpconfig -c temp_tablespaces -v 'temp_tables'
\! gpconfig -c temp_spill_files_tablespaces -v 'temp_files0'
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | temp_filesN
 temp_tables   | temp_filesN
 temp_tables   | temp_filesN
(3 rows)

-- Files should be in temp_filesN, where N = gp_session_id % 4, table should be
-- in the default tablespace.
-- start_ignore
\! gpconfig -r 'temp_tablespaces'
\! gpconfig -c temp_spill_files_tablespaces -v 'temp_files0','temp_files1'\''','temp_files2"','temp_files3'
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(4);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | temp_filesN
 default       | temp_filesN
 default       | temp_filesN
(3 rows)

-- Files should be in the default tablespace, table should be in temp_tables.
-- start_ignore
\! gpconfig -c temp_tablespaces -v 'temp_tables'
\! gpconfig -c temp_spill_files_tablespaces -v '""'
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | default
 temp_tables   | default
 temp_tables   | default
(3 rows)

-- Files should be in the default tablespace, table should be in temp_tables.
-- start_ignore
\! gpconfig -c temp_tablespaces -v 'temp_tables'
\! gpconfig -c temp_spill_files_tablespaces -v 'pg_default'
\! gpstop -u
-- end_ignore
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | default
 temp_tables   | default
 temp_tables   | default
(3 rows)

-- Reset the global config before testing session-only values.
-- start_ignore
\! gpconfig -r temp_tablespaces
\! gpconfig -r temp_spill_files_tablespaces
\! gpstop -u
-- end_ignore
--
-- Session-only GUC value tests:
--
-- Both files and the table should be in the default tablespace.
RESET temp_tablespaces;
RESET temp_spill_files_tablespaces;
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | default
 default       | default
 default       | default
(3 rows)

-- Both files and the table should be in temp_tables.
SET temp_tablespaces = 'temp_tables';
RESET temp_spill_files_tablespaces;
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | temp_tables
 temp_tables   | temp_tables
 temp_tables   | temp_tables
(3 rows)

-- Files should be in temp_files0, table should be in the default tablespace.
RESET temp_tablespaces;
SET temp_spill_files_tablespaces = 'temp_files0';
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | temp_filesN
 default       | temp_filesN
 default       | temp_filesN
(3 rows)

-- Files should be in temp_files0, table should be in temp_tables.
SET temp_tablespaces = 'temp_tables';
SET temp_spill_files_tablespaces = 'temp_files0';
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | temp_filesN
 temp_tables   | temp_filesN
 temp_tables   | temp_filesN
(3 rows)

-- Files should be in temp_filesN, where N = gp_session_id % 4, table should be
-- in the default tablespace.
RESET temp_tablespaces;
SET temp_spill_files_tablespaces = 'temp_files0','temp_files1''','temp_files2"','temp_files3';
SELECT * FROM gp_tablespace_file_report(4);
 temp_table_in | temp_files_in 
---------------+---------------
 default       | temp_filesN
 default       | temp_filesN
 default       | temp_filesN
(3 rows)

-- Files should be in the default tablespace, table should be in temp_tables.
SET temp_tablespaces = 'temp_tables';
SET temp_spill_files_tablespaces = '';
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | default
 temp_tables   | default
 temp_tables   | default
(3 rows)

-- Files should be in the default tablespace, table should be in temp_tables.
SET temp_tablespaces = 'temp_tables';
SET temp_spill_files_tablespaces = 'pg_default';
SELECT * FROM gp_tablespace_file_report(1);
 temp_table_in | temp_files_in 
---------------+---------------
 temp_tables   | default
 temp_tables   | default
 temp_tables   | default
(3 rows)

RESET temp_tablespaces;
RESET temp_spill_files_tablespaces;
DROP TABLE tts_foo;
DROP TABLE tts_bar;
DROP TABLE tts_jazz;
DROP TABLESPACE temp_tables;
DROP TABLESPACE temp_files0;
DROP TABLESPACE "temp_files1'";
DROP TABLESPACE "temp_files2""";
DROP TABLESPACE temp_files3;
