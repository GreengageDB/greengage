-- This test file covers setting reloptions on existing AO and AOCO tables.
CREATE SCHEMA alter_table_reloptions_@amname@;
SET search_path="$user",alter_table_reloptions_@amname@,public;
SET default_table_access_method=@amname@;
-- Setup some default reloptions for AO/AOCO tables
SET gp_default_storage_options = 'blocksize=65536, compresstype=zlib, compresslevel=5, checksum=true';
CREATE TABLE aorelopts_@amname@ AS SELECT * FROM generate_series(1, 1000);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause. Creating a NULL policy entry.
CREATE TEMP TABLE relfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE aorelopts_@amname@ SET (compresslevel=7, checksum=false);
-- Check if the pg_class.reloption have been correctly changed from the defaults.
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                             reloptions                             
--------------------------------------------------------------------
 {blocksize=65536,compresstype=zlib,compresslevel=7,checksum=false}
(1 row)

CREATE TEMP TABLE relfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- The table should have been rewritten (all of the relfilenodes should have
-- changed)
SELECT * FROM relfilebefore INTERSECT SELECT * FROM relfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- The data should have been preserved.
SELECT count(*) FROM aorelopts_@amname@;
 count 
-------
  1000
(1 row)

DROP TABLE relfilebefore;
DROP TABLE relfileafter;
-- Now alter the table with the same reloptions, the table shouldn't be rewritten
CREATE TEMP TABLE relfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE aorelopts_@amname@ SET (compresslevel=7, checksum=false);
CREATE TEMP TABLE relfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- The relfilenode remains the same
SELECT * FROM relfilebefore EXCEPT SELECT * FROM relfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- Also reloptions and table data are intact 
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                             reloptions                             
--------------------------------------------------------------------
 {blocksize=65536,compresstype=zlib,compresslevel=7,checksum=false}
(1 row)

SELECT count(*) FROM aorelopts_@amname@;
 count 
-------
  1000
(1 row)

DROP TABLE relfilebefore;
DROP TABLE relfileafter;
-- Altering again w/ same reloptions but different order, no rewrite still.
CREATE TEMP TABLE relfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE aorelopts_@amname@ SET (checksum=false, compresslevel=7);
CREATE TEMP TABLE relfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- The relfilenode remains the same
SELECT * FROM relfilebefore EXCEPT SELECT * FROM relfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- The reloptions have same values but new order corresponding to the AT command.
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                             reloptions                             
--------------------------------------------------------------------
 {blocksize=65536,compresstype=zlib,checksum=false,compresslevel=7}
(1 row)

-- Data are intact
SELECT count(*) FROM aorelopts_@amname@;
 count 
-------
  1000
(1 row)

-- Create a new AO table with the initial default storage options which won't
-- show in the pg_class.reloptions. Then alter the table with the same default
-- values, the table shouldn't be rewritten.
-- However, the option should now appear in pg_class.reloptions, same as if 
-- it is passed by CREATE TABLE WITH ().
DROP TABLE aorelopts_@amname@;
RESET gp_default_storage_options;
CREATE TABLE aorelopts_@amname@(a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- pg_class.reloptions should show defaults.
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                            reloptions                             
-----------------------------------------------------
 {blocksize=32768,compresslevel=0,compresstype=none,checksum=true}
(1 row)

DROP TABLE relfilebefore;
DROP TABLE relfileafter;
CREATE TEMP TABLE relfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE aorelopts_@amname@ SET (blocksize=32768);
CREATE TEMP TABLE relfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column(s) named 'segid' as the Greengage Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- The relfilenode remains the same
SELECT * FROM relfilebefore EXCEPT SELECT * FROM relfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- pg_class.reloptions should now show the reloption we just explicitly set
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                            reloptions                             
-----------------------------------------------------
 {compresslevel=0,compresstype=none,checksum=true,blocksize=32768}
(1 row)

-- Now first change 'checksum' to false then change it back to true which
-- is the default value of 'checksum'. There should be a rewrite.
ALTER TABLE aorelopts_@amname@ SET (checksum = false);
DROP TABLE relfilebefore;
DROP TABLE relfileafter;
CREATE TEMP TABLE relfilebefore AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
-- Option w/o '=' should work (same as checksum=true).
ALTER TABLE aorelopts_@amname@ SET (checksum);
CREATE TEMP TABLE relfileafter AS
SELECT -1 segid, relfilenode FROM pg_class WHERE relname in ('aorelopts_@amname@')
UNION SELECT gp_segment_id segid, relfilenode FROM gp_dist_random('pg_class')
WHERE relname in ('aorelopts_@amname@') ORDER BY segid;
-- The table should have been rewritten
SELECT * FROM relfilebefore INTERSECT SELECT * FROM relfileafter;
 segid | relfilenode 
-------+-------------
(0 rows)

-- pg_class.reloptions will reflect the change too 
SELECT reloptions FROM pg_class WHERE relname = 'aorelopts_@amname@';
                            reloptions                             
---------------------------------
 {compresslevel=0,compresstype=none,blocksize=32768,checksum=true}
(1 row)

SELECT count(*) FROM aorelopts_@amname@;
 count 
-------
     0
(1 row)

DROP TABLE aorelopts_@amname@;
