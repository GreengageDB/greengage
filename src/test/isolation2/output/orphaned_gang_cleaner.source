-- restart cluster
!\retcode gpstop -afr;
(exited with code 0)
-- save session id into table
1: CREATE TABLE session (id int) DISTRIBUTED REPLICATED;
CREATE
1: INSERT INTO session SELECT current_setting('gp_session_id')::int;
INSERT 1
-- create table for long query
1: CREATE TABLE test(i int) DISTRIBUTED BY (i);
CREATE
1: INSERT INTO test SELECT i FROM generate_series(1, 100) i;
INSERT 100
-- run long query
1&: SELECT pg_sleep(10) FROM test;  <waiting ...>
-- panic on next query should restart coordinator
SELECT gp_inject_fault('exec_simple_query_start', 'panic', current_setting('gp_dbid')::int);
 gp_inject_fault 
-----------------
 Success:        
(1 row)
SELECT 1;
PANIC:  fault triggered, fault name:'exec_simple_query_start' fault type:'panic'
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
-- got error after restarting
1<:  <... completed>
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
1q: ... <quitting>
-- ensure first session id is less than saved
1: SELECT current_setting('gp_session_id')::int < id FROM session;
 ?column? 
----------
 t        
(1 row)
-- these should not raise snapshot collision error
2: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
3: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
4: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
5: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
6: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
7: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
8: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
9: SELECT id > 0 FROM session;
 ?column? 
----------
 t        
(1 row)
-- ensure last session id is greater than saved
10: SELECT current_setting('gp_session_id')::int > id FROM session;
 ?column? 
----------
 t        
(1 row)
