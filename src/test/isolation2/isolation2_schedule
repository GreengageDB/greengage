# test dispatch
test: gpdispatch

# test if gxid is valid or not on the cluster before running the tests
test: check_gxid

test: checkpoint_dtx_info
test: autovacuum-analyze
test: vacuum_skip_locked_onseg
test: lockmodes
test: log_directory
test: pg_rewind_fail_missing_xlog
test: prepared_xact_deadlock_pg_rewind
test: ao_partition_lock
test: concurrent_partition_table_operations_should_not_deadlock

test: select_dropped_table
test: update_hash_col_utilitymode execute_on_utilitymode

# Test to check root stats updation
test: merge_root_stats

# Tests for crash recovery
test: uao_crash_compaction_column
test: uao_crash_compaction_row
test: crash_recovery
test: crash_recovery_redundant_dtx
test: crash_recovery_dtm
test: unlogged_heap_tables
test: unlogged_appendonly_tables
test: udf_exception_blocks_panic_scenarios
test: ao_same_trans_truncate_crash
test: frozen_insert_crash

test: prevent_ao_wal

# Tests for packcore, will use the coredumps generated in crash_recovery_dtm,
# so must be scheduled after that one.
test: packcore

test: insert_root_partition_truncate_deadlock_without_gdd
# Tests on global deadlock detector
test: gdd/prepare
test: gdd/insert_root_partition_truncate_deadlock
test: gdd/concurrent_update
test: gdd/concurrent_insert_on_conflict
test: gdd/dist-deadlock-01 gdd/dist-deadlock-04 gdd/dist-deadlock-05 gdd/dist-deadlock-06 gdd/dist-deadlock-07 gdd/dist-deadlock-102 gdd/dist-deadlock-103 gdd/dist-deadlock-104 gdd/dist-deadlock-106 gdd/non-lock-105
test: gdd/dist-deadlock-upsert
# until we can improve below flaky case please keep it disabled
ignore: gdd/non-lock-107
# keep this in a separate group
test: gdd/extended_protocol_test
test: gdd/avoid-qd-deadlock
test: gdd/delete-deadlock-root-leaf-concurrent-op
test: gdd/update-deadlock-root-leaf-concurrent-op

# this resets the gp_global_deadlock_detector_period guc hence should
# be last in the group.
test: gdd/local-deadlock-03
# gdd end
test: gdd/end

test: modify_table_data_corrupt

# The following test injects a fault at a generic location
# (StartTransaction).  The fault can be easily triggered by a
# concurrent test, so run the test by itself.
test: deadlock_under_entry_db_singleton

#  this case creates table & index in utility mode, which may cause oid
#  conflict when running in parallel with other cases.
test: misc

test: starve_case pg_views_concurrent_drop alter_blocks_for_update_and_viceversa drop_rename reader_waits_for_lock bitmap_index_ao_sparse

test: create_index_deadlock

# below test(s) inject faults so each of them need to be in a separate group
test: pg_terminate_backend
test: gp_terminate_mpp_backends

# below case will cause failures on catalog changes,
# please keep it in a separate test group
test: gpexpand_catalog_lock

test: reindex
test: reindex_gpfastsequence
test: commit_transaction_block_checkpoint
test: instr_in_shmem_setup
test: instr_in_shmem_terminate
test: vacuum_recently_dead_tuple_due_to_distributed_snapshot
test: vacuum_full_interrupt
test: distributedlog-bug
test: invalidated_toast_index
test: distributed_snapshot
test: gp_collation
test: bitmap_index_concurrent
test: bitmap_index_crash
test: bitmap_update_words_backup_block
test: bitmap_index_inspect

# below tests utilize fault injectors so it needs to be in a group by itself
test: external_table
test: pqsignal

test: fsync_ao

# Disable auto-vacuum for below tests
test: disable_autovacuum

# Tests on Append-Optimized tables (row-oriented).
test: concurrent_index_creation_should_not_deadlock
test: uao/alter_while_vacuum_row uao/alter_while_vacuum2_row
test: uao/alter_table_row
test: uao/brin_row
test: uao/compaction_full_stats_row
test: uao/compaction_utility_row
test: uao/compaction_utility_insert_row
test: uao/cursor_before_delete_row
test: uao/cursor_before_deletevacuum_row
test: uao/cursor_before_update_row
test: uao/cursor_withhold_row
test: uao/cursor_withhold2_row
test: uao/delete_while_vacuum_row
test: uao/index_build_relstats_row
test: uao/index_only_scan_row
test: uao/insert_policy_row
test: uao/insert_while_vacuum_row
test: uao/max_concurrency_row
test: uao/max_concurrency2_row
test: uao/modcount_row
test: uao/modcount_vacuum_row
test: uao/parallel_delete_row
test: uao/parallel_update_row
test: uao/parallel_update_readcommitted_row
test: uao/phantom_reads_row
test: uao/phantom_reads_serializable_row
test: uao/phantom_reads_delete_row
test: uao/phantom_reads_delete_serializable_row
test: uao/phantom_reads_update_row
test: uao/phantom_reads_update_serializable_row
test: uao/select_after_vacuum_row
test: uao/select_after_vacuum_serializable_row
test: uao/select_before_vacuum_row
test: uao/select_while_delete_row
test: uao/select_while_full_vacuum_row
test: uao/select_while_vacuum_row
test: uao/select_while_vacuum_serializable_row
test: uao/select_while_vacuum_serializable2_row
test: uao/selectinsert_while_vacuum_row
test: uao/selectinsertupdate_while_vacuum_row
test: uao/selectupdate_while_vacuum_row
test: uao/snapshot_index_corruption_row
test: uao/tablesample_row
test: uao/update_while_vacuum_row
test: uao/vacuum_self_serializable_row
test: uao/vacuum_self_serializable2_row
test: uao/vacuum_self_serializable3_row
test: uao/vacuum_self_function_row
test: uao/vacuum_while_insert_row
test: uao/vacuum_while_vacuum_row
test: uao/vacuum_cleanup_row
test: uao/vacuum_index_stats_row
test: uao/bitmapindex_rescan_row
test: uao/limit_indexscan_inits_row
test: uao/create_index_allows_readonly_row
test: uao/test_pg_appendonly_version_row
test: uao/cluster_progress_row
# Refer to the case comment for why it is commented out.
# test: uao/bad_buffer_on_temp_ao_row
# check storage-dependent collected statistics views
test: uao/collected_stats_views_row
test: uao/fast_analyze_row

test: reorganize_after_ao_vacuum_skip_drop truncate_after_ao_vacuum_skip_drop mark_all_aoseg_await_drop
# below test(s) inject faults so each of them need to be in a separate group
test: segwalrep/coordinator_wal_switch

# Tests on Append-Optimized tables (column-oriented).
test: aoco_column_rewrite
test: uao/alter_while_vacuum_column uao/alter_while_vacuum2_column
test: uao/alter_table_column
test: uao/brin_column
test: uao/compaction_full_stats_column
test: uao/compaction_utility_column
test: uao/compaction_utility_insert_column
test: uao/cursor_before_delete_column
test: uao/cursor_before_deletevacuum_column
test: uao/cursor_before_update_column
test: uao/cursor_withhold_column
test: uao/cursor_withhold2_column
test: uao/delete_while_vacuum_column
test: uao/index_build_relstats_column
test: uao/index_only_scan_column
test: uao/insert_policy_column
test: uao/insert_while_vacuum_column
test: uao/max_concurrency_column
test: uao/max_concurrency2_column
test: uao/modcount_column
test: uao/modcount_vacuum_column
test: uao/parallel_delete_column
test: uao/parallel_update_column
test: uao/parallel_update_readcommitted_column
test: uao/phantom_reads_column
test: uao/phantom_reads_serializable_column
test: uao/phantom_reads_delete_column
test: uao/phantom_reads_delete_serializable_column
test: uao/phantom_reads_update_column
test: uao/phantom_reads_update_serializable_column
test: uao/select_after_vacuum_column
test: uao/select_after_vacuum_serializable_column
test: uao/select_before_vacuum_column
test: uao/select_while_delete_column
test: uao/select_while_full_vacuum_column
test: uao/select_while_vacuum_column
test: uao/select_while_vacuum_serializable_column
test: uao/select_while_vacuum_serializable2_column
test: uao/selectinsert_while_vacuum_column
test: uao/selectinsertupdate_while_vacuum_column
test: uao/selectupdate_while_vacuum_column
test: uao/snapshot_index_corruption_column
test: uao/tablesample_column
test: uao/update_while_vacuum_column
test: uao/vacuum_self_serializable_column
test: uao/vacuum_self_serializable2_column
test: uao/vacuum_self_serializable3_column
test: uao/vacuum_self_function_column
test: uao/vacuum_while_insert_column
test: uao/vacuum_while_vacuum_column
test: uao/vacuum_cleanup_column
test: uao/vacuum_index_stats_column
test: uao/bitmapindex_rescan_column
test: uao/limit_indexscan_inits_column
test: uao/create_index_allows_readonly_column
test: uao/test_pg_appendonly_version_column
test: uao/cluster_progress_column
# Refer to the case comment for why it is commented out.
# test: uao/bad_buffer_on_temp_ao_column
# check storage-dependent collected statistics views
test: uao/collected_stats_views_column
test: uao/fast_analyze_column
test: ao_blkdir
test: ao_partial_scan

# this case contains fault injection, must be put in a separate test group
test: terminate_in_gang_creation
test: prepare_limit

test: add_column_after_vacuum_skip_drop_column
test: vacuum_after_vacuum_skip_drop_column
# test workfile_mgr
test: workfile_mgr_test
test: pg_basebackup
test: pg_basebackup_with_tablespaces
test: pg_basebackup_large_database_oid
test: basebackup_progress
test: vacuum_progress_row
test: vacuum_progress_column

test: ao_relation_size
test: analyze_progress
test: appendonly_analyze_progress
test: aoco_analyze_progress
test: ao_index_build_progress
test: autostats_locking

# this test contains some fault injection that might get mis-hit by autovacuum process,
# so it needs to be run with autovacuum being disabled
test: segwalrep/die_commit_pending_replication

test: enable_autovacuum
test: idle_gang_cleaner
# test idle_in_transaction_session_timeout
test: autovacuum-temp-table

test: copy_progress

# Tests for FTS
test: fts_errors
test: segwalrep/replication_keeps_crash
test: segwalrep/commit_blocking
test: segwalrep/fts_unblock_primary
test: segwalrep/recoverseg_from_file
test: segwalrep/mirror_promotion
test: segwalrep/cancel_commit_pending_replication
test: segwalrep/twophase_tolerance_with_mirror_promotion
test: segwalrep/failover_with_many_records
test: segwalrep/dtm_recovery_on_standby
test: segwalrep/commit_blocking_on_standby
test: segwalrep/max_slot_wal_keep_size
test: segwalrep/dtx_recovery_wait_lsn
test: segwalrep/hintbit_throttle
test: fts_manual_probe
test: fts_session_reset
test: fts_segment_reset
test: fts_doublefault

# Reindex tests
test: reindex/abort_reindex
test: reindex/createidx_while_reindex_idx_ao_btree reindex/createidx_while_reindex_idx_heap_btree reindex/createidx_while_reindex_idx_aoco_btree
test: reindex/createidx_while_reindex_idx_ao_bitmap reindex/createidx_while_reindex_idx_heap_bitmap reindex/createidx_while_reindex_idx_aoco_bitmap
test: reindex/reindextable_while_addpart_ao_part_btree reindex/reindextable_while_addpart_heap_part_btree reindex/reindextable_while_addpart_aoco_part_btree
test: reindex/reindextable_while_altertable_ao_part_btree reindex/reindextable_while_altertable_heap_part_btree reindex/reindextable_while_altertable_aoco_part_btree

# The below tests will cause dead lock when reindexing on partitioned table and dropping index concurrently
# upstream also has this issue, so disable them for now
# test: reindex/reindextable_while_dropindex_ao_part_btree reindex/reindextable_while_dropindex_heap_part_btree reindex/reindextable_while_dropindex_aoco_part_btree

test: reindex/reindextable_while_reindex_idx_ao_part_btree reindex/reindextable_while_reindex_idx_heap_part_btree reindex/reindextable_while_reindex_idx_aoco_part_btree
test: reindex/reindextable_while_reindex_idx_ao_bitmap reindex/reindextable_while_reindex_idx_heap_bitmap reindex/reindextable_while_reindex_idx_aoco_bitmap
test: reindex/serializable_reindex_with_drop_column_heap
test: reindex/serializable_reindex_with_drop_index_ao reindex/serializable_reindex_with_drop_index_heap
test: reindex/repeatable_read_reindex_with_insert_heap
test: reindex/vacuum_analyze_while_reindex_ao_btree
test: reindex/vacuum_while_reindex_ao_bitmap reindex/vacuum_while_reindex_heap_btree reindex/vacuum_while_reindex_heap_btree_toast

# Cancel test
test: cancel_plpython
test: cancel_query

# Tests for getting numsegments in utility mode
test: upgrade_numsegments
# Memory accounting tests

# OOM tests start
test: create_memory_accounting_tables 
ignore: setup_memory_accounting
ignore: oom_mixed_1 oom_mixed_2 oom_simple
ignore: restore_memory_accounting_default
# Sleep and OOM tests end

# Startup OOM tests start
test: setup_startup_memory_accounting
test: oom_startup_memory
test: restore_memory_accounting_default
test: runaway_query

test: distributed_transactions

# Test for tablespace
test: concurrent_drop_truncate_tablespace

# Test for distributed commit array overflow during replay on standby 
test: standby_replay_dtx_info 

# test the orphan temp table is dropped on the coordinator when panic happens on segment
test: orphan_temp_table 

# test if gxid is valid or not on the cluster after running the tests
test: check_gxid

# test if GUC is synchronized from the QD to QEs.
test: sync_guc

# test pg_export_snapshot with distributed snapshot functionality
test: export_distributed_snapshot

# Tests for unique indexes on AO/CO tables (uses fault injector)
test: ao_unique_index
test: aocs_unique_index
test: uao/ao_unique_index_vacuum_row
test: uao/ao_unique_index_vacuum_column

# test for free remapper's memory correctly in FATAL
test: free_remapper_fatal

test: spilling_hashagg

# test for heap tables with concurrency for BRIN
test: brin_heap

# Intensive tests for BRIN
test: uao/brin_chain_row uao/brin_chain_column
